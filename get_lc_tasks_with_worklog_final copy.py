import pandas as pd
import requests
from requests.auth import HTTPBasicAuth
import urllib.parse
from datetime import datetime, timedelta
import os
from dotenv import load_dotenv
import json
import sys
import time
import re
import csv

def get_worklog(issue_key, jira_url, username, password):
    """
    L·∫•y th√¥ng tin log work c·ªßa m·ªôt issue
    
    Args:
        issue_key (str): M√£ issue
        jira_url (str): URL c·ªßa Jira
        username (str): T√™n ƒëƒÉng nh·∫≠p Jira
        password (str): M·∫≠t kh·∫©u Jira
        
    Returns:
        tuple: (danh s√°ch c√°c log work, th√¥ng tin d·ª± √°n, th√¥ng tin parent)
    """
    try:
        # ƒê·∫ßu ti√™n l·∫•y th√¥ng tin chi ti·∫øt v·ªÅ issue ƒë·ªÉ c√≥ ƒë∆∞·ª£c d·ª± √°n
        issue_api_url = f"{jira_url}/rest/api/2/issue/{issue_key}"
        
        issue_response = requests.get(
            issue_api_url,
            auth=HTTPBasicAuth(username, password),
            headers={"Accept": "application/json"},
            timeout=30
        )
        
        # Th√¥ng tin d·ª± √°n m·∫∑c ƒë·ªãnh
        project_info = {
            "key": "",
            "name": "",
            "id": ""
        }
        
        # Th√¥ng tin parent task m·∫∑c ƒë·ªãnh
        parent_info = {
            "key": "",
            "summary": "",
            "type": ""
        }
        
        # Ki·ªÉm tra response l·∫•y th√¥ng tin issue
        if issue_response.status_code == 200:
            issue_data = issue_response.json()
            project = issue_data.get("fields", {}).get("project", {})
            project_info["key"] = project.get("key", "")
            project_info["name"] = project.get("name", "")
            project_info["id"] = project.get("id", "")
            print(f"   üìÇ D·ª± √°n: {project_info['key']} - {project_info['name']}")
            
            # L·∫•y th√¥ng tin parent task n·∫øu c√≥
            parent = issue_data.get("fields", {}).get("parent")
            if parent:
                parent_info["key"] = parent.get("key", "")
                parent_info["summary"] = parent.get("fields", {}).get("summary", "")
                parent_info["type"] = parent.get("fields", {}).get("issuetype", {}).get("name", "")
        else:
            print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y th√¥ng tin d·ª± √°n cho issue {issue_key}: {issue_response.status_code}")
        
        # Ti·∫øp t·ª•c l·∫•y worklog nh∆∞ b√¨nh th∆∞·ªùng
        api_url = f"{jira_url}/rest/api/2/issue/{issue_key}/worklog"
        
        response = requests.get(
            api_url,
            auth=HTTPBasicAuth(username, password),
            headers={"Accept": "application/json"},
            timeout=30
        )
        
        # Ki·ªÉm tra response
        if response.status_code != 200:
            print(f"‚ö†Ô∏è L·ªói khi l·∫•y worklog c·ªßa issue {issue_key}: {response.status_code}")
            return [], project_info, parent_info
            
        # X·ª≠ l√Ω d·ªØ li·ªáu
        data = response.json()
        worklogs = data.get("worklogs", [])
        
        result = []
        for worklog in worklogs:
            try:
                author = worklog.get("author", {}).get("displayName", "")
                time_spent = worklog.get("timeSpent", "")
                time_spent_seconds = worklog.get("timeSpentSeconds", 0)
                started = worklog.get("started", "")
                comment = worklog.get("comment", "")
                
                # Chuy·ªÉn ƒë·ªïi th·ªùi gian
                if started:
                    try:
                        started_date = datetime.fromisoformat(started.replace('Z', '+00:00')).strftime('%d/%m/%Y %H:%M')
                    except ValueError as e:
                        print(f"‚ö†Ô∏è L·ªói ƒë·ªãnh d·∫°ng th·ªùi gian cho worklog c·ªßa issue {issue_key}: {e}")
                        started_date = started
                else:
                    started_date = ""
                
                # T√≠nh s·ªë gi·ªù
                hours_spent = time_spent_seconds / 3600
                
                result.append({
                    "author": author,
                    "time_spent": time_spent,
                    "hours_spent": round(hours_spent, 2),
                    "started": started_date,
                    "comment": comment,
                    "project_key": project_info["key"],
                    "project_name": project_info["name"]
                })
            except Exception as e:
                print(f"‚ö†Ô∏è L·ªói khi x·ª≠ l√Ω worklog: {str(e)}")
                continue
        
        return result, project_info, parent_info
        
    except Exception as e:
        print(f"‚ùå L·ªói khi l·∫•y worklog c·ªßa issue {issue_key}: {str(e)}")
        return [], {"key": "", "name": "", "id": ""}, {"key": "", "summary": "", "type": ""}

def update_story_worklog_from_subtasks(all_tasks):
    """
    C·∫≠p nh·∫≠t tr·∫°ng th√°i has_worklog cho story d·ª±a tr√™n subtask c·ªßa n√≥
    
    Args:
        all_tasks (list): Danh s√°ch t·∫•t c·∫£ task
        
    Returns:
        list: Danh s√°ch task ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
    """
    if not all_tasks:
        print("‚ö†Ô∏è Kh√¥ng c√≥ task n√†o ƒë·ªÉ x·ª≠ l√Ω")
        return all_tasks
        
    print(f"\nüîÑ ƒêang c·∫≠p nh·∫≠t tr·∫°ng th√°i logwork cho story d·ª±a tr√™n subtask... (T·ªïng {len(all_tasks)} task)")
    
    # T·∫°o mapping gi·ªØa parent key v√† c√°c subtask
    parent_to_subtasks = {}
    story_tasks = {}
    subtask_count = 0
    story_count = 0
    
    # Ph√¢n lo·∫°i task v·ªõi logging chi ti·∫øt
    for task in all_tasks:
        task_key = task.get('key', 'UNKNOWN')
        task_type = task.get('type', 'UNKNOWN')
        is_subtask = task.get('is_subtask', False)
        parent_key = task.get('parent_key', '')
        has_worklog = task.get('has_worklog', False)
        
        if is_subtask and parent_key:
            # ƒê√¢y l√† subtask
            if parent_key not in parent_to_subtasks:
                parent_to_subtasks[parent_key] = []
            parent_to_subtasks[parent_key].append(task)
            subtask_count += 1
            print(f"   üìã Subtask: {task_key} (parent: {parent_key}) - Logwork: {'‚úì' if has_worklog else '‚úó'}")
        elif not is_subtask:
            # ƒê√¢y l√† story ho·∫∑c task ƒë·ªôc l·∫≠p
            story_tasks[task_key] = task
            story_count += 1
            print(f"   üìÑ Story/Task: {task_key} ({task_type}) - Logwork: {'‚úì' if has_worklog else '‚úó'}")
    
    print(f"   üìä T·ªïng k·∫øt: {story_count} story/task, {subtask_count} subtask")
    print(f"   üîó T√¨m th·∫•y {len(parent_to_subtasks)} story c√≥ subtask")
    
    # Debug: Hi·ªÉn th·ªã mapping
    for parent_key, subtasks in parent_to_subtasks.items():
        subtasks_with_logwork = [st for st in subtasks if st.get('has_worklog', False)]
        print(f"   üìã {parent_key}: {len(subtasks)} subtask ({len(subtasks_with_logwork)} c√≥ logwork)")
    
    # C·∫≠p nh·∫≠t tr·∫°ng th√°i logwork cho story
    stories_updated = 0
    stories_processed = 0
    
    for story_key, story in story_tasks.items():
        stories_processed += 1
        
        if story_key in parent_to_subtasks:
            # Story n√†y c√≥ subtask
            subtasks = parent_to_subtasks[story_key]
            story_has_worklog = story.get('has_worklog', False)
            
            # Ki·ªÉm tra xem c√≥ subtask n√†o c√≥ logwork kh√¥ng
            subtasks_with_logwork = [st for st in subtasks if st.get('has_worklog', False)]
            
            print(f"   üîç Ki·ªÉm tra story {story_key}:")
            print(f"     - Story c√≥ logwork ri√™ng: {'‚úì' if story_has_worklog else '‚úó'}")
            print(f"     - Subtask c√≥ logwork: {len(subtasks_with_logwork)}/{len(subtasks)}")
            
            # C·∫≠p nh·∫≠t n·∫øu story ch∆∞a c√≥ logwork nh∆∞ng c√≥ subtask c√≥ logwork
            if subtasks_with_logwork and not story_has_worklog:
                print(f"   ‚úÖ C·∫≠p nh·∫≠t story {story_key}: c√≥ {len(subtasks_with_logwork)}/{len(subtasks)} subtask ƒë√£ logwork")
                
                # C·∫≠p nh·∫≠t tr·∫°ng th√°i logwork
                story['has_worklog'] = True
                story['has_child_with_logwork'] = True
                
                # T√≠nh t·ªïng th·ªùi gian t·ª´ subtask n·∫øu story ch∆∞a c√≥ worklog ri√™ng
                current_story_hours = story.get('total_hours', 0)
                if current_story_hours == 0:
                    total_subtask_hours = sum(st.get('total_hours', 0) for st in subtasks_with_logwork)
                    story['total_hours'] = round(total_subtask_hours, 2)
                    print(f"     üìä C·∫≠p nh·∫≠t th·ªùi gian story: {current_story_hours}h ‚Üí {story['total_hours']}h")
                
                # C·∫≠p nh·∫≠t time_saved_hours n·∫øu ƒëang l√† -1 (ch∆∞a c√≥ logwork)
                current_time_saved = story.get('time_saved_hours', -1)
                if current_time_saved == -1:
                    original_estimate = story.get('original_estimate_hours', 0)
                    if original_estimate > 0:
                        story['time_saved_hours'] = original_estimate - story.get('total_hours', 0)
                        story['time_saved_hours'] = round(story['time_saved_hours'], 2)
                        
                        if story['time_saved_hours'] > 0:
                            saving_percent = (story['time_saved_hours'] / original_estimate) * 100
                            story['time_saved_percent'] = round(saving_percent, 1)
                            print(f"     üí∞ Ti·∫øt ki·ªám: {story['time_saved_hours']}h ({story['time_saved_percent']}%)")
                        else:
                            story['time_saved_percent'] = 0
                            print(f"     ‚ö†Ô∏è V∆∞·ª£t th·ªùi gian: {abs(story['time_saved_hours'])}h")
                    else:
                        story['time_saved_hours'] = 0
                        story['time_saved_percent'] = 0
                        print(f"     ‚ÑπÔ∏è Kh√¥ng c√≥ estimate, ƒë·∫∑t time_saved_hours = 0")
                
                stories_updated += 1
                
                # Hi·ªÉn th·ªã danh s√°ch subtask c√≥ logwork
                for st in subtasks_with_logwork:
                    print(f"     ‚îî‚îÄ {st.get('key')}: {st.get('total_hours', 0)}h")
            elif story_has_worklog:
                print(f"   ‚ÑπÔ∏è Story {story_key} ƒë√£ c√≥ logwork ri√™ng, kh√¥ng c·∫ßn c·∫≠p nh·∫≠t")
            elif not subtasks_with_logwork:
                print(f"   ‚ö†Ô∏è Story {story_key} kh√¥ng c√≥ subtask n√†o c√≥ logwork")
    
    print(f"‚úÖ ƒê√£ x·ª≠ l√Ω {stories_processed} story, c·∫≠p nh·∫≠t {stories_updated} story d·ª±a tr√™n logwork c·ªßa subtask")
    
    if stories_updated == 0 and len(parent_to_subtasks) > 0:
        print("‚ö†Ô∏è C·∫¢NH B√ÅO: C√≥ story c√≥ subtask nh∆∞ng kh√¥ng story n√†o ƒë∆∞·ª£c c·∫≠p nh·∫≠t!")
        print("   C√≥ th·ªÉ nguy√™n nh√¢n:")
        print("   - T·∫•t c·∫£ story ƒë√£ c√≥ logwork ri√™ng")
        print("   - Subtask kh√¥ng c√≥ logwork")
        print("   - Logic ƒëi·ªÅu ki·ªán c√≥ v·∫•n ƒë·ªÅ")
    
    return all_tasks

def filter_parent_tasks_without_updated_children(all_tasks, filter_enabled=True):
    """
    L·ªçc b·ªè task cha khi t·∫•t c·∫£ task con kh√¥ng c√≥ update
    
    Args:
        all_tasks (list): Danh s√°ch t·∫•t c·∫£ task
        filter_enabled (bool): C√≥ b·∫≠t t√≠nh nƒÉng l·ªçc kh√¥ng
        
    Returns:
        list: Danh s√°ch task ƒë√£ ƒë∆∞·ª£c l·ªçc
    """
    if not filter_enabled:
        return all_tasks
        
    print(f"\nüîç ƒêang ki·ªÉm tra task cha kh√¥ng c√≥ task con v·ªõi update...")
    
    # T·∫°o mapping gi·ªØa parent key v√† c√°c subtask
    parent_to_children = {}
    parent_tasks = {}
    
    # Ph√¢n lo·∫°i task
    for task in all_tasks:
        task_key = task.get('key')
        if task.get('is_subtask') and task.get('parent_key'):
            # ƒê√¢y l√† subtask
            parent_key = task.get('parent_key')
            if parent_key not in parent_to_children:
                parent_to_children[parent_key] = []
            parent_to_children[parent_key].append(task)
        elif not task.get('is_subtask'):
            # ƒê√¢y l√† task cha ho·∫∑c task ƒë·ªôc l·∫≠p
            parent_tasks[task_key] = task
    
    # T√¨m task cha c·∫ßn lo·∫°i b·ªè
    tasks_to_remove = []
    
    for parent_key, parent_task in parent_tasks.items():
        if parent_key in parent_to_children:
            # Task n√†y c√≥ c√°c task con
            children = parent_to_children[parent_key]
            
            # Ki·ªÉm tra xem c√≥ task con n√†o c√≥ update kh√¥ng
            children_with_update = []
            for child in children:
                has_update = (
                    child.get('has_worklog', False) or 
                    child.get('last_update_time') or
                    child.get('update_reasons', [])
                )
                if has_update:
                    children_with_update.append(child)
            
            # N·∫øu kh√¥ng c√≥ task con n√†o c√≥ update, ƒë√°nh d·∫•u task cha ƒë·ªÉ lo·∫°i b·ªè
            if not children_with_update:
                tasks_to_remove.append(parent_key)
                print(f"   ‚ùå Task cha {parent_key} s·∫Ω b·ªã lo·∫°i b·ªè v√¨ kh√¥ng c√≥ task con n√†o c√≥ update")
                print(f"      ‚îî‚îÄ C√≥ {len(children)} task con, t·∫•t c·∫£ ƒë·ªÅu kh√¥ng c√≥ update")
            else:
                print(f"   ‚úÖ Task cha {parent_key} ƒë∆∞·ª£c gi·ªØ l·∫°i")
                print(f"      ‚îî‚îÄ C√≥ {len(children_with_update)}/{len(children)} task con c√≥ update")
    
    # L·ªçc b·ªè task cha v√† task con c·ªßa ch√∫ng
    filtered_tasks = []
    removed_count = 0
    
    for task in all_tasks:
        task_key = task.get('key')
        parent_key = task.get('parent_key')
        
        # N·∫øu l√† task cha b·ªã ƒë√°nh d·∫•u lo·∫°i b·ªè
        if task_key in tasks_to_remove:
            removed_count += 1
            continue
            
        # N·∫øu l√† task con c·ªßa task cha b·ªã ƒë√°nh d·∫•u lo·∫°i b·ªè
        if parent_key and parent_key in tasks_to_remove:
            removed_count += 1
            continue
            
        # Gi·ªØ l·∫°i task
        filtered_tasks.append(task)
    
    print(f"   üìä ƒê√£ lo·∫°i b·ªè {removed_count} task (bao g·ªìm {len(tasks_to_remove)} task cha v√† task con c·ªßa ch√∫ng)")
    print(f"   üìã C√≤n l·∫°i {len(filtered_tasks)}/{len(all_tasks)} task")
    
    return filtered_tasks

def get_employee_tasks(employee_identifier, start_date, end_date, jira_url, username, password, request_delay=0.1, include_worklog=True, is_email=True, include_reported=False, show_jql=True, time_field="updatedDate", jira_project_filter=None, jira_project_exclude=None, jira_status_exclude=None, ignore_fix_version_sprint_updates=True, assignee_updates_only=False, status_updates_only=False, skill_group=None, filter_parent_without_updated_children=True):
    """
    L·∫•y danh s√°ch task c·ªßa m·ªôt nh√¢n vi√™n t·ª´ Jira
    
    Args:
        employee_identifier (str): Email ho·∫∑c username c·ªßa nh√¢n vi√™n
        start_date (str): Ng√†y b·∫Øt ƒë·∫ßu (ƒë·ªãnh d·∫°ng yyyy-MM-dd)
        end_date (str): Ng√†y k·∫øt th√∫c (ƒë·ªãnh d·∫°ng yyyy-MM-dd)
        jira_url (str): URL c·ªßa Jira
        username (str): T√™n ƒëƒÉng nh·∫≠p Jira
        password (str): M·∫≠t kh·∫©u Jira
        request_delay (float): Th·ªùi gian tr·ªÖ gi·ªØa c√°c request (gi√¢y)
        include_worklog (bool): C√≥ l·∫•y th√¥ng tin log work hay kh√¥ng
        is_email (bool): True n·∫øu employee_identifier l√† email, False n·∫øu l√† username
        include_reported (bool): True n·∫øu bao g·ªìm c·∫£ task do nh√¢n vi√™n b√°o c√°o ho·∫∑c t·∫°o
        show_jql (bool): True n·∫øu mu·ªën hi·ªÉn th·ªã JQL query
        time_field (str): Tr∆∞·ªùng th·ªùi gian s·ª≠ d·ª•ng ƒë·ªÉ l·ªçc (updatedDate, created, resolutiondate)
        jira_project_filter (list): Danh s√°ch m√£ d·ª± √°n Jira c·∫ßn l·ªçc
        jira_project_exclude (list): Danh s√°ch m√£ d·ª± √°n Jira c·∫ßn lo·∫°i b·ªè
        jira_status_exclude (list): Danh s√°ch tr·∫°ng th√°i Jira c·∫ßn lo·∫°i b·ªè
        ignore_fix_version_sprint_updates (bool): B·ªè qua c√°c c·∫≠p nh·∫≠t ch·ªâ li√™n quan ƒë·∫øn Fix Version ho·∫∑c Sprint
        assignee_updates_only (bool): Ch·ªâ l·∫•y c·∫≠p nh·∫≠t quan tr·ªçng c·ªßa ng∆∞·ªùi ƒë∆∞·ª£c g√°n task
        status_updates_only (bool): Ch·ªâ l·∫•y c·∫≠p nh·∫≠t thay ƒë·ªïi tr·∫°ng th√°i do ch√≠nh assignee th·ª±c hi·ªán
        skill_group (str): Nh√≥m k·ªπ nƒÉng c·ªßa nh√¢n vi√™n. N·∫øu l√† "Test", ch·ªâ l·∫•y issue c√≥ status DONE ho·∫∑c COMPLETED
        filter_parent_without_updated_children (bool): L·ªçc b·ªè task cha khi t·∫•t c·∫£ task con kh√¥ng c√≥ update
        
    Returns:
        list: Danh s√°ch c√°c task
    """
    try:
        # T·∫°o JQL ƒë·ªÉ t√¨m ki·∫øm task c·ªßa nh√¢n vi√™n trong kho·∫£ng th·ªùi gian
        if is_email:
            # Th·ª≠ t√¨m ki·∫øm theo email tr∆∞·ªõc
            if include_reported:
                jql_query = f"(assignee = '{employee_identifier}' OR reporter = '{employee_identifier}') AND {time_field} >= '{start_date}' AND {time_field} <= '{end_date}'"
            else:
                jql_query = f"assignee = '{employee_identifier}' AND {time_field} >= '{start_date}' AND {time_field} <= '{end_date}'"
        else:
            # N·∫øu kh√¥ng ph·∫£i email, t√¨m ki·∫øm theo username c≈©ng s·ª≠ d·ª•ng d·∫•u nh√°y ƒë∆°n ƒë·ªÉ ƒë·ªìng nh·∫•t
            if include_reported:
                jql_query = f"(assignee = '{employee_identifier}' OR reporter = '{employee_identifier}') AND {time_field} >= '{start_date}' AND {time_field} <= '{end_date}'"
            else:
                jql_query = f"assignee = '{employee_identifier}' AND {time_field} >= '{start_date}' AND {time_field} <= '{end_date}'"
        
        # Th√™m b·ªô l·ªçc d·ª± √°n Jira n·∫øu c√≥
        if jira_project_filter is None or len(jira_project_filter) == 0:
            jira_project_filter = ["FC", "FSS"]  # Gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥
            print(f"   ‚ÑπÔ∏è S·ª≠ d·ª•ng b·ªô l·ªçc d·ª± √°n m·∫∑c ƒë·ªãnh: {', '.join(jira_project_filter)}")
            
        # ƒê·∫£m b·∫£o lu√¥n th√™m b·ªô l·ªçc d·ª± √°n
        project_clause = " AND project in (" + ", ".join([f"'{p}'" for p in jira_project_filter]) + ")"
        jql_query += project_clause
        
        # Th√™m m·ªánh ƒë·ªÅ lo·∫°i b·ªè d·ª± √°n n·∫øu c√≥ 
        if jira_project_exclude:
            exclude_clause = " AND project not in (" + ", ".join([f"'{p}'" for p in jira_project_exclude]) + ")"
            jql_query += exclude_clause
            
        # Th√™m m·ªánh ƒë·ªÅ lo·∫°i b·ªè tr·∫°ng th√°i n·∫øu c√≥
        if jira_status_exclude:
            status_exclude_clause = " AND status not in (" + ", ".join([f"'{s}'" for s in jira_status_exclude]) + ")"
            jql_query += status_exclude_clause
            
        # √Åp d·ª•ng filter ƒë·∫∑c bi·ªát cho nh√¢n vi√™n c√≥ SKILL_GROUP l√† "Test"
        if skill_group and skill_group.upper() == "TEST":
            test_status_clause = " AND status in ('DONE', 'COMPLETED')"
            jql_query += test_status_clause
            print(f"   ‚ÑπÔ∏è √Åp d·ª•ng filter ƒë·∫∑c bi·ªát cho SKILL_GROUP 'Test': ch·ªâ l·∫•y issue c√≥ status DONE ho·∫∑c COMPLETED")
            
        encoded_jql = urllib.parse.quote(jql_query)
        
        # Hi·ªÉn th·ªã JQL query
        if show_jql:
            print(f"   üîç JQL Query: {jql_query}")
        
        # G·ª≠i request ƒë·∫øn Jira API
        max_results = 1000
        start_at = 0
        all_issues = []
        
        while True:
            api_url = f"{jira_url}/rest/api/2/search?jql={encoded_jql}&maxResults={max_results}&startAt={start_at}"
            
            # Hi·ªÉn th·ªã URL trong l·∫ßn l·∫∑p ƒë·∫ßu ti√™n
            if start_at == 0 and show_jql:
                print(f"   üåê API URL: {jira_url}/rest/api/2/search?jql=...")
            
            response = requests.get(
                api_url,
                auth=HTTPBasicAuth(username, password),
                headers={"Accept": "application/json"},
                timeout=30
            )
            
            # Ki·ªÉm tra response
            if response.status_code != 200:
                if is_email and "Error in the JQL Query" in response.text:
                    # N·∫øu t√¨m theo email b·ªã l·ªói v√† ƒë√¢y l√† l·∫ßn ƒë·∫ßu th·ª≠, th·ª≠ l·∫°i v·ªõi username
                    print(f"   ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y task v·ªõi email, th·ª≠ t√¨m v·ªõi username...")
                    return get_employee_tasks(employee_identifier.split('@')[0], start_date, end_date, 
                                           jira_url, username, password, request_delay, include_worklog, False, 
                                           include_reported, show_jql, time_field, jira_project_filter, jira_project_exclude, jira_status_exclude, ignore_fix_version_sprint_updates, assignee_updates_only, status_updates_only, skill_group, filter_parent_without_updated_children)
                else:
                    print(f"‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ Jira: {response.status_code} - {response.text}")
                    return []
                
            # X·ª≠ l√Ω d·ªØ li·ªáu
            data = response.json()
            issues = data.get("issues", [])
            
            # N·∫øu kh√¥ng t√¨m th·∫•y issues v√† ƒëang t√¨m theo email, th·ª≠ chuy·ªÉn sang t√¨m theo username
            if not issues and is_email:
                print(f"   ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y task v·ªõi email, th·ª≠ t√¨m v·ªõi username...")
                return get_employee_tasks(employee_identifier.split('@')[0], start_date, end_date, 
                                       jira_url, username, password, request_delay, include_worklog, False, 
                                       include_reported, show_jql, time_field, jira_project_filter, jira_project_exclude, jira_status_exclude, ignore_fix_version_sprint_updates, assignee_updates_only, status_updates_only, skill_group, filter_parent_without_updated_children)
                
            all_issues.extend(issues)
            
            # Ki·ªÉm tra ph√¢n trang
            if len(issues) < max_results or start_at + len(issues) >= data.get("total", 0):
                break
            
            # TƒÉng ch·ªâ s·ªë b·∫Øt ƒë·∫ßu cho trang ti·∫øp theo
            start_at += max_results
            
            # Th√™m ƒë·ªô tr·ªÖ gi·ªØa c√°c request ƒë·ªÉ gi·∫£m t·∫£i cho server
            if request_delay > 0:
                time.sleep(request_delay)
        
        # Th·ªëng k√™ s·ªë l∆∞·ª£ng v√† tr·∫°ng th√°i c√°c issue tr·∫£ v·ªÅ t·ª´ API
        if all_issues:
            # Th·ªëng k√™ theo d·ª± √°n
            api_projects = {}
            # Th·ªëng k√™ theo status
            status_counts = {}
            
            for issue in all_issues:
                # Th·ªëng k√™ theo d·ª± √°n
                project_key = issue.get("fields", {}).get("project", {}).get("key", "Unknown")
                if project_key not in api_projects:
                    api_projects[project_key] = 0
                api_projects[project_key] += 1
                
                # Th·ªëng k√™ theo status
                status = issue.get("fields", {}).get("status", {}).get("name", "Unknown")
                if status not in status_counts:
                    status_counts[status] = 0
                status_counts[status] += 1
            
            print(f"   ‚ÑπÔ∏è T·ªïng s·ªë issue t√¨m th·∫•y: {len(all_issues)}")
            print(f"   ‚ÑπÔ∏è D·ª± √°n tr·∫£ v·ªÅ t·ª´ API: {', '.join([f'{k}({v})' for k,v in api_projects.items()])}")
            print(f"   ‚ÑπÔ∏è C√°c tr·∫°ng th√°i c·ªßa issue:")
            for status, count in sorted(status_counts.items(), key=lambda x: x[1], reverse=True):
                print(f"      - {status}: {count} issues ({count/len(all_issues)*100:.1f}%)")
            
            # Ki·ªÉm tra xem c√≥ d·ª± √°n n√†o kh√¥ng n·∫±m trong b·ªô l·ªçc kh√¥ng
            if jira_project_filter:
                unexpected_projects = [p for p in api_projects.keys() if p not in jira_project_filter]
                if unexpected_projects:
                    print(f"   ‚ö†Ô∏è Ph√°t hi·ªán d·ª± √°n kh√¥ng n·∫±m trong b·ªô l·ªçc: {', '.join(unexpected_projects)}")
        
        # X·ª≠ l√Ω v√† tr·∫£ v·ªÅ k·∫øt qu·∫£
        result = []
        filtered_issues = []
        
        # L·ªçc b·ªè c√°c task c√≥ component l√† "Ecom - Pending"
        issues_before_filter = len(all_issues)
        all_issues = [issue for issue in all_issues if "Ecom - Pending" not in [component.get("name", "") for component in issue.get("fields", {}).get("components", [])] and issue.get("fields", {}).get("issuetype", {}).get("name", "") != "Epic"]
        issues_filtered = issues_before_filter - len(all_issues)
        if issues_filtered > 0:
            print(f"   ‚ö†Ô∏è ƒê√£ lo·∫°i b·ªè {issues_filtered} task c√≥ component \"Ecom - Pending\"")
        
        # N·∫øu ch·ªçn b·ªè qua c·∫≠p nh·∫≠t Fix Version/Sprint/RemoteIssueLink, l·ªçc th√™m d·ª±a tr√™n th·ªùi gian c·∫≠p nh·∫≠t th·ª±c
        if ignore_fix_version_sprint_updates and time_field == "updatedDate":
            print(f"   ‚ÑπÔ∏è ƒêang ki·ªÉm tra th·ªùi gian c·∫≠p nh·∫≠t th·ª±c cho {len(all_issues)} task...")
            start_date_dt = datetime.strptime(start_date, "%Y-%m-%d")
            end_date_dt = datetime.strptime(end_date, "%Y-%m-%d") + timedelta(days=1) - timedelta(seconds=1)  # Cu·ªëi ng√†y end_date
            
            for issue in all_issues:
                try:
                    key = issue.get("key", "")
                    
                    # L·∫•y th√¥ng tin ng∆∞·ªùi ƒë∆∞·ª£c g√°n task (assignee) tr∆∞·ªõc khi g·ªçi get_update_reason
                    assignee = issue.get("fields", {}).get("assignee", {})
                    current_assignee_name = assignee.get("displayName", "") if assignee else "Unassigned"
                    
                    # L·∫•y changelog chi ti·∫øt
                    update_info = get_update_reason(key, jira_url, username, password, current_assignee_name, assignee_updates_only, status_updates_only)
                    
                    if update_info["last_update_time"]:
                        try:
                            # Chuy·ªÉn ƒë·ªïi th·ªùi gian c·∫≠p nh·∫≠t quan tr·ªçng th√†nh datetime
                            update_time = datetime.strptime(update_info["last_update_time"], "%d/%m/%Y %H:%M")
                            
                            # Ki·ªÉm tra xem th·ªùi gian c·∫≠p nh·∫≠t c√≥ n·∫±m trong kho·∫£ng c·∫ßn l·ªçc kh√¥ng
                            if start_date_dt <= update_time <= end_date_dt:
                                filtered_issues.append(issue)
                                print(f"   ‚úÖ Task {key} c√≥ c·∫≠p nh·∫≠t quan tr·ªçng v√†o {update_info['last_update_time']} - Trong kho·∫£ng th·ªùi gian c·∫ßn l·ªçc")
                            else:
                                print(f"   ‚ùå Task {key} c√≥ c·∫≠p nh·∫≠t quan tr·ªçng v√†o {update_info['last_update_time']} - Ngo√†i kho·∫£ng th·ªùi gian c·∫ßn l·ªçc")
                        except Exception as e:
                            print(f"   ‚ö†Ô∏è L·ªói khi ph√¢n t√≠ch th·ªùi gian c·∫≠p nh·∫≠t c·ªßa task {key}: {str(e)}")
                            # N·∫øu c√≥ l·ªói th√¨ v·∫´n gi·ªØ l·∫°i task
                            filtered_issues.append(issue)
                    else:
                        # N·∫øu kh√¥ng c√≥ th√¥ng tin c·∫≠p nh·∫≠t, gi·ªØ l·∫°i task
                        filtered_issues.append(issue)
                        print(f"   ‚ÑπÔ∏è Task {key} kh√¥ng c√≥ th√¥ng tin c·∫≠p nh·∫≠t")
                except Exception as e:
                    print(f"   ‚ö†Ô∏è L·ªói khi ki·ªÉm tra l·ªãch s·ª≠ c·∫≠p nh·∫≠t c·ªßa task {issue.get('key', '')}: {str(e)}")
                    # V·∫´n gi·ªØ l·∫°i task n·∫øu c√≥ l·ªói
                    filtered_issues.append(issue)
            
            print(f"   ‚ÑπÔ∏è ƒê√£ l·ªçc {len(filtered_issues)}/{len(all_issues)} task d·ª±a tr√™n th·ªùi gian c·∫≠p nh·∫≠t th·ª±c")
            all_issues = filtered_issues
        
        # X·ª≠ l√Ω v√† tr·∫£ v·ªÅ k·∫øt qu·∫£
        result = []
        for issue in all_issues:
            try:
                key = issue.get("key", "")
                summary = issue.get("fields", {}).get("summary", "")
                status = issue.get("fields", {}).get("status", {}).get("name", "")
                updated = issue.get("fields", {}).get("updated", "")
                issue_type = issue.get("fields", {}).get("issuetype", {}).get("name", "")
                priority = issue.get("fields", {}).get("priority", {}).get("name", "")
                project = issue.get("fields", {}).get("project", {}).get("key", "").upper()
                
                # L·∫•y th√¥ng tin ng∆∞·ªùi ƒë∆∞·ª£c g√°n task (assignee)
                assignee = issue.get("fields", {}).get("assignee", {})
                assignee_name = assignee.get("displayName", "") if assignee else "Unassigned"
                assignee_email = assignee.get("emailAddress", "") if assignee else ""
                
                # N·∫øu c√≥ b·ªô l·ªçc d·ª± √°n, ki·ªÉm tra xem d·ª± √°n c·ªßa task c√≥ n·∫±m trong b·ªô l·ªçc kh√¥ng
                if jira_project_filter and project not in jira_project_filter:
                    print(f"   ‚ö†Ô∏è B·ªè qua task {key} c·ªßa d·ª± √°n {project} (kh√¥ng n·∫±m trong b·ªô l·ªçc)")
                    continue
                
                # L·∫•y th√¥ng tin components c·ªßa task
                components = issue.get("fields", {}).get("components", [])
                component_names = [component.get("name", "") for component in components]
                component_str = ", ".join(component_names) if component_names else "Kh√¥ng c√≥ component"
                
                # X√°c ƒë·ªãnh d·ª± √°n th·ª±c t·∫ø
                actual_project = get_actual_project(project, component_names)
                
                                # DEBUG: Theo d√µi vi·ªác g√°n actual_project cho PKT v√† WAK
                # if project == "PKT":
                #     print(f"üîç DEBUG: Task {key} t·ª´ PKT ƒë∆∞·ª£c g√°n actual_project = '{actual_project}'")
                #     print(f"           Components: {component_names}")
                #     if actual_project == "PKT":
                #         print(f"üö® L·ªñI: Task {key} t·ª´ PKT KH√îNG ƒë∆∞·ª£c chuy·ªÉn ƒë·ªïi! Ki·ªÉm tra h√†m get_actual_project()")
                
                # if project == "WAK":
                #     print(f"üîç DEBUG: Task {key} t·ª´ WAK ƒë∆∞·ª£c g√°n actual_project = '{actual_project}'")
                #     print(f"           Components: {component_names}")
                #     if actual_project == "WAK":
                #         print(f"üö® L·ªñI: Task {key} t·ª´ WAK KH√îNG ƒë∆∞·ª£c chuy·ªÉn ƒë·ªïi! Ki·ªÉm tra h√†m get_actual_project()")
                
                # Filter: Ch·ªâ gi·ªØ l·∫°i tasks v·ªõi logic m·ªõi (lo·∫°i b·ªè tasks v·ªõi components legacy)
                if project == "FC" and actual_project == project:
                    # N·∫øu task t·ª´ FC project m√† kh√¥ng ƒë∆∞·ª£c ph√¢n lo·∫°i th√†nh business project n√†o
                    # th√¨ ƒë√¢y l√† task v·ªõi components legacy, b·ªè qua
                    legacy_components = []
                    
                    # Ki·ªÉm tra c√°c components legacy ƒë√£ b·ªã lo·∫°i b·ªè (ch·ªâ c√≤n Kho T·ªïng)
                    legacy_kho_tong = ["IMS-WMS", "IMS-POMS", "B17.PIM"]
                    
                    for comp in component_names:
                        if comp in legacy_kho_tong:
                            legacy_components.append(comp)
                    
                    if legacy_components:
                        print(f"   üö´ B·ªè qua task {key} v·ªõi components legacy: {', '.join(legacy_components)}")
                        continue
                    
                    # N·∫øu kh√¥ng c√≥ components n√†o ho·∫∑c components kh√¥ng match logic m·ªõi th√¨ c≈©ng b·ªè qua
                    if not component_names or actual_project == "FC":
                        print(f"   üö´ B·ªè qua task {key} t·ª´ FC kh√¥ng thu·ªôc business project n√†o")
                        continue
                
                # X·ª≠ l√Ω custom field an to√†n
                customfield_10000 = issue.get("fields", {}).get("customfield_10000", "")
                if isinstance(customfield_10000, dict) and "value" in customfield_10000:
                    skill_group = customfield_10000.get("value", "")
                else:
                    skill_group = ""
                    
                # L·∫•y project name an to√†n
                project_obj = issue.get("fields", {}).get("project", {})
                if isinstance(project_obj, dict) and "name" in project_obj:
                    project_name = project_obj.get("name", "")
                else:
                    project_name = ""
                
                # L·∫•y th√¥ng tin log work
                worklogs = []
                total_hours = 0
                project_info = {}
                parent_info = {}
                
                # Kh·ªüi t·∫°o c√°c bi·∫øn t√≠nh to√°n ti·∫øt ki·ªám th·ªùi gian
                # Gi√° tr·ªã m·∫∑c ƒë·ªãnh cho time_saved_hours l√† -1 (kh√¥ng c√≥ log work)
                time_saved_hours = -1
                time_saved_percent = 0
                is_completed = False
                
                # L·∫•y th√¥ng tin ∆∞·ªõc t√≠nh th·ªùi gian (Original Estimate)
                original_estimate_seconds = issue.get("fields", {}).get("timeoriginalestimate", 0) or 0
                original_estimate_hours = original_estimate_seconds / 3600
                
                if include_worklog:
                    # Ki·ªÉm tra lo·∫°i task
                    is_subtask = issue_type == "Sub-task"
                    
                    if is_subtask:
                        print(f"   üîÑ ƒêang l·∫•y worklog cho sub-task {key} [{issue_type} - {status}]...")
                    else:
                        print(f"   üîÑ ƒêang l·∫•y worklog cho issue {key} [{issue_type} - {status}]...")
                    
                    # Hi·ªÉn th·ªã th√¥ng tin ∆∞·ªõc t√≠nh (n·∫øu c√≥)
                    if original_estimate_seconds > 0:
                        print(f"   ‚è±Ô∏è Th·ªùi gian ∆∞·ªõc t√≠nh (kh√¥ng AI): {original_estimate_hours:.2f}h")
                    
                    worklogs, project_info, parent_info = get_worklog(key, jira_url, username, password)
                    
                    # Hi·ªÉn th·ªã th√¥ng tin task cha n·∫øu ƒë√¢y l√† sub-task
                    if parent_info and parent_info.get("key"):
                        print(f"   üìå Sub-task c·ªßa: {parent_info.get('key')} - {parent_info.get('summary')} [{parent_info.get('type')}]")
                    
                    # T√≠nh t·ªïng s·ªë gi·ªù log work
                    if worklogs:
                        total_hours = sum(worklog.get("hours_spent", 0) for worklog in worklogs)
                        
                        if original_estimate_seconds > 0:
                            # ƒê√£ c√≥ log work v√† c√≥ estimate, m·∫∑c ƒë·ªãnh ƒë·∫∑t time_saved_hours = 0 (c√≥ log work nh∆∞ng kh√¥ng ti·∫øt ki·ªám)
                            time_saved_hours = 0
                            
                            # Ch·ªâ t√≠nh ti·∫øt ki·ªám cho task ƒë√£ ho√†n th√†nh v√† kh√¥ng ƒëang tri·ªÉn khai (IMPLEMENTING)
                            is_completed = "IMPLEMENTING" not in status.upper()
                            if is_completed and original_estimate_hours > 0:
                                # T√≠nh to√°n th·ªùi gian ti·∫øt ki·ªám th·ª±c t·∫ø
                                saved_hours, saving_ratio = calculate_saved_time(original_estimate_hours, total_hours)
                                time_saved_hours = saved_hours
                                time_saved_percent = saving_ratio
                            
                            # Hi·ªÉn th·ªã th√¥ng tin
                            if is_completed:
                                if time_saved_hours > 0:
                                    print(f"   üí∞ Ti·∫øt ki·ªám ƒë∆∞·ª£c: {time_saved_hours:.2f}h ({time_saved_percent:.1f}%)")
                                elif time_saved_hours == 0:
                                    print(f"   ‚öôÔ∏è S·ª≠ d·ª•ng ƒë√∫ng th·ªùi gian ∆∞·ªõc t√≠nh")
                                else:
                                    print(f"   ‚ö†Ô∏è V∆∞·ª£t th·ªùi gian: {abs(time_saved_hours):.2f}h")
                            else:
                                print(f"   ‚ÑπÔ∏è Task ch∆∞a ho√†n th√†nh, kh√¥ng t√≠nh ti·∫øt ki·ªám")
                        else:
                            # C√≥ log work nh∆∞ng kh√¥ng c√≥ estimate
                            time_saved_hours = -2  # ƒê√°nh d·∫•u ƒë·∫∑c bi·ªát cho tr∆∞·ªùng h·ª£p n√†y
                            time_saved_percent = 0
                            is_completed = "IMPLEMENTING" not in status.upper()
                            print(f"   ‚è±Ô∏è ƒê√£ log work {total_hours:.2f}h nh∆∞ng kh√¥ng c√≥ estimate")
                    else:
                        # Kh√¥ng c√≥ log work, gi√° tr·ªã time_saved_hours v·∫´n l√† -1
                        total_hours = 0
                        time_saved_hours = -1
                        time_saved_percent = 0
                        is_completed = False
                        print(f"   ‚ö†Ô∏è Task ch∆∞a c√≥ log work n√†o")
                    
                    # Th√™m ƒë·ªô tr·ªÖ gi·ªØa c√°c request ƒë·ªÉ gi·∫£m t·∫£i cho server
                    if request_delay > 0:
                        time.sleep(request_delay)
                
                # Chuy·ªÉn ƒë·ªïi th·ªùi gian c·∫≠p nh·∫≠t v√† l·∫•y l√Ω do c·∫≠p nh·∫≠t cho T·∫§T C·∫¢ c√°c task, kh√¥ng ch·ªâ c·∫≠p nh·∫≠t h√¥m nay
                updated_dt = datetime.fromisoformat(updated.replace('Z', '+00:00'))
                updated_date = updated_dt.strftime('%d/%m/%Y %H:%M')

                # L·∫•y th√¥ng tin c·∫≠p nh·∫≠t cho t·∫•t c·∫£ c√°c task
                update_info = get_update_reason(key, jira_url, username, password, assignee_name, assignee_updates_only, status_updates_only)
                if update_info["last_updater"]:
                    last_updater_name = update_info['last_updater']['name']
                    main_reason = update_info.get('main_update_reason', 'Kh√¥ng x√°c ƒë·ªãnh')
                    update_category = update_info.get('update_category', 'unknown')
                    
                    # Hi·ªÉn th·ªã l√Ω do ch√≠nh v√† th√¥ng tin c·∫≠p nh·∫≠t
                    print(f"   üéØ L√Ω do: {main_reason}")
                    print(f"   üë§ C·∫≠p nh·∫≠t cu·ªëi: {update_info['last_update_time']} b·ªüi {last_updater_name}")
                    
                    # Ki·ªÉm tra v√† hi·ªÉn th·ªã c·∫£nh b√°o n·∫øu ng∆∞·ªùi c·∫≠p nh·∫≠t cu·ªëi c√πng kh√°c v·ªõi ng∆∞·ªùi ƒë∆∞·ª£c g√°n
                    if assignee_name and last_updater_name and assignee_name != last_updater_name:
                        print(f"   ‚ö†Ô∏è CH√ö √ù: Ng∆∞·ªùi c·∫≠p nh·∫≠t cu·ªëi ({last_updater_name}) kh√°c v·ªõi ng∆∞·ªùi ƒë∆∞·ª£c g√°n task ({assignee_name})")
                    
                    # Hi·ªÉn th·ªã chi ti·∫øt thay ƒë·ªïi (b·ªè qua d√≤ng ƒë·∫ßu ti√™n v√¨ ƒë√£ hi·ªÉn th·ªã l√Ω do ch√≠nh)
                    detail_reasons = update_info["reasons"][1:4] if len(update_info["reasons"]) > 1 else []
                    for reason in detail_reasons:
                        print(f"     {reason}")
                    if len(update_info["reasons"]) > 4:
                        print(f"     ... v√† {len(update_info['reasons']) - 4} thay ƒë·ªïi kh√°c")
                
                # Ghi ƒë√® project name t·ª´ d·ªØ li·ªáu m·ªõi nh·∫•t n·∫øu c√≥
                if project_info and project_info.get("name"):
                    project_name = project_info.get("name", project_name)
                
                result.append({
                    "key": key,
                    "summary": summary,
                    "status": status,
                    "updated": updated_date,
                    "type": issue_type,
                    "priority": priority,
                    "project": project,
                    "project_name": project_name,
                    "components": component_names,
                    "component_str": component_str,
                    "actual_project": actual_project,  # Th√™m tr∆∞·ªùng d·ª± √°n th·ª±c t·∫ø
                    "link": f"{jira_url}/browse/{key}",
                    "worklogs": worklogs,
                    "total_hours": round(total_hours, 2),
                    "has_worklog": len(worklogs) > 0,
                    "parent_key": parent_info.get("key", ""),
                    "parent_summary": parent_info.get("summary", ""),
                    "is_subtask": issue_type == "Sub-task",
                    "original_estimate_hours": round(original_estimate_hours, 2),
                    "time_saved_hours": round(time_saved_hours, 2),
                    "time_saved_percent": round(time_saved_percent, 1),
                    "is_completed": is_completed,
                    "has_estimate": original_estimate_seconds > 0,  # Th√™m tr∆∞·ªùng ƒë√°nh d·∫•u c√≥ estimate hay kh√¥ng
                    "update_reasons": update_info["reasons"],
                    "last_updater": update_info.get("last_updater", {}),
                    "last_update_time": update_info.get("last_update_time", ""),
                    "main_update_reason": update_info.get("main_update_reason", "Kh√¥ng x√°c ƒë·ªãnh"),
                    "update_category": update_info.get("update_category", "unknown"),
                    "assignee_name": assignee_name,
                    "assignee_email": assignee_email,
                    "is_different_updater": assignee_name and last_updater_name and assignee_name != last_updater_name
                })
            except Exception as e:
                print(f"‚ö†Ô∏è L·ªói khi x·ª≠ l√Ω issue {issue.get('key', 'Kh√¥ng x√°c ƒë·ªãnh')}: {str(e)}")
                # V·∫´n th√™m v√†o danh s√°ch k·∫øt qu·∫£ nh∆∞ng v·ªõi c√°c gi√° tr·ªã m·∫∑c ƒë·ªãnh
                try:
                    # Kh·ªüi t·∫°o c√°c bi·∫øn local c·∫ßn thi·∫øt v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh
                    key = issue.get("key", "")
                    summary = issue.get("fields", {}).get("summary", "")
                    status = issue.get("fields", {}).get("status", {}).get("name", "") if "fields" in issue else ""
                    updated = issue.get("fields", {}).get("updated", "") if "fields" in issue else ""
                    issue_type = issue.get("fields", {}).get("issuetype", {}).get("name", "") if "fields" in issue else ""
                    priority = issue.get("fields", {}).get("priority", {}).get("name", "") if "fields" in issue else ""
                    project = issue.get("fields", {}).get("project", {}).get("key", "").upper() if "fields" in issue else ""
                    project_name = issue.get("fields", {}).get("project", {}).get("name", "") if "fields" in issue else ""
                    
                    # L·∫•y th√¥ng tin ng∆∞·ªùi ƒë∆∞·ª£c g√°n task (assignee)
                    assignee = issue.get("fields", {}).get("assignee", {}) if "fields" in issue else {}
                    assignee_name = assignee.get("displayName", "") if assignee else "Unassigned"
                    assignee_email = assignee.get("emailAddress", "") if assignee else ""
                    
                    # Kh·ªüi t·∫°o c√°c gi√° tr·ªã t√≠nh to√°n
                    original_estimate_hours = 0
                    time_saved_hours = -1  # Kh√¥ng c√≥ logwork
                    time_saved_percent = 0
                    is_completed = False
                    last_updater_name = ""
                    
                    # Chuy·ªÉn ƒë·ªïi th·ªùi gian c·∫≠p nh·∫≠t n·∫øu c√≥
                    updated_date = ""
                    if updated:
                        try:
                            updated_dt = datetime.fromisoformat(updated.replace('Z', '+00:00'))
                            updated_date = updated_dt.strftime('%d/%m/%Y %H:%M')
                        except Exception:
                            pass
                    
                    # Th√™m v√†o v·ªõi th√¥ng tin c∆° b·∫£n v√† c√°c gi√° tr·ªã t√≠nh to√°n m·∫∑c ƒë·ªãnh
                    result.append({
                        "key": key,
                        "summary": summary,
                        "status": status,
                        "updated": updated_date,
                        "type": issue_type,
                        "priority": priority,
                        "project": project,
                        "project_name": project_name,
                        "components": [],
                        "component_str": "Kh√¥ng c√≥ component",
                        "link": f"{jira_url}/browse/{key}",
                        "worklogs": [],
                        "total_hours": 0,
                        "has_worklog": False,
                        "parent_key": "",
                        "parent_summary": "",
                        "is_subtask": issue_type == "Sub-task",
                        "original_estimate_hours": original_estimate_hours,
                        "time_saved_hours": time_saved_hours,
                        "time_saved_percent": time_saved_percent,
                        "is_completed": is_completed,
                        "update_reasons": [],
                        "last_updater": {},
                        "last_update_time": "",
                        "main_update_reason": "L·ªói x·ª≠ l√Ω",
                        "update_category": "error",
                        "assignee_name": assignee_name,
                        "assignee_email": assignee_email,
                        "is_different_updater": assignee_name and last_updater_name and assignee_name != last_updater_name,
                        "actual_project": get_actual_project(project, [])
                    })
                    print(f"   ‚ÑπÔ∏è Issue {key} ƒë√£ ƒë∆∞·ª£c th√™m v·ªõi th√¥ng tin c∆° b·∫£n m·∫∑c d√π b·ªã l·ªói")
                except Exception as inner_e:
                    print(f"   ‚ùå Kh√¥ng th·ªÉ th√™m issue {issue.get('key', '')} do l·ªói nghi√™m tr·ªçng: {str(inner_e)}")
                continue
        
        return result
        
    except Exception as e:
        print(f"‚ùå L·ªói khi l·∫•y tasks c·ªßa nh√¢n vi√™n {employee_identifier}: {str(e)}")
        return []

def load_jira_config():
    """T·∫£i th√¥ng tin c·∫•u h√¨nh Jira t·ª´ file .env"""
    try:
        load_dotenv()
        
        jira_url = os.getenv("JIRA_URL")
        username = os.getenv("JIRA_USERNAME")
        password = os.getenv("JIRA_PASSWORD")
        
        if not all([jira_url, username, password]):
            print("‚ùå Thi·∫øu th√¥ng tin c·∫•u h√¨nh Jira. Vui l√≤ng ki·ªÉm tra file .env")
            print("File .env c·∫ßn c√≥ c√°c bi·∫øn: JIRA_URL, JIRA_USERNAME, JIRA_PASSWORD")
            return None, None, None
            
        return jira_url, username, password
        
    except Exception as e:
        print(f"‚ùå L·ªói khi ƒë·ªçc c·∫•u h√¨nh Jira: {str(e)}")
        return None, None, None

def format_date(date_str):
    """Chuy·ªÉn ƒë·ªïi ƒë·ªãnh d·∫°ng ng√†y t·ª´ d/m/Y sang Y-m-d"""
    try:
        date_obj = datetime.strptime(date_str, "%d/%m/%Y")
        return date_obj.strftime("%Y-%m-%d")
    except Exception:
        print(f"‚ùå L·ªói ƒë·ªãnh d·∫°ng ng√†y: {date_str}. Vui l√≤ng s·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng DD/MM/YYYY")
        return None

def format_time_duration(seconds):
    """ƒê·ªãnh d·∫°ng th·ªùi gian ch·ªù theo gi√¢y th√†nh chu·ªói d·ªÖ ƒë·ªçc"""
    if seconds < 60:
        return f"{seconds} gi√¢y"
    elif seconds < 3600:
        minutes = seconds // 60
        secs = seconds % 60
        if secs == 0:
            return f"{minutes} ph√∫t"
        else:
            return f"{minutes} ph√∫t {secs} gi√¢y"
    else:
        hours = seconds // 3600
        minutes = (seconds % 3600) // 60
        secs = seconds % 60
        if minutes == 0 and secs == 0:
            return f"{hours} gi·ªù"
        elif secs == 0:
            return f"{hours} gi·ªù {minutes} ph√∫t"
        else:
            return f"{hours} gi·ªù {minutes} ph√∫t {secs} gi√¢y"
        


def main():
    print("=== L·∫§Y DANH S√ÅCH TASK V√Ä LOG WORK C·ª¶A NH√ÇN VI√äN LC T·ª™ JIRA ===")
    
    # T√πy ch·ªçn hi·ªÉn th·ªã JQL
    show_jql_input = input("B·∫°n c√≥ mu·ªën hi·ªÉn th·ªã JQL query kh√¥ng? (y/n, m·∫∑c ƒë·ªãnh: n): ") or "n"
    show_jql = show_jql_input.lower() == "y"
    
    # T·∫£i th√¥ng tin c·∫•u h√¨nh Jira
    jira_url, username, password = load_jira_config()
    if not all([jira_url, username, password]):
        return
    
    # ƒê·ªçc file Excel ch·ª©a danh s√°ch nh√¢n vi√™n
    excel_file = input("Nh·∫≠p ƒë∆∞·ªùng d·∫´n ƒë·∫øn file Excel ch·ª©a danh s√°ch nh√¢n vi√™n LC (m·∫∑c ƒë·ªãnh: resource/projects_employees.xlsx): ") or "resource/projects_employees.xlsx"
    
    # Ki·ªÉm tra file t·ªìn t·∫°i
    if not os.path.exists(excel_file):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file: {excel_file}")
        return
    
    # Ch·ªçn sheet t·ª´ file Excel
    try:
        excel_info = pd.ExcelFile(excel_file)
        sheet_names = excel_info.sheet_names
        print(f"File Excel c√≥ {len(sheet_names)} sheet: {', '.join(sheet_names)}")
        
        # N·∫øu c√≥ nhi·ªÅu sheet, cho ph√©p ng∆∞·ªùi d√πng ch·ªçn
        if len(sheet_names) > 1:
            sheet_input = input(f"Nh·∫≠p t√™n sheet c·∫ßn ƒë·ªçc (Enter ƒë·ªÉ ƒë·ªçc sheet ƒë·∫ßu ti√™n '{sheet_names[0]}'): ") or sheet_names[0]
            if sheet_input not in sheet_names:
                print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y sheet '{sheet_input}', s·ª≠ d·ª•ng sheet ƒë·∫ßu ti√™n '{sheet_names[0]}'")
                sheet_name = sheet_names[0]
            else:
                sheet_name = sheet_input
        else:
            sheet_name = sheet_names[0]
            print(f"S·ª≠ d·ª•ng sheet: {sheet_name}")
        
        # ƒê·ªçc d·ªØ li·ªáu t·ª´ sheet
        df = pd.read_excel(excel_file, sheet_name=sheet_name)
        print(f"‚úÖ ƒê√£ ƒë·ªçc th√†nh c√¥ng file Excel v·ªõi {len(df)} b·∫£n ghi")
        
        # Ki·ªÉm tra v√† chuy·ªÉn ƒë·ªïi t√™n c·ªôt n·∫øu c·∫ßn
        column_mapping = {}
        if 'EMAIL' not in df.columns:
            # T√¨m c·ªôt c√≥ th·ªÉ ch·ª©a email
            email_cols = [col for col in df.columns if 'EMAIL' in col.upper() or 'MAIL' in col.upper()]
            if email_cols:
                email_col = email_cols[0]
                column_mapping[email_col] = 'EMAIL'
                print(f"ƒê√£ t√¨m th·∫•y c·ªôt email: {email_col}")
            else:
                print("‚ùå Kh√¥ng t√¨m th·∫•y c·ªôt ch·ª©a ƒë·ªãa ch·ªâ email trong file Excel")
                return
        
        # T√¨m c·ªôt h·ªç t√™n
        if 'NAME' not in df.columns:
            name_cols = [col for col in df.columns if any(keyword in col.upper() for keyword in ['NAME', 'H·ªå T√äN', 'H·ªåT√äN', 'FULLNAME'])]
            if name_cols:
                name_col = name_cols[0]
                column_mapping[name_col] = 'NAME'
                print(f"ƒê√£ t√¨m th·∫•y c·ªôt t√™n: {name_col}")
        
        # T√¨m c·ªôt SKILL_GROUP
        if 'SKILL_GROUP' not in df.columns:
            skill_cols = [col for col in df.columns if col.upper() == 'SKILL_GROUP' or 'SKILL' in col.upper()]
            if skill_cols:
                skill_col = skill_cols[0]
                column_mapping[skill_col] = 'SKILL_GROUP'
                print(f"ƒê√£ t√¨m th·∫•y c·ªôt k·ªπ nƒÉng: {skill_col}")
        
        # T√¨m c·ªôt PROJECTNAME
        if 'PROJECTNAME' not in df.columns:
            project_cols = [col for col in df.columns if 'PROJECT' in col.upper()]
            if project_cols:
                project_col = project_cols[0]
                column_mapping[project_col] = 'PROJECTNAME'
                print(f"ƒê√£ t√¨m th·∫•y c·ªôt d·ª± √°n: {project_col}")
        
        # Rename c√°c c·ªôt
        if column_mapping:
            df = df.rename(columns=column_mapping)
        
        # Ki·ªÉm tra c·ªôt EMAIL
        if 'EMAIL' not in df.columns:
            print("‚ùå Thi·∫øu c·ªôt EMAIL trong file Excel")
            return
    
    except Exception as e:
        print(f"‚ùå L·ªói khi ƒë·ªçc file Excel: {str(e)}")
        return
    
    # Nh·∫≠p kho·∫£ng th·ªùi gian
    today = datetime.now().strftime("%d/%m/%Y")
    tomorrow = (datetime.now() + timedelta(days=1)).strftime("%d/%m/%Y")
    start_date_str = input(f"Nh·∫≠p ng√†y b·∫Øt ƒë·∫ßu (ƒë·ªãnh d·∫°ng DD/MM/YYYY, m·∫∑c ƒë·ªãnh: 11/06/2025): ") or "11/06/2025"
    end_date_str = input(f"Nh·∫≠p ng√†y k·∫øt th√∫c (ƒë·ªãnh d·∫°ng DD/MM/YYYY, m·∫∑c ƒë·ªãnh: ng√†y mai - {tomorrow}): ") or tomorrow
    
    # L·ªçc theo tr·∫°ng th√°i task
    excluded_statuses = ["ANALYZING", "APPROVED BY TMO", "PRODUCT BACKLOG", "CANCELLED", "10. Cancelled", "OPEN", "Pending", "1. Confirm", "IMPLEMENTING"]
    status_filter_input = input(f"Nh·∫≠p c√°c tr·∫°ng th√°i c·∫ßn l·ªçc (ph√¢n c√°ch b·ªüi d·∫•u ph·∫©y, ƒë·ªÉ tr·ªëng ƒë·ªÉ l·∫•y t·∫•t c·∫£ tr·ª´: {', '.join(excluded_statuses)}): ")

    if status_filter_input:
        status_filter = [status.strip() for status in status_filter_input.split(",")]
        exclude_default = False
        jira_status_exclude = None  # Kh√¥ng lo·∫°i b·ªè status n·∫øu ng∆∞·ªùi d√πng ch·ªâ ƒë·ªãnh r√µ status c·∫ßn l·∫•y
    else:
        status_filter = []
        exclude_default = True
        jira_status_exclude = excluded_statuses
        print(f"‚ö†Ô∏è M·∫∑c ƒë·ªãnh s·∫Ω lo·∫°i b·ªè c√°c task c√≥ tr·∫°ng th√°i: {', '.join(excluded_statuses)}")
    
    # L·ªçc theo d·ª± √°n trong Jira API (l·ªçc t·ª´ ngu·ªìn)
    jira_project_filter_input = input("Nh·∫≠p c√°c m√£ d·ª± √°n tr√™n Jira c·∫ßn l·ªçc (ph√¢n c√°ch b·ªüi d·∫•u ph·∫©y, ƒë·ªÉ tr·ªëng ƒë·ªÉ s·ª≠ d·ª•ng m·∫∑c ƒë·ªãnh FC,FSS,PKT,WAK,PPFP): ") or "FC,FSS,PKT,WAK,PPFP"
    
    # T√πy ch·ªçn ch·ªâ l·∫•y c·∫≠p nh·∫≠t c·ªßa ng∆∞·ªùi ƒë∆∞·ª£c g√°n task
    assignee_updates_only = input("Ch·ªâ l·∫•y c·∫≠p nh·∫≠t quan tr·ªçng c·ªßa ng∆∞·ªùi ƒë∆∞·ª£c g√°n task? (y/n, m·∫∑c ƒë·ªãnh: y): ").lower() != 'n'
    if assignee_updates_only:
        print("‚ö†Ô∏è Ch·ªâ hi·ªÉn th·ªã c·∫≠p nh·∫≠t do ng∆∞·ªùi ƒë∆∞·ª£c g√°n task th·ª±c hi·ªán")
    
    # T√πy ch·ªçn ch·ªâ l·∫•y c·∫≠p nh·∫≠t thay ƒë·ªïi tr·∫°ng th√°i
    status_updates_only = input("Ch·ªâ l·∫•y c·∫≠p nh·∫≠t quan tr·ªçng li√™n quan ƒë·∫øn thay ƒë·ªïi tr·∫°ng th√°i? (y/n, m·∫∑c ƒë·ªãnh: n): ").lower() == 'y'
    if status_updates_only:
        print("‚ö†Ô∏è Ch·ªâ hi·ªÉn th·ªã c·∫≠p nh·∫≠t thay ƒë·ªïi tr·∫°ng th√°i do ch√≠nh ng∆∞·ªùi ƒë∆∞·ª£c g√°n task th·ª±c hi·ªán")
        print("‚ö†Ô∏è B·ªè qua c·∫≠p nh·∫≠t status do PM/Lead th·ª±c hi·ªán v√† t·∫•t c·∫£ lo·∫°i c·∫≠p nh·∫≠t kh√°c")
    else:
        print("‚ö†Ô∏è Hi·ªÉn th·ªã t·∫•t c·∫£ c√°c lo·∫°i c·∫≠p nh·∫≠t quan tr·ªçng (status, assignee, comment, time, v.v.)")
    
    if jira_project_filter_input:
        jira_project_filter = [project.strip().upper() for project in jira_project_filter_input.split(",") if project.strip()]
        if not jira_project_filter:
            print("‚ö†Ô∏è Kh√¥ng c√≥ d·ª± √°n n√†o ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh ƒë·ªÉ l·ªçc, s·∫Ω s·ª≠ d·ª•ng m·∫∑c ƒë·ªãnh: FC,FSS,PKT,WAK,PPFP")
            jira_project_filter = ["FC", "FSS", "PKT", "WAK", "PPFP"]
        print(f"üîç L·ªçc theo c√°c m√£ d·ª± √°n Jira API: {', '.join(jira_project_filter)}")
    
    # Th√™m c√°c d·ª± √°n c·∫ßn lo·∫°i b·ªè
    jira_project_exclude_input = input("Nh·∫≠p c√°c m√£ d·ª± √°n tr√™n Jira c·∫ßn lo·∫°i b·ªè (ph√¢n c√°ch b·ªüi d·∫•u ph·∫©y, ƒë·ªÉ tr·ªëng ƒë·ªÉ kh√¥ng lo·∫°i b·ªè. M·∫∑c ƒë·ªãnh: TADS): ") or "TADS"
    jira_project_exclude = [project.strip().upper() for project in jira_project_exclude_input.split(",") if project.strip()]
    if jira_project_exclude:
        print(f"üö´ Lo·∫°i b·ªè ho√†n to√†n c√°c m√£ d·ª± √°n Jira API: {', '.join(jira_project_exclude)}")
        print(f"‚ö†Ô∏è L∆ØU √ù: T·∫•t c·∫£ task li√™n quan ƒë·∫øn {', '.join(jira_project_exclude)} s·∫Ω b·ªã lo·∫°i b·ªè kh·ªèi k·∫øt qu·∫£ v√† th·ªëng k√™!")
    
    # Lo·∫°i b·ªè ph·∫ßn l·ªçc d·ª± √°n th·ª© hai
    project_filter = []
    
    # L·ªçc theo lo·∫°i issue
    type_filter_input = input("Nh·∫≠p c√°c lo·∫°i issue c·∫ßn l·ªçc (ph√¢n c√°ch b·ªüi d·∫•u ph·∫©y, ƒë·ªÉ tr·ªëng ƒë·ªÉ l·∫•y t·∫•t c·∫£): ")
    type_filter = [type.strip() for type in type_filter_input.split(",")] if type_filter_input else []
    
    # T√πy ch·ªçn tr∆∞·ªùng th·ªùi gian ƒë·ªÉ l·ªçc
    time_field_options = ["updatedDate", "created", "resolutiondate"]
    time_field_input = input(f"Ch·ªçn tr∆∞·ªùng th·ªùi gian ƒë·ªÉ l·ªçc ({', '.join(time_field_options)}, m·∫∑c ƒë·ªãnh: updatedDate): ") or "updatedDate"
    time_field = time_field_input.strip()
    if time_field not in time_field_options:
        print(f"‚ö†Ô∏è Tr∆∞·ªùng th·ªùi gian kh√¥ng h·ª£p l·ªá, s·ª≠ d·ª•ng m·∫∑c ƒë·ªãnh: updatedDate")
        time_field = "updatedDate"
    
    # T√πy ch·ªçn t√¨m ki·∫øm task do nh√¢n vi√™n b√°o c√°o
    include_reported_input = input("B·∫°n c√≥ mu·ªën t√¨m c·∫£ c√°c task do nh√¢n vi√™n b√°o c√°o kh√¥ng? (y/n, m·∫∑c ƒë·ªãnh: n): ") or "n"
    include_reported = include_reported_input.lower() == "y"
    
    # T√πy ch·ªçn b·ªè qua c·∫≠p nh·∫≠t ch·ªâ li√™n quan ƒë·∫øn Fix Version ho·∫∑c Sprint
    ignore_fix_version_sprint_input = input("B·∫°n c√≥ mu·ªën b·ªè qua c√°c c·∫≠p nh·∫≠t ch·ªâ li√™n quan ƒë·∫øn Fix Version/Sprint/RemoteIssueLink/Components? (y/n, m·∫∑c ƒë·ªãnh: y): ") or "y"
    ignore_fix_version_sprint = ignore_fix_version_sprint_input.lower() == "y"
    if ignore_fix_version_sprint:
        print("‚ö†Ô∏è S·∫Ω b·ªè qua c√°c c·∫≠p nh·∫≠t ch·ªâ li√™n quan ƒë·∫øn Fix Version/Sprint/RemoteIssueLink/Components v√† t√¨m c·∫≠p nh·∫≠t c√≥ √Ω nghƒ©a")
    else:
        print("‚ö†Ô∏è S·∫Ω t√≠nh t·∫•t c·∫£ c√°c lo·∫°i c·∫≠p nh·∫≠t (k·ªÉ c·∫£ Fix Version/Sprint/RemoteIssueLink/Components)")
    
    # T√πy ch·ªçn l·ªçc b·ªè task cha khi task con kh√¥ng c√≥ update
    filter_parent_without_updated_children_input = input("B·∫°n c√≥ mu·ªën lo·∫°i b·ªè task cha khi t·∫•t c·∫£ task con kh√¥ng c√≥ update? (y/n, m·∫∑c ƒë·ªãnh: y): ") or "y"
    filter_parent_without_updated_children = filter_parent_without_updated_children_input.lower() == "y"
    if filter_parent_without_updated_children:
        print("‚úÖ S·∫Ω lo·∫°i b·ªè task cha khi t·∫•t c·∫£ task con kh√¥ng c√≥ update")
    else:
        print("‚ö†Ô∏è S·∫Ω gi·ªØ l·∫°i t·∫•t c·∫£ task cha b·∫•t k·ªÉ task con c√≥ update hay kh√¥ng")
    
    # T√πy ch·ªçn th·ªùi gian ch·ªù gi·ªØa c√°c request
    request_delay_input = input("Nh·∫≠p th·ªùi gian tr·ªÖ gi·ªØa c√°c request (gi√¢y, m·∫∑c ƒë·ªãnh: 0.1): ") or "0.1"
    try:
        request_delay = float(request_delay_input)
    except ValueError:
        print("‚ö†Ô∏è Gi√° tr·ªã kh√¥ng h·ª£p l·ªá, s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh: 0.1 gi√¢y")
        request_delay = 0.1
    
    # X√°c nh·∫≠n c√°c ƒëi·ªÅu ki·ªán l·ªçc
    if status_filter:
        print(f"\nüîç Ch·ªâ l·∫•y c√°c task c√≥ tr·∫°ng th√°i: {', '.join(status_filter)}")
    elif exclude_default:
        print(f"\nüîç L·∫•y t·∫•t c·∫£ c√°c tr·∫°ng th√°i task ngo·∫°i tr·ª´: {', '.join(excluded_statuses)}")
    else:
        print("\nüîç L·∫•y t·∫•t c·∫£ c√°c tr·∫°ng th√°i task")
        
    if project_filter:
        print(f"üîç Ch·ªâ l·∫•y c√°c task thu·ªôc d·ª± √°n: {', '.join(project_filter)}")
    else:
        print("üîç L·∫•y task c·ªßa t·∫•t c·∫£ c√°c d·ª± √°n")
        
    if type_filter:
        print(f"üîç Ch·ªâ l·∫•y c√°c task c√≥ lo·∫°i: {', '.join(type_filter)}")
    else:
        print("üîç L·∫•y t·∫•t c·∫£ c√°c lo·∫°i task")
    
    # Chuy·ªÉn ƒë·ªïi ƒë·ªãnh d·∫°ng ng√†y
    start_date = format_date(start_date_str)
    end_date = format_date(end_date_str)
    
    if not all([start_date, end_date]):
        return
    
    print(f"\nüîç T√¨m ki·∫øm task t·ª´ {start_date_str} ƒë·∫øn {end_date_str}")
    print(f"üîç S·ª≠ d·ª•ng tr∆∞·ªùng th·ªùi gian: {time_field}")
    if include_reported:
        print("üîç T√¨m ki·∫øm c·∫£ task do nh√¢n vi√™n b√°o c√°o/t·∫°o")
    else:
        print("üîç Ch·ªâ t√¨m ki·∫øm task ƒë∆∞·ª£c g√°n cho nh√¢n vi√™n")
    print(f"‚è±Ô∏è Th·ªùi gian ch·ªù gi·ªØa c√°c request API: {request_delay} gi√¢y")
    
    try:
        # ƒê·ªçc file Excel
        df = pd.read_excel(excel_file, sheet_name=sheet_name)
        print(f"‚úÖ ƒê√£ ƒë·ªçc th√†nh c√¥ng file Excel v·ªõi {len(df)} b·∫£n ghi")
        
        # Ki·ªÉm tra c·ªôt EMAIL
        if 'EMAIL' not in df.columns:
            print("‚ùå Thi·∫øu c·ªôt EMAIL trong file Excel")
            return
            
        # L∆∞u l·∫°i s·ªë l∆∞·ª£ng nh√¢n vi√™n ban ƒë·∫ßu
        original_df = df.copy()
        original_count = len(df)
        
        # Ki·ªÉm tra xem c√≥ c·ªôt PROJECTNAME kh√¥ng v√† cho ph√©p l·ªçc
        if 'PROJECTNAME' in df.columns:
            # Hi·ªÉn th·ªã th·ªëng k√™ d·ª± √°n
            project_counts = df['PROJECTNAME'].value_counts()
            print(f"\nüìä File Excel c√≥ {len(project_counts)} d·ª± √°n kh√°c nhau")
            print("Top 10 d·ª± √°n c√≥ nhi·ªÅu nh√¢n vi√™n nh·∫•t:")
            for idx, (project, count) in enumerate(project_counts.head(10).items(), 1):
                print(f"  {idx}. {project}: {count} nh√¢n vi√™n")
                
            # Ki·ªÉm tra c√°c d·ª± √°n c√≥ ch·ª©a FH
            fh_projects = [proj for proj in project_counts.index if isinstance(proj, str) and "FH" in proj.upper()]
            if fh_projects:
                print(f"\nüîç T√¨m th·∫•y {len(fh_projects)} d·ª± √°n li√™n quan ƒë·∫øn FH:")
                for idx, proj in enumerate(fh_projects, 1):
                    print(f"  {idx}. {proj}: {project_counts[proj]} nh√¢n vi√™n")
            
            # T√πy ch·ªçn l·ªçc theo d·ª± √°n
            filter_project = input(f"B·∫°n c√≥ mu·ªën l·ªçc theo d·ª± √°n c·ª• th·ªÉ kh√¥ng? (y/n, m·∫∑c ƒë·ªãnh: n): ") or "n"
            
            if filter_project.lower() == "y":
                project_filter = input("Nh·∫≠p t√™n d·ª± √°n c·∫ßn l·ªçc (ph√¢n c√°ch b·ªüi d·∫•u ph·∫©y n·∫øu c√≥ nhi·ªÅu d·ª± √°n): ")
                specified_projects = [p.strip() for p in project_filter.split(',') if p.strip()]
                
                if specified_projects:
                    # Ki·ªÉm tra xem c√°c d·ª± √°n ch·ªâ ƒë·ªãnh c√≥ t·ªìn t·∫°i kh√¥ng
                    existing_projects = []
                    not_found_projects = []
                    
                    for sp in specified_projects:
                        # T√¨m ki·∫øm ch√≠nh x√°c (case sensitive)
                        exact_matches = [p for p in project_counts.index if isinstance(p, str) and p.strip() == sp.strip()]
                        
                        if exact_matches:
                            existing_projects.extend(exact_matches)
                        else:
                            # N·∫øu kh√¥ng t√¨m th·∫•y, ki·ªÉm tra kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng
                            case_insensitive_matches = [p for p in project_counts.index if isinstance(p, str) and p.strip().upper() == sp.strip().upper()]
                            if case_insensitive_matches:
                                existing_projects.extend(case_insensitive_matches)
                            else:
                                not_found_projects.append(sp)
                    
                    if not_found_projects:
                        print(f"\n‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y {len(not_found_projects)} d·ª± √°n:")
                        for i, p in enumerate(not_found_projects, 1):
                            print(f"  {i}. {p}")
                        
                        # H·ªèi ng∆∞·ªùi d√πng c√≥ mu·ªën t√¨m m·ªôt ph·∫ßn t√™n kh√¥ng
                        partial_search = input("B·∫°n c√≥ mu·ªën t√¨m ki·∫øm d·ª± √°n ch·ª©a c√°c t√™n tr√™n kh√¥ng? (y/n, m·∫∑c ƒë·ªãnh: n): ") or "n"
                        if partial_search.lower() == "y":
                            for sp in not_found_projects:
                                partial_matches = [p for p in project_counts.index if isinstance(p, str) and sp.strip().upper() in p.strip().upper()]
                                if partial_matches:
                                    print(f"\nüîç T√¨m th·∫•y {len(partial_matches)} d·ª± √°n ch·ª©a '{sp}':")
                                    for i, match in enumerate(partial_matches, 1):
                                        print(f"  {i}. {match}: {project_counts[match]} nh√¢n vi√™n")
                                    
                                    add_partial = input(f"Th√™m c√°c d·ª± √°n n√†y v√†o danh s√°ch l·ªçc? (y/n, m·∫∑c ƒë·ªãnh: y): ") or "y"
                                    if add_partial.lower() == "y":
                                        existing_projects.extend(partial_matches)
                    
                    if existing_projects:
                        print(f"\n‚úÖ T√¨m th·∫•y {len(existing_projects)} d·ª± √°n ph√π h·ª£p:")
                        for idx, proj in enumerate(existing_projects, 1):
                            print(f"  {idx}. {proj}: {project_counts[proj]} nh√¢n vi√™n")
                        
                        # L·ªçc nh√¢n vi√™n theo d·ª± √°n
                        df_before_filter = df.copy()
                        df = df[df['PROJECTNAME'].isin(existing_projects)]
                        filtered_count = len(df_before_filter) - len(df)
                        
                        print(f"\n‚úÖ ƒê√£ l·ªçc ƒë∆∞·ª£c {len(df)} nh√¢n vi√™n thu·ªôc {len(existing_projects)} d·ª± √°n ch·ªâ ƒë·ªãnh")
                        print(f"   ƒê√£ lo·∫°i b·ªè {filtered_count} nh√¢n vi√™n kh√¥ng thu·ªôc d·ª± √°n ch·ªâ ƒë·ªãnh")
                    else:
                        print(f"\n‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y d·ª± √°n n√†o ph√π h·ª£p v·ªõi y√™u c·∫ßu")
        
        # Hi·ªÉn th·ªã th√¥ng tin v·ªÅ c√°c email tr√πng l·∫∑p
        duplicated_emails = df[df.duplicated(subset=['EMAIL'], keep='first')]['EMAIL'].tolist()
        if duplicated_emails:
            print(f"\n‚ö†Ô∏è Ph√°t hi·ªán {len(duplicated_emails)} email tr√πng l·∫∑p:")
            for idx, email in enumerate(duplicated_emails, 1):
                duplicates = df[df['EMAIL'] == email]
                names = duplicates['NAME'].tolist() if 'NAME' in df.columns else ["Kh√¥ng c√≥ t√™n"] * len(duplicates)
                print(f"  {idx}. {email} - {len(duplicates)} l·∫ßn xu·∫•t hi·ªán - T√™n: {', '.join(names)}")
            
        # Lo·∫°i b·ªè c√°c email tr√πng l·∫∑p
        df_before_dedup = df.copy()
        df = df.drop_duplicates(subset=['EMAIL'])
        removed_by_duplication = len(df_before_dedup) - len(df)
        print(f"‚ÑπÔ∏è ƒê√£ lo·∫°i b·ªè {removed_by_duplication} b·∫£n ghi tr√πng l·∫∑p email, c√≤n l·∫°i {len(df)} b·∫£n ghi")
        
        # Hi·ªÉn th·ªã danh s√°ch b·ªã lo·∫°i do tr√πng l·∫∑p
        if removed_by_duplication > 0:
            print("\nüìã DANH S√ÅCH NH√ÇN VI√äN B·ªä LO·∫†I B·ªé DO TR√ôNG L·∫∂P EMAIL:")
            duplicate_df = df_before_dedup[df_before_dedup.duplicated(subset=['EMAIL'], keep='first')]
            for idx, row in duplicate_df.iterrows():
                name = row.get('NAME', 'Kh√¥ng c√≥ t√™n')
                email = row.get('EMAIL', '')
                skill_group = row.get('SKILL_GROUP', 'Kh√¥ng x√°c ƒë·ªãnh')
                project_name = row.get('PROJECTNAME', 'Kh√¥ng x√°c ƒë·ªãnh')
                print(f"  {idx+1}. {name} ({email}) - SKILL: {skill_group}, PROJECT: {project_name}")
        
        # Lo·∫°i tr·ª´ m·ªôt s·ªë SKILL_GROUP kh√¥ng mong mu·ªën
        if 'SKILL_GROUP' in df.columns:
            # Danh s√°ch m·∫∑c ƒë·ªãnh c√°c SKILL_GROUP kh√¥ng mong mu·ªën
            default_excluded_skills = ['AMS', 'IT', 'EA', 'Databrick', 'AI', 'ISMS']
            
            # Cho ph√©p ng∆∞·ªùi d√πng t√πy ch·ªânh danh s√°ch
            custom_skills_input = input(f"Nh·∫≠p c√°c SKILL_GROUP c·∫ßn lo·∫°i b·ªè (ph√¢n c√°ch b·ªüi d·∫•u ph·∫©y, Enter ƒë·ªÉ s·ª≠ d·ª•ng m·∫∑c ƒë·ªãnh: {', '.join(default_excluded_skills)}): ")
            
            # S·ª≠ d·ª•ng danh s√°ch t√πy ch·ªânh ho·∫∑c m·∫∑c ƒë·ªãnh
            if custom_skills_input.strip():
                excluded_skills = [skill.strip() for skill in custom_skills_input.split(',')]
                print(f"S·ª≠ d·ª•ng danh s√°ch SKILL_GROUP do ng∆∞·ªùi d√πng cung c·∫•p: {', '.join(excluded_skills)}")
            else:
                excluded_skills = default_excluded_skills
                print(f"S·ª≠ d·ª•ng danh s√°ch SKILL_GROUP m·∫∑c ƒë·ªãnh: {', '.join(excluded_skills)}")
            
            before_skill_filter = len(df)
            
            # L∆∞u danh s√°ch nh√¢n vi√™n b·ªã lo·∫°i b·ªè do SKILL_GROUP
            excluded_employees_by_skill = df[df['SKILL_GROUP'].isin(excluded_skills)].copy()
            
            # L·ªçc b·ªè nh√¢n vi√™n c√≥ SKILL_GROUP kh√¥ng mong mu·ªën
            df = df[~df['SKILL_GROUP'].isin(excluded_skills)]
            after_skill_filter = len(df)
            removed_by_skill = before_skill_filter - after_skill_filter
            
            print(f"\n‚ÑπÔ∏è ƒê√£ lo·∫°i b·ªè {removed_by_skill} nh√¢n vi√™n thu·ªôc c√°c SKILL_GROUP kh√¥ng mong mu·ªën: {', '.join(excluded_skills)}")
            
            # Hi·ªÉn th·ªã danh s√°ch b·ªã lo·∫°i do SKILL_GROUP
            if removed_by_skill > 0:
                print("\nüìã DANH S√ÅCH NH√ÇN VI√äN B·ªä LO·∫†I B·ªé DO THU·ªòC SKILL_GROUP KH√îNG MONG MU·ªêN:")
                skill_counts = excluded_employees_by_skill['SKILL_GROUP'].value_counts()
                print(f"Ph√¢n b·ªë theo SKILL_GROUP:")
                for skill, count in skill_counts.items():
                    print(f"  - {skill}: {count} nh√¢n vi√™n")
                
                print("\nDanh s√°ch chi ti·∫øt:")
                for idx, row in excluded_employees_by_skill.iterrows():
                    name = row.get('NAME', 'Kh√¥ng c√≥ t√™n')
                    email = row.get('EMAIL', '')
                    skill_group = row.get('SKILL_GROUP', 'Kh√¥ng x√°c ƒë·ªãnh')
                    project_name = row.get('PROJECTNAME', 'Kh√¥ng x√°c ƒë·ªãnh')
                    print(f"  {idx+1}. {name} ({email}) - SKILL: {skill_group}, PROJECT: {project_name}")
            
            print(f"‚ÑπÔ∏è C√≤n l·∫°i {len(df)} nh√¢n vi√™n sau khi l·ªçc theo SKILL_GROUP")
        
        # Lo·∫°i tr·ª´ c√°c email c·ª• th·ªÉ n·∫øu ng∆∞·ªùi d√πng y√™u c·∫ßu
        # Danh s√°ch email c·∫ßn lo·∫°i b·ªè m·∫∑c ƒë·ªãnh
        default_exclude_emails = [
            "ToanLBK@fpt.com",
            "LongNV61@fpt.com",
            "TrungTM7@fpt.com",
            "VietHQ3@fpt.com",
            "PhuocND6@fpt.com",
            "ThanhNX7@fpt.com",
            "MinhDH11@fpt.com",
            "SinhNV@fpt.com",
            "TuyetTT16@fpt.com"
        ]
        
        exclude_emails_input = input(f"Nh·∫≠p c√°c email c·∫ßn lo·∫°i b·ªè kh·ªèi vi·ªác ki·ªÉm tra task (ph√¢n c√°ch b·ªüi d·∫•u ph·∫©y, Enter ƒë·ªÉ s·ª≠ d·ª•ng danh s√°ch m·∫∑c ƒë·ªãnh): ")
        if exclude_emails_input.strip():
            exclude_emails = [email.strip().lower() for email in exclude_emails_input.split(',') if email.strip()]
        else:
            exclude_emails = [email.lower() for email in default_exclude_emails]
            print(f"S·ª≠ d·ª•ng danh s√°ch email lo·∫°i tr·ª´ m·∫∑c ƒë·ªãnh: {', '.join(default_exclude_emails)}")
            
        # Ki·ªÉm tra xem c√°c email c√≥ trong danh s√°ch kh√¥ng
        emails_in_df = set(df['EMAIL'].str.lower())
        found_emails = [email for email in exclude_emails if email in emails_in_df]
        not_found_emails = [email for email in exclude_emails if email not in emails_in_df]
        
        if found_emails:
            print(f"\n‚ÑπÔ∏è T√¨m th·∫•y {len(found_emails)} email trong danh s√°ch c·∫ßn lo·∫°i b·ªè:")
            for email in found_emails:
                print(f"  - {email}")
            
            # L∆∞u danh s√°ch nh√¢n vi√™n b·ªã lo·∫°i b·ªè
            before_email_filter = len(df)
            excluded_employees_by_email = df[df['EMAIL'].str.lower().isin(found_emails)].copy()
            
            # L·ªçc b·ªè nh·ªØng email kh√¥ng mong mu·ªën
            df = df[~df['EMAIL'].str.lower().isin(found_emails)]
            
            after_email_filter = len(df)
            removed_by_email = before_email_filter - after_email_filter
            print(f"\n‚ÑπÔ∏è ƒê√£ lo·∫°i b·ªè {removed_by_email} nh√¢n vi√™n d·ª±a theo email")
            
            # Hi·ªÉn th·ªã danh s√°ch b·ªã lo·∫°i theo email
            if removed_by_email > 0:
                print("\nüìã DANH S√ÅCH NH√ÇN VI√äN B·ªä LO·∫†I B·ªé THEO EMAIL:")
                for idx, row in excluded_employees_by_email.iterrows():
                    name = row.get('NAME', 'Kh√¥ng c√≥ t√™n')
                    email = row.get('EMAIL', '')
                    skill_group = row.get('SKILL_GROUP', 'Kh√¥ng x√°c ƒë·ªãnh') if 'SKILL_GROUP' in row else 'Kh√¥ng x√°c ƒë·ªãnh'
                    project_name = row.get('PROJECTNAME', 'Kh√¥ng x√°c ƒë·ªãnh') if 'PROJECTNAME' in row else 'Kh√¥ng x√°c ƒë·ªãnh'
                    print(f"  {idx+1}. {name} ({email}) - SKILL: {skill_group}, PROJECT: {project_name}")
        
        if not_found_emails:
            print(f"\n‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y {len(not_found_emails)} email trong danh s√°ch nh√¢n vi√™n:")
            for email in not_found_emails:
                print(f"  - {email}")
        
        print(f"‚ÑπÔ∏è C√≤n l·∫°i {len(df)} nh√¢n vi√™n sau khi l·ªçc theo email")
        
        # Hi·ªÉn th·ªã t·ªïng s·ªë nh√¢n vi√™n b·ªã lo·∫°i b·ªè
        total_removed = original_count - len(df)
        if total_removed > 0:
            print(f"\nüîç T·ªîNG K·∫æT VI·ªÜC L·ªåC NH√ÇN VI√äN:")
            print(f"  - S·ªë nh√¢n vi√™n ban ƒë·∫ßu: {original_count}")
            print(f"  - S·ªë nh√¢n vi√™n b·ªã lo·∫°i do tr√πng l·∫∑p email: {removed_by_duplication}")
            if 'SKILL_GROUP' in df.columns:
                print(f"  - S·ªë nh√¢n vi√™n b·ªã lo·∫°i do SKILL_GROUP kh√¥ng mong mu·ªën: {removed_by_skill}")
            
            # Hi·ªÉn th·ªã s·ªë nh√¢n vi√™n b·ªã lo·∫°i do email n·∫øu c√≥
            if exclude_emails_input.strip():
                print(f"  - S·ªë nh√¢n vi√™n b·ªã lo·∫°i do n·∫±m trong danh s√°ch email lo·∫°i tr·ª´: {removed_by_email}")
                
            print(f"  - T·ªïng s·ªë nh√¢n vi√™n b·ªã lo·∫°i: {total_removed} ({total_removed/original_count*100:.1f}%)")
            print(f"  - S·ªë nh√¢n vi√™n c√≤n l·∫°i: {len(df)}")
            
        # Gi·ªõi h·∫°n ch·ªâ 10 nh√¢n vi√™n ƒë·∫ßu ti√™n
        max_employees = 150
        if len(df) > max_employees:
            df = df.head(max_employees)
            print(f"‚ÑπÔ∏è Ch·ªâ x·ª≠ l√Ω {max_employees} nh√¢n vi√™n ƒë·∫ßu ti√™n t·ª´ danh s√°ch")
        else:
            print(f"‚ÑπÔ∏è X·ª≠ l√Ω t·∫•t c·∫£ {len(df)} nh√¢n vi√™n trong danh s√°ch")
        
        # T·∫°o th∆∞ m·ª•c k·∫øt qu·∫£
        result_dir = "data/tasks"
        os.makedirs(result_dir, exist_ok=True)
        
        # T·∫°o file k·∫øt qu·∫£ t·ªïng h·ª£p
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        if status_filter:
            status_suffix = "_" + "_".join(status_filter).replace(" ", "")
        elif exclude_default:
            status_suffix = "_exclude_" + "_".join([s.replace(" ", "") for s in excluded_statuses])
        else:
            status_suffix = ""
        project_suffix = "_" + "_".join(project_filter).replace(" ", "") if project_filter else ""
        type_suffix = "_" + "_".join(type_filter).replace(" ", "") if type_filter else ""
        summary_file = f"{result_dir}/lc_tasks_worklog{status_suffix}{project_suffix}{type_suffix}_summary_{timestamp}.csv"
        report_file = f"{result_dir}/lc_tasks_worklog{status_suffix}{project_suffix}{type_suffix}_report_{timestamp}.txt"
        log_file = f"{result_dir}/lc_tasks_worklog{status_suffix}{project_suffix}{type_suffix}_log_{timestamp}.txt"
        worklog_file = f"{result_dir}/lc_tasks_worklog{status_suffix}{project_suffix}{type_suffix}_hours_{timestamp}.csv"
        
        # Ghi log th·ªùi gian b·∫Øt ƒë·∫ßu
        with open(log_file, 'w', encoding='utf-8') as f:
            f.write(f"=== LOG TH·ªúI GIAN L·∫§Y TASK V√Ä WORKLOG T·ª™ JIRA ===\n\n")
            f.write(f"Th·ªùi gian b·∫Øt ƒë·∫ßu: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n")
            f.write(f"Kho·∫£ng th·ªùi gian l·∫•y task: {start_date_str} - {end_date_str}\n")
            f.write(f"Tr∆∞·ªùng th·ªùi gian s·ª≠ d·ª•ng: {time_field}\n")
            if include_reported:
                f.write(f"T√¨m ki·∫øm c·∫£ task do nh√¢n vi√™n b√°o c√°o/t·∫°o\n")
            else:
                f.write(f"Ch·ªâ t√¨m ki·∫øm task ƒë∆∞·ª£c g√°n cho nh√¢n vi√™n\n")
            if jira_project_filter:
                f.write(f"L·ªçc theo m√£ d·ª± √°n Jira: {', '.join(jira_project_filter)}\n")
            if jira_project_exclude:
                f.write(f"Lo·∫°i b·ªè m√£ d·ª± √°n Jira: {', '.join(jira_project_exclude)}\n")
            if jira_status_exclude:
                f.write(f"Lo·∫°i b·ªè c√°c tr·∫°ng th√°i: {', '.join(jira_status_exclude)}\n")
            
            # Ghi log danh s√°ch email b·ªã lo·∫°i tr·ª´
            if exclude_emails_input.strip() and found_emails:
                f.write(f"Lo·∫°i b·ªè {len(found_emails)} email: {', '.join(found_emails)}\n")
                
            f.write(f"S·ªë nh√¢n vi√™n ban ƒë·∫ßu: {len(pd.read_excel(excel_file, sheet_name=sheet_name))}\n")
            f.write(f"S·ªë nh√¢n vi√™n sau khi lo·∫°i b·ªè tr√πng l·∫∑p: {len(pd.read_excel(excel_file, sheet_name=sheet_name).drop_duplicates(subset=['EMAIL']))}\n")
            if 'SKILL_GROUP' in df.columns:
                csv_df = pd.read_excel(excel_file, sheet_name=sheet_name)
                csv_df = csv_df.drop_duplicates(subset=['EMAIL'])
                filtered_df = csv_df[~csv_df['SKILL_GROUP'].isin(excluded_skills)]
                f.write(f"S·ªë nh√¢n vi√™n sau khi l·ªçc SKILL_GROUP: {len(filtered_df)}\n")
            
            # Ghi log s·ªë nh√¢n vi√™n sau khi l·ªçc email
            if exclude_emails_input.strip() and found_emails:
                f.write(f"S·ªë nh√¢n vi√™n sau khi l·ªçc email: {len(df)}\n")
                
            f.write(f"S·ªë nh√¢n vi√™n ƒë∆∞·ª£c x·ª≠ l√Ω: {min(len(df), max_employees)}\n")
            f.write(f"Th·ªùi gian ch·ªù gi·ªØa c√°c request API: {request_delay} gi√¢y\n\n")
        
        # T·ªïng s·ªë task c·ªßa t·∫•t c·∫£ nh√¢n vi√™n
        all_tasks = []
        all_worklogs = []
        employee_task_counts = {}
        employee_worklog_hours = {}
        employee_detailed_stats = {}  # Dictionary m·ªõi ƒë·ªÉ l∆∞u th·ªëng k√™ chi ti·∫øt
        project_task_counts = {}
        project_name_task_counts = {}
        skill_group_task_counts = {}
        type_task_counts = {}
        status_task_counts = {}
        
        # S·ªë nh√¢n vi√™n ƒë√£ x·ª≠ l√Ω
        processed_count = 0
        
        # L·∫∑p qua t·ª´ng nh√¢n vi√™n
        for idx, row in df.iterrows():
            name = row.get('NAME', 'Kh√¥ng c√≥ t√™n')
            email = row.get('EMAIL', '')
            skill_group = row.get('SKILL_GROUP', '')
            project_name = row.get('PROJECTNAME', '')
            
            # Th·ªùi gian b·∫Øt ƒë·∫ßu x·ª≠ l√Ω nh√¢n vi√™n n√†y
            employee_start_time = datetime.now()
            
            # Ghi log
            with open(log_file, 'a', encoding='utf-8') as f:
                f.write(f"[{employee_start_time.strftime('%d/%m/%Y %H:%M:%S')}] B·∫Øt ƒë·∫ßu l·∫•y task cho nh√¢n vi√™n: {name} ({email}) - SKILL: {skill_group}, PROJECT: {project_name}\n")
            
            if not email:
                print(f"‚ö†Ô∏è Nh√¢n vi√™n {name} kh√¥ng c√≥ email, b·ªè qua")
                continue
                
            # TƒÉng s·ªë nh√¢n vi√™n ƒë√£ x·ª≠ l√Ω
            processed_count += 1
                
            print(f"\nüë§ ({processed_count}/{len(df)}) ƒêang l·∫•y tasks v√† worklogs c·ªßa {name} ({email}) - SKILL: {skill_group}, PROJECT: {project_name}...")
            
            # L·∫•y danh s√°ch task
            tasks = get_employee_tasks(email, start_date, end_date, jira_url, username, password, 
                                      request_delay=request_delay, include_worklog=True, is_email=True, 
                                      include_reported=include_reported, show_jql=show_jql, 
                                      time_field=time_field, jira_project_filter=jira_project_filter,
                                      jira_project_exclude=jira_project_exclude,
                                      jira_status_exclude=jira_status_exclude,
                                      ignore_fix_version_sprint_updates=ignore_fix_version_sprint,
                                      assignee_updates_only=assignee_updates_only,
                                      status_updates_only=status_updates_only,
                                      skill_group=skill_group,
                                      filter_parent_without_updated_children=filter_parent_without_updated_children)
            
            # C·∫≠p nh·∫≠t tr·∫°ng th√°i logwork cho story d·ª±a tr√™n subtask
            tasks = update_story_worklog_from_subtasks(tasks)
            
            # Ki·ªÉm tra l·∫°i m·ªôt l·∫ßn n·ªØa ƒë·ªÉ lo·∫°i b·ªè task t·ª´ d·ª± √°n ƒë√£ lo·∫°i tr·ª´ 
            if jira_project_exclude:
                tasks_before = len(tasks)
                tasks = [task for task in tasks if task.get('project', '').upper() not in [p.upper() for p in jira_project_exclude]]
                if len(tasks) < tasks_before:
                    print(f"   ‚ö†Ô∏è Ph√°t hi·ªán v√† lo·∫°i b·ªè th√™m {tasks_before - len(tasks)} task t·ª´ d·ª± √°n b·ªã lo·∫°i tr·ª´ ({', '.join(jira_project_exclude)})")
            
            # Ki·ªÉm tra l·∫°i m·ªôt l·∫ßn n·ªØa ƒë·ªÉ lo·∫°i b·ªè task c√≥ tr·∫°ng th√°i ƒë√£ lo·∫°i tr·ª´
            if jira_status_exclude:
                tasks_before = len(tasks)
                tasks = [task for task in tasks if task.get('status', '').upper() not in [s.upper() for s in jira_status_exclude]]
                if len(tasks) < tasks_before:
                    print(f"   ‚ö†Ô∏è Ph√°t hi·ªán v√† lo·∫°i b·ªè th√™m {tasks_before - len(tasks)} task c√≥ tr·∫°ng th√°i b·ªã lo·∫°i tr·ª´ ({', '.join(jira_status_exclude)})")
            
            # Th√¥ng b√°o v·ªÅ s·ªë l∆∞·ª£ng task t√¨m th·∫•y ban ƒë·∫ßu
            print(f"   ‚ÑπÔ∏è T√¨m th·∫•y {len(tasks)} task tr∆∞·ªõc khi l·ªçc")
            
            # L∆∞u s·ªë task ban ƒë·∫ßu ƒë·ªÉ theo d√µi qu√° tr√¨nh l·ªçc
            original_task_count = len(tasks)
            tasks_before_filter = tasks.copy()
            
            # L·ªçc task theo tr·∫°ng th√°i n·∫øu c√≥ y√™u c·∫ßu
            if status_filter:
                task_count_before = len(tasks)
                tasks = [task for task in tasks if task.get('status', '').upper() in [s.upper() for s in status_filter]]
                filtered_count = task_count_before - len(tasks)
                print(f"   ‚ÑπÔ∏è L·ªçc theo tr·∫°ng th√°i ƒë√£ ch·ªçn: {task_count_before} ‚Üí {len(tasks)} task (lo·∫°i b·ªè {filtered_count} task)")
            # N·∫øu ch√∫ng ta lo·∫°i b·ªè status m·∫∑c ƒë·ªãnh, lu√¥n l·ªçc l·∫°i m·ªôt l·∫ßn n·ªØa ƒë·ªÉ ch·∫Øc ch·∫Øn
            elif exclude_default:
                task_count_before = len(tasks)
                tasks = [task for task in tasks if task.get('status', '').upper() not in [s.upper() for s in excluded_statuses]]
                filtered_count = task_count_before - len(tasks)
                print(f"   ‚ÑπÔ∏è Lo·∫°i b·ªè c√°c tr·∫°ng th√°i m·∫∑c ƒë·ªãnh: {task_count_before} ‚Üí {len(tasks)} task (lo·∫°i b·ªè {filtered_count} task)")

            # L·ªçc task theo lo·∫°i n·∫øu c√≥ y√™u c·∫ßu
            if type_filter:
                task_count_before = len(tasks)
                tasks = [task for task in tasks if task.get('type', '') in type_filter]
                filtered_count = task_count_before - len(tasks)
                print(f"   ‚ÑπÔ∏è L·ªçc theo lo·∫°i: {task_count_before} ‚Üí {len(tasks)} task (lo·∫°i b·ªè {filtered_count} task)")

            # Th√¥ng b√°o khi kh√¥ng c√≤n task n√†o sau khi l·ªçc
            if len(tasks) == 0 and original_task_count > 0:
                print(f"   ‚ö†Ô∏è T·∫•t c·∫£ {original_task_count} task ƒë√£ b·ªã lo·∫°i b·ªè sau khi √°p d·ª•ng c√°c b·ªô l·ªçc")
                
                # Hi·ªán th√¥ng tin v·ªÅ task tr∆∞·ªõc khi l·ªçc ƒë·ªÉ debug
                print(f"\n   üìä Th√¥ng tin v·ªÅ c√°c task tr∆∞·ªõc khi l·ªçc:")
                for idx, task in enumerate(tasks_before_filter[:5], 1):  # Ch·ªâ hi·ªÉn th·ªã 5 task ƒë·∫ßu ti√™n
                    print(f"     {idx}. {task.get('key')} - D·ª± √°n: {task.get('project')} - Tr·∫°ng th√°i: {task.get('status')} - Lo·∫°i: {task.get('type')}")
                
                if len(tasks_before_filter) > 5:
                    print(f"     ... v√† {len(tasks_before_filter) - 5} task kh√°c")
                
                # Hi·ªÉn th·ªã b·∫£ng th·ªëng k√™ d·ª± √°n
                project_stats = {}
                for task in tasks_before_filter:
                    project = task.get('project', 'Kh√¥ng r√µ')
                    if project not in project_stats:
                        project_stats[project] = 0
                    project_stats[project] += 1
                
                print(f"\n   üìä Ph√¢n b·ªë d·ª± √°n tr∆∞·ªõc khi l·ªçc:")
                for project, count in sorted(project_stats.items(), key=lambda x: x[1], reverse=True):
                    print(f"     - {project}: {count} task")
            
            # Th·ªùi gian k·∫øt th√∫c x·ª≠ l√Ω nh√¢n vi√™n n√†y
            employee_end_time = datetime.now()
            processing_time = (employee_end_time - employee_start_time).total_seconds()
            
            # T√≠nh t·ªïng s·ªë gi·ªù log work
            total_worklog_hours = sum(task.get("total_hours", 0) for task in tasks)
            employee_worklog_hours[name] = total_worklog_hours
            
            # Th·ªëng k√™ chi ti·∫øt theo y√™u c·∫ßu
            total_tasks = len(tasks)
            tasks_without_logwork = sum(1 for task in tasks if task.get("time_saved_hours", 0) == -1)
            tasks_with_logwork = total_tasks - tasks_without_logwork
            tasks_with_logwork_no_saving = sum(1 for task in tasks if task.get("time_saved_hours", 0) == 0)
            tasks_with_saving = sum(1 for task in tasks if task.get("time_saved_hours", 0) > 0)
            tasks_exceeding_time = sum(1 for task in tasks if task.get("time_saved_hours", 0) < 0 and task.get("time_saved_hours", 0) != -1)
            
            print(f"   ‚úÖ T√¨m th·∫•y {total_tasks} task, t·ªïng {total_worklog_hours:.2f} gi·ªù worklog (th·ªùi gian x·ª≠ l√Ω: {processing_time:.1f} gi√¢y)")
            print(f"   üìä Chi ti·∫øt: {tasks_without_logwork} ch∆∞a log work, {tasks_with_logwork} ƒë√£ log work ({tasks_with_saving} ti·∫øt ki·ªám, {tasks_exceeding_time} v∆∞·ª£t th·ªùi gian, {tasks_with_logwork_no_saving} ƒë√∫ng d·ª± t√≠nh)")
            
            # Ghi log
            with open(log_file, 'a', encoding='utf-8') as f:
                f.write(f"[{employee_end_time.strftime('%d/%m/%Y %H:%M:%S')}] Ho√†n th√†nh, t√¨m th·∫•y {len(tasks)} task, {total_worklog_hours:.2f} gi·ªù worklog, th·ªùi gian x·ª≠ l√Ω: {processing_time:.1f} gi√¢y\n")
            
            # C·∫≠p nh·∫≠t th·ªëng k√™
            employee_task_counts[name] = len(tasks)
            
            # Th√™m th·ªëng k√™ chi ti·∫øt v·ªÅ log work
            if name not in employee_detailed_stats:
                employee_detailed_stats[name] = {
                    "total_tasks": 0,
                    "tasks_without_logwork": 0,
                    "tasks_with_logwork": 0,
                    "tasks_with_logwork_no_saving": 0,
                    "tasks_with_saving": 0,
                    "tasks_exceeding_time": 0,
                    "total_hours": 0,
                    "total_saved_hours": 0
                }
            
            employee_detailed_stats[name]["total_tasks"] = total_tasks
            employee_detailed_stats[name]["tasks_without_logwork"] = tasks_without_logwork
            employee_detailed_stats[name]["tasks_with_logwork"] = tasks_with_logwork
            employee_detailed_stats[name]["tasks_with_logwork_no_saving"] = tasks_with_logwork_no_saving
            employee_detailed_stats[name]["tasks_with_saving"] = tasks_with_saving
            employee_detailed_stats[name]["tasks_exceeding_time"] = tasks_exceeding_time
            employee_detailed_stats[name]["total_hours"] = total_worklog_hours
            employee_detailed_stats[name]["total_saved_hours"] = sum(max(0, task.get("time_saved_hours", 0)) for task in tasks if task.get("time_saved_hours", 0) != -1)
            
            # L∆∞u tasks v√†o file cho nh√¢n vi√™n
            if tasks:
                # T·∫°o danh s√°ch worklog
                for task in tasks:
                    for worklog in task.get('worklogs', []):
                        all_worklogs.append({
                            "employee_name": name,
                            "employee_email": email,
                            "issue_key": task.get("key"),
                            "issue_summary": task.get("summary"),
                            "issue_status": task.get("status"),
                            "project": task.get("project"),
                            "author": worklog.get("author"),
                            "time_spent": worklog.get("time_spent"),
                            "hours_spent": worklog.get("hours_spent"),
                            "started": worklog.get("started"),
                            "comment": worklog.get("comment")
                        })
                
                # Th√™m th√¥ng tin nh√¢n vi√™n v√†o tasks
                for task in tasks:
                    task['employee_name'] = name
                    task['employee_email'] = email
                    task['skill_group'] = skill_group
                    task['project_name'] = project_name
                
                # Tr∆∞·ªõc khi th√™m v√†o all_tasks
                for task in tasks:
                    # Ki·ªÉm tra l·∫°i m·ªôt l·∫ßn n·ªØa ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng c√≥ task t·ª´ d·ª± √°n b·ªã lo·∫°i tr·ª´
                    if jira_project_exclude and task.get('project', '').upper() in [p.upper() for p in jira_project_exclude]:
                        continue
                    
                    # Ki·ªÉm tra l·∫°i m·ªôt l·∫ßn n·ªØa ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng c√≥ task c√≥ tr·∫°ng th√°i b·ªã lo·∫°i tr·ª´
                    if jira_status_exclude and task.get('status', '').upper() in [s.upper() for s in jira_status_exclude]:
                        continue
                    
                    # Th√™m v√†o danh s√°ch t·∫•t c·∫£ tasks
                    all_tasks.append(task)
                
                # C·∫≠p nh·∫≠t th·ªëng k√™ theo d·ª± √°n v√† tr·∫°ng th√°i
                for task in tasks:
                    project = task.get('project', '')
                    status = task.get('status', '')
                    issue_type = task.get('type', '')
                    
                    # C·∫≠p nh·∫≠t th·ªëng k√™ theo d·ª± √°n
                    if project in project_task_counts:
                        project_task_counts[project] += 1
                    else:
                        project_task_counts[project] = 1
                    
                    # C·∫≠p nh·∫≠t th·ªëng k√™ theo t√™n d·ª± √°n
                    if project_name in project_name_task_counts:
                        project_name_task_counts[project_name] += 1
                    else:
                        project_name_task_counts[project_name] = 1
                    
                    # C·∫≠p nh·∫≠t th·ªëng k√™ theo nh√≥m k·ªπ nƒÉng
                    if skill_group in skill_group_task_counts:
                        skill_group_task_counts[skill_group] += 1
                    else:
                        skill_group_task_counts[skill_group] = 1
                        
                    # C·∫≠p nh·∫≠t th·ªëng k√™ theo tr·∫°ng th√°i
                    if status in status_task_counts:
                        status_task_counts[status] += 1
                    else:
                        status_task_counts[status] = 1
                        
                    # C·∫≠p nh·∫≠t th·ªëng k√™ theo lo·∫°i issue
                    if issue_type in type_task_counts:
                        type_task_counts[issue_type] += 1
                    else:
                        type_task_counts[issue_type] = 1
                # C·∫≠p nh·∫≠t tr·∫°ng th√°i logwork cho task cha tr∆∞·ªõc khi t·∫°o b√°o c√°o
                    parent_to_children = {}
                    for task in tasks:
                        if task.get('is_subtask') and task.get('parent_key'):
                            parent_key = task.get('parent_key')
                            if parent_key not in parent_to_children:
                                parent_to_children[parent_key] = []
                            parent_to_children[parent_key].append(task)

                    for task in tasks:
                        task_key = task.get('key')
                        if not task.get('is_subtask') and task_key in parent_to_children:
                            if not task.get('has_worklog'):  # N·∫øu task cha ch∆∞a c√≥ logwork
                                children_with_logwork = [child for child in parent_to_children[task_key] if child.get('has_worklog', False)]
                                if children_with_logwork:  # N·∫øu c√≥ √≠t nh·∫•t m·ªôt task con c√≥ logwork
                                    # ƒê√°nh d·∫•u task cha l√† c√≥ logwork
                                    task['has_worklog'] = True
                                    task['has_child_with_logwork'] = True  # Th√™m tr∆∞·ªùng ƒë·ªÉ ƒë√°nh d·∫•u
                                    
                                    # C·∫≠p nh·∫≠t time_saved_hours n·∫øu ƒëang l√† -1 (kh√¥ng c√≥ logwork)
                                    if task.get('time_saved_hours', -1) == -1:
                                        # T√≠nh t·ªïng th·ªùi gian th·ª±c t·∫ø t·ª´ c√°c task con
                                        children_total_hours = sum(child.get('total_hours', 0) for child in children_with_logwork)
                                        
                                        # C·∫≠p nh·∫≠t th·ªùi gian th·ª±c t·∫ø cho task cha
                                        if task.get('total_hours', 0) == 0:  # Ch·ªâ c·∫≠p nh·∫≠t n·∫øu task cha ch∆∞a c√≥ gi√° tr·ªã
                                            task['total_hours'] = children_total_hours
                                        
                                        # N·∫øu task cha c√≥ estimate, t√≠nh time_saved_hours
                                        if task.get('original_estimate_hours', 0) > 0:
                                            task['time_saved_hours'] = task.get('original_estimate_hours', 0) - task.get('total_hours', 0)
                                        else:
                                            # N·∫øu kh√¥ng c√≥ estimate, ƒë·∫∑t th√†nh 0 (kh√¥ng ti·∫øt ki·ªám)
                                            task['time_saved_hours'] = 0
                # L∆∞u tasks c·ªßa nh√¢n vi√™n n√†y v√†o file ri√™ng
                employee_file = f"{result_dir}/{email.split('@')[0]}_{timestamp}.csv"
                
                # T·∫°o b√°o c√°o chi ti·∫øt v·ªÅ task c·ªßa nh√¢n vi√™n
                employee_report_file = f"{result_dir}/{email.split('@')[0]}_{timestamp}_report.txt"
                create_employee_detailed_report(name, email, tasks, employee_report_file)
                
                # L·ªçc c√°c tr∆∞·ªùng quan tr·ªçng ƒë·ªÉ l∆∞u v√†o CSV
                employee_tasks_simplified = []
                for task in tasks:
                    task_simplified = {
                        "key": task.get("key"),
                        "summary": task.get("summary"),
                        "status": task.get("status"),
                        "type": task.get("type"),
                        "project": task.get("project"),
                        "updated": task.get("updated"),
                        "total_hours": task.get("total_hours"),
                        "has_worklog": task.get("has_worklog"),
                        "component_str": task.get("component_str", "Kh√¥ng c√≥ component"),
                        "actual_project": task.get("actual_project", task.get("project"))
                    }
                    employee_tasks_simplified.append(task_simplified)
                
                employee_df = pd.DataFrame(employee_tasks_simplified)
                employee_df.to_csv(employee_file, index=False, encoding='utf-8')
                print(f"   üìÑ ƒê√£ l∆∞u tasks v√†o file: {employee_file}")
            
            # N·∫øu kh√¥ng ph·∫£i nh√¢n vi√™n cu·ªëi c√πng, kh√¥ng c·∫ßn ch·ªù n·ªØa
            if idx < len(df) - 1:
                # Ghi log sau khi x·ª≠ l√Ω xong
                with open(log_file, 'a', encoding='utf-8') as f:
                    f.write(f"[{datetime.now().strftime('%d/%m/%Y %H:%M:%S')}] Ti·∫øp t·ª•c x·ª≠ l√Ω nh√¢n vi√™n ti·∫øp theo\n\n")
                    
                # Th√¥ng b√°o ti·∫øp t·ª•c v√† th√™m d·∫•u ph√¢n c√°ch
                print("\n" + "-" * 60)
                print("Ti·∫øp t·ª•c x·ª≠ l√Ω nh√¢n vi√™n ti·∫øp theo...")
                print("-" * 60 + "\n")
        
        # L∆∞u danh s√°ch worklog
        if all_worklogs:
            worklog_df = pd.DataFrame(all_worklogs)
            worklog_df.to_csv(worklog_file, index=False, encoding='utf-8')
            print(f"\nüìä ƒê√£ t·∫°o file t·ªïng h·ª£p worklog: {worklog_file}")
        
        # T·∫°o file t·ªïng h·ª£p c√°c task
        if all_tasks:
            # QUAN TR·ªåNG: C·∫≠p nh·∫≠t l·∫°i tr·∫°ng th√°i worklog cho story d·ª±a tr√™n subtask
            # sau khi ƒë√£ t·ªïng h·ª£p t·∫•t c·∫£ task t·ª´ c√°c nh√¢n vi√™n
            print(f"\nüîÑ C·∫≠p nh·∫≠t to√†n c·ª•c tr·∫°ng th√°i logwork cho story t·ª´ subtask...")
            all_tasks = update_story_worklog_from_subtasks(all_tasks)
            
            # L·ªçc b·ªè task cha khi task con kh√¥ng c√≥ update
            all_tasks = filter_parent_tasks_without_updated_children(all_tasks, filter_parent_without_updated_children)
            
            # S·∫Øp x·∫øp l·∫°i c√°c task ƒë·ªÉ nh√≥m c√°c sub-task v·ªõi task cha
            task_hierarchy = {}
            standalone_tasks = []
            
            # Ph√¢n lo·∫°i task v√† sub-task
            for task in all_tasks:
                if task.get("is_subtask") and task.get("parent_key"):
                    parent_key = task.get("parent_key")
                    if parent_key not in task_hierarchy:
                        task_hierarchy[parent_key] = []
                    task_hierarchy[parent_key].append(task)
                elif not task.get("is_subtask"):
                    standalone_tasks.append(task)
            
            # L·ªçc c√°c tr∆∞·ªùng quan tr·ªçng ƒë·ªÉ l∆∞u v√†o CSV
            all_tasks_simplified = []
            
            # Tr∆∞·ªõc ti√™n x·ª≠ l√Ω c√°c task ƒë·ªôc l·∫≠p v√† c√°c task cha
            for task in standalone_tasks:
                # L·∫•y th√¥ng tin ng∆∞·ªùi c·∫≠p nh·∫≠t cu·ªëi
                last_updater = task.get("last_updater", {})
                last_updater_name = last_updater.get("name", "") if last_updater else ""
                last_updater_email = last_updater.get("email", "") if last_updater else ""
                last_update_time = task.get("last_update_time", "")
                
                # Gh√©p c√°c l√Ω do c·∫≠p nh·∫≠t th√†nh m·ªôt chu·ªói (gi·ªõi h·∫°n ·ªü 3 l√Ω do ƒë·∫ßu ti√™n)
                update_reasons = task.get("update_reasons", [])
                update_reason_text = "; ".join(update_reasons[:3])
                if len(update_reasons) > 3:
                    update_reason_text += f"; ...v√† {len(update_reasons) - 3} thay ƒë·ªïi kh√°c"
                
                task_simplified = {
                    "employee_name": task.get("employee_name"),
                    "employee_email": task.get("employee_email"),
                    "key": task.get("key"),
                    "summary": task.get("summary"),
                    "status": task.get("status"),
                    "type": task.get("type"),
                    "project": task.get("project"),
                    "updated": task.get("updated"),
                    "total_hours": task.get("total_hours"),
                    "has_worklog": task.get("has_worklog"),
                    "link": task.get("link"),
                    "hierarchy": "PARENT" if task.get("key") in task_hierarchy else "TASK",
                    "last_updater": last_updater_name,
                    "last_updater_email": last_updater_email,
                    "last_update_time": last_update_time,
                    "update_reason": update_reason_text,
                    "component_str": task.get("component_str", "Kh√¥ng c√≥ component")
                }
                all_tasks_simplified.append(task_simplified)
                
                # Th√™m c√°c sub-task n·∫øu c√≥
                subtasks = task_hierarchy.get(task.get("key"), [])
                for subtask in subtasks:
                    subtask_simplified = {
                        "employee_name": subtask.get("employee_name"),
                        "employee_email": subtask.get("employee_email"),
                        "key": subtask.get("key"),
                        "summary": f"‚îî‚îÄ {subtask.get('summary')}",  # Th√™m ti·ªÅn t·ªë cho sub-task
                        "status": subtask.get("status"),
                        "type": subtask.get("type"),
                        "project": subtask.get("project"),
                        "updated": subtask.get("updated"),
                        "total_hours": subtask.get("total_hours"),
                        "has_worklog": subtask.get("has_worklog"),
                        "link": subtask.get("link"),
                        "hierarchy": "SUBTASK",
                        "parent_key": subtask.get("parent_key"),
                        "component_str": subtask.get("component_str", "Kh√¥ng c√≥ component")
                    }
                    all_tasks_simplified.append(subtask_simplified)
            
            # T√¨m c√°c sub-task m√† task cha kh√¥ng thu·ªôc c√πng nh√¢n vi√™n
            orphan_subtasks = []
            for task in all_tasks:
                if task.get("is_subtask") and task.get("parent_key"):
                    parent_key = task.get("parent_key")
                    # Ki·ªÉm tra xem task cha c√≥ trong danh s√°ch standalone_tasks kh√¥ng
                    if not any(st.get("key") == parent_key for st in standalone_tasks):
                        orphan_subtasks.append(task)
            
            # Th√™m c√°c orphan sub-tasks v√†o list
            for subtask in orphan_subtasks:
                subtask_simplified = {
                    "employee_name": subtask.get("employee_name"),
                    "employee_email": subtask.get("employee_email"),
                    "key": subtask.get("key"),
                    "summary": f"‚îî‚îÄ {subtask.get('summary')} (Orphan)",
                    "status": subtask.get("status"),
                    "type": subtask.get("type"),
                    "project": subtask.get("project"),
                    "updated": subtask.get("updated"),
                    "total_hours": subtask.get("total_hours"),
                    "has_worklog": subtask.get("has_worklog"),
                    "link": subtask.get("link"),
                    "hierarchy": "ORPHAN_SUBTASK",
                    "parent_key": subtask.get("parent_key"),
                    "component_str": subtask.get("component_str", "Kh√¥ng c√≥ component")
                }
                all_tasks_simplified.append(subtask_simplified)
            
            # T·∫°o b√°o c√°o th·ªëng k√™ chi ti·∫øt theo d·ª± √°n
            project_stats_file = f"{result_dir}/lc_tasks_worklog{status_suffix}{project_suffix}{type_suffix}_project_stats_{timestamp}.csv"
            
            # T√≠nh to√°n th·ªëng k√™ theo d·ª± √°n
            project_stats = {}
            for task in all_tasks:
                project = task.get("project", "")
                
                # Ki·ªÉm tra l·∫°i xem d·ª± √°n c√≥ b·ªã lo·∫°i tr·ª´ kh√¥ng
                if jira_project_exclude and project.upper() in [p.upper() for p in jira_project_exclude]:
                    print(f"   ‚ö†Ô∏è Ph√°t hi·ªán task {task.get('key')} thu·ªôc d·ª± √°n b·ªã lo·∫°i tr·ª´: {project}, b·ªè qua kh·ªèi th·ªëng k√™")
                    continue
                    
                employee_name = task.get("employee_name", "")
                employee_email = task.get("employee_email", "")
                has_worklog = task.get("has_worklog", False)
                total_hours = task.get("total_hours", 0)
                original_estimate = task.get("original_estimate_hours", 0)
                time_saved = task.get("time_saved_hours", 0)
                
                if project not in project_stats:
                    project_stats[project] = {
                        "total_issues": 0,
                        "issues_with_worklog": 0,
                        "original_estimate_hours": 0,
                        "total_hours": 0,
                        "time_saved_hours": 0,
                        "employees": set(),
                        "employee_emails": set()
                    }
                
                project_stats[project]["total_issues"] += 1
                if has_worklog:
                    project_stats[project]["issues_with_worklog"] += 1
                
                project_stats[project]["original_estimate_hours"] += original_estimate
                project_stats[project]["total_hours"] += total_hours
                project_stats[project]["time_saved_hours"] += time_saved if task.get("is_completed", False) else 0
                
                if employee_name:
                    project_stats[project]["employees"].add(employee_name)
                if employee_email:
                    project_stats[project]["employee_emails"].add(employee_email)
            
            # Chu·∫©n b·ªã d·ªØ li·ªáu d·ª± √°n cho CSV
            project_stats_data = []
            for project, stats in project_stats.items():
                # T√≠nh ph·∫ßn trƒÉm ti·∫øt ki·ªám th·ªùi gian
                if stats["original_estimate_hours"] > 0:
                    saving_percentage = (stats["time_saved_hours"] / stats["original_estimate_hours"]) * 100
                else:
                    saving_percentage = 0
                
                # T√≠nh ph·∫ßn trƒÉm issue c√≥ log work
                if stats["total_issues"] > 0:
                    worklog_percentage = (stats["issues_with_worklog"] / stats["total_issues"]) * 100
                else:
                    worklog_percentage = 0
                
                project_stats_data.append({
                    "project": project,
                    "employee_count": len(stats["employees"]),
                    "total_issues": stats["total_issues"],
                    "issues_with_worklog": stats["issues_with_worklog"],
                    "worklog_percentage": round(worklog_percentage, 1),
                    "original_estimate_hours": round(stats["original_estimate_hours"], 2),
                    "total_hours": round(stats["total_hours"], 2),
                    "time_saved_hours": round(stats["time_saved_hours"], 2),
                    "saving_percentage": round(saving_percentage, 1)
                })
            
            # S·∫Øp x·∫øp theo th·ªùi gian ti·∫øt ki·ªám
            project_stats_data = sorted(project_stats_data, key=lambda x: x["time_saved_hours"], reverse=True)
            
            # L∆∞u v√†o CSV
            project_stats_df = pd.DataFrame(project_stats_data)
            project_stats_df.to_csv(project_stats_file, index=False, encoding='utf-8')
            print(f"üìä ƒê√£ t·∫°o file th·ªëng k√™ theo d·ª± √°n: {project_stats_file}")
            
            # T√≠nh to√°n th·ªëng k√™ theo d·ª± √°n th·ª±c t·∫ø (s·ª≠ d·ª•ng h√†m get_actual_project)
            actual_project_stats = {}
            for task in all_tasks:
                project = task.get("project", "")
                
                # Ki·ªÉm tra l·∫°i xem d·ª± √°n c√≥ b·ªã lo·∫°i tr·ª´ kh√¥ng
                if jira_project_exclude and project.upper() in [p.upper() for p in jira_project_exclude]:
                    continue
                
                # X√°c ƒë·ªãnh d·ª± √°n th·ª±c t·∫ø d·ª±a v√†o project Jira v√† components 
                components = task.get("components", [])
                actual_project = get_actual_project(project, components)
                
                employee_name = task.get("employee_name", "")
                employee_email = task.get("employee_email", "")
                has_worklog = task.get("has_worklog", False)
                total_hours = task.get("total_hours", 0)
                original_estimate = task.get("original_estimate_hours", 0)
                time_saved = task.get("time_saved_hours", 0)
                
                if actual_project not in actual_project_stats:
                    actual_project_stats[actual_project] = {
                        "total_issues": 0,
                        "issues_with_worklog": 0,
                        "original_estimate_hours": 0,
                        "total_hours": 0,
                        "time_saved_hours": 0,
                        "employees": set(),
                        "employee_emails": set(),
                        "jira_projects": set()
                    }
                
                actual_project_stats[actual_project]["total_issues"] += 1
                if has_worklog:
                    actual_project_stats[actual_project]["issues_with_worklog"] += 1
                
                actual_project_stats[actual_project]["original_estimate_hours"] += original_estimate
                actual_project_stats[actual_project]["total_hours"] += total_hours
                actual_project_stats[actual_project]["time_saved_hours"] += time_saved if task.get("is_completed", False) else 0
                
                if employee_name:
                    actual_project_stats[actual_project]["employees"].add(employee_name)
                if employee_email:
                    actual_project_stats[actual_project]["employee_emails"].add(employee_email)
                
                # Th√™m th√¥ng tin v·ªÅ project Jira g·ªëc
                actual_project_stats[actual_project]["jira_projects"].add(project)
            
            # Chu·∫©n b·ªã d·ªØ li·ªáu d·ª± √°n th·ª±c t·∫ø cho CSV
            actual_project_stats_data = []
            for actual_project, stats in actual_project_stats.items():
                # T√≠nh ph·∫ßn trƒÉm ti·∫øt ki·ªám th·ªùi gian
                if stats["original_estimate_hours"] > 0:
                    saving_percentage = (stats["time_saved_hours"] / stats["original_estimate_hours"]) * 100
                else:
                    saving_percentage = 0
                
                # T√≠nh ph·∫ßn trƒÉm issue c√≥ log work
                if stats["total_issues"] > 0:
                    worklog_percentage = (stats["issues_with_worklog"] / stats["total_issues"]) * 100
                else:
                    worklog_percentage = 0
                
                actual_project_stats_data.append({
                    "actual_project": actual_project,
                    "jira_projects": ", ".join(stats["jira_projects"]),
                    "employee_count": len(stats["employees"]),
                    "total_issues": stats["total_issues"],
                    "issues_with_worklog": stats["issues_with_worklog"],
                    "worklog_percentage": round(worklog_percentage, 1),
                    "original_estimate_hours": round(stats["original_estimate_hours"], 2),
                    "total_hours": round(stats["total_hours"], 2),
                    "time_saved_hours": round(stats["time_saved_hours"], 2),
                    "saving_percentage": round(saving_percentage, 1)
                })
            
            # S·∫Øp x·∫øp theo th·ªùi gian ti·∫øt ki·ªám
            actual_project_stats_data = sorted(actual_project_stats_data, key=lambda x: x["time_saved_hours"], reverse=True)
            
            # L∆∞u v√†o CSV
            actual_project_stats_file = f"{result_dir}/lc_tasks_worklog{status_suffix}{project_suffix}{type_suffix}_actual_project_stats_{timestamp}.csv"
            actual_project_stats_df = pd.DataFrame(actual_project_stats_data)
            actual_project_stats_df.to_csv(actual_project_stats_file, index=False, encoding='utf-8')
            print(f"üìä ƒê√£ t·∫°o file th·ªëng k√™ theo d·ª± √°n th·ª±c t·∫ø: {actual_project_stats_file}")
            
            # Th·ªëng k√™ theo component
            component_stats = {}
            for task in all_tasks:
                # Ki·ªÉm tra l·∫°i xem d·ª± √°n c√≥ b·ªã lo·∫°i tr·ª´ kh√¥ng
                project = task.get("project", "")
                if jira_project_exclude and project.upper() in [p.upper() for p in jira_project_exclude]:
                    continue
                
                # L·∫•y danh s√°ch components c·ªßa task
                components = task.get("components", [])
                
                # N·∫øu kh√¥ng c√≥ component, ƒë·∫∑t v√†o nh√≥m "Kh√¥ng c√≥ component"
                if not components:
                    components = ["Kh√¥ng c√≥ component"]
                
                for component in components:
                    if component not in component_stats:
                        component_stats[component] = {
                            "total_issues": 0,
                            "issues_with_worklog": 0,
                            "original_estimate_hours": 0,
                            "total_hours": 0,
                            "time_saved_hours": 0,
                            "projects": set()
                        }
                    
                    has_worklog = task.get("has_worklog", False)
                    total_hours = task.get("total_hours", 0)
                    original_estimate = task.get("original_estimate_hours", 0)
                    time_saved = task.get("time_saved_hours", 0)
                    
                    component_stats[component]["total_issues"] += 1
                    if has_worklog:
                        component_stats[component]["issues_with_worklog"] += 1
                    
                    component_stats[component]["original_estimate_hours"] += original_estimate
                    component_stats[component]["total_hours"] += total_hours
                    component_stats[component]["time_saved_hours"] += time_saved if task.get("is_completed", False) else 0
                    component_stats[component]["projects"].add(project)
            
            # Chu·∫©n b·ªã d·ªØ li·ªáu component cho CSV
            component_stats_data = []
            for component, stats in component_stats.items():
                # T√≠nh ph·∫ßn trƒÉm ti·∫øt ki·ªám th·ªùi gian
                if stats["original_estimate_hours"] > 0:
                    saving_percentage = (stats["time_saved_hours"] / stats["original_estimate_hours"]) * 100
                else:
                    saving_percentage = 0
                
                # T√≠nh ph·∫ßn trƒÉm issue c√≥ log work
                if stats["total_issues"] > 0:
                    worklog_percentage = (stats["issues_with_worklog"] / stats["total_issues"]) * 100
                else:
                    worklog_percentage = 0
                
                component_stats_data.append({
                    "component": component,
                    "project_count": len(stats["projects"]),
                    "projects": ", ".join(stats["projects"]),
                    "total_issues": stats["total_issues"],
                    "issues_with_worklog": stats["issues_with_worklog"],
                    "worklog_percentage": round(worklog_percentage, 1),
                    "original_estimate_hours": round(stats["original_estimate_hours"], 2),
                    "total_hours": round(stats["total_hours"], 2),
                    "time_saved_hours": round(stats["time_saved_hours"], 2),
                    "saving_percentage": round(saving_percentage, 1)
                })
            
            # S·∫Øp x·∫øp theo th·ªùi gian ti·∫øt ki·ªám
            component_stats_data = sorted(component_stats_data, key=lambda x: x["time_saved_hours"], reverse=True)
            
            # L∆∞u v√†o CSV
            component_stats_file = f"{result_dir}/lc_tasks_worklog{status_suffix}{project_suffix}{type_suffix}_component_stats_{timestamp}.csv"
            component_stats_df = pd.DataFrame(component_stats_data)
            component_stats_df.to_csv(component_stats_file, index=False, encoding='utf-8')
            print(f"üìä ƒê√£ t·∫°o file th·ªëng k√™ theo component: {component_stats_file}")
            
            # Hi·ªÉn th·ªã b·∫£ng th·ªëng k√™ theo d·ª± √°n
            # print("\nüìä TH·ªêNG K√ä CHI TI·∫æT THEO D·ª∞ √ÅN:")
            # print(f"{'D·ª± √°n':<12}{'Nh√¢n vi√™n':<10}{'Issues':<8}{'C√≥ log':<8}{'%Log':<7}{'∆Ø·ªõc t√≠nh':<10}{'Th·ª±c t·∫ø':<10}{'Ti·∫øt ki·ªám':<10}{'%Ti·∫øt ki·ªám':<10}")
            # print("-" * 80)
            
            for stats in project_stats_data[:10]:  # Hi·ªÉn th·ªã top 10
                project = stats["project"]
                employee_count = stats["employee_count"]
                total_issues = stats["total_issues"]
                issues_with_worklog = stats["issues_with_worklog"]
                worklog_percentage = stats["worklog_percentage"]
                original_estimate = stats["original_estimate_hours"]
                total_hours = stats["total_hours"]
                time_saved = stats["time_saved_hours"]
                saving_percentage = stats["saving_percentage"]
                
                # ƒê·ªãnh d·∫°ng ph·∫ßn trƒÉm
                worklog_percent_display = f"{worklog_percentage:.1f}%"
                
                # ƒê·ªãnh d·∫°ng th·ªùi gian ti·∫øt ki·ªám
                if time_saved > 0:
                    time_saved_display = f"{time_saved:.2f}h"
                    saving_percent_display = f"{saving_percentage:.1f}%"
                else:
                    time_saved_display = f"-{abs(time_saved):.2f}h"
                    saving_percent_display = f"-{abs(saving_percentage):.1f}%"
                
                print(f"{project:<12}{employee_count:<10}{total_issues:<8}{issues_with_worklog:<8}{worklog_percent_display:<7}{original_estimate:<10.2f}{total_hours:<10.2f}{time_saved_display:<10}{saving_percent_display:<10}")
            
            if len(project_stats_data) > 10:
                print(f"... v√† {len(project_stats_data) - 10} d·ª± √°n kh√°c (xem chi ti·∫øt trong file CSV)")
                
            # Hi·ªÉn th·ªã b·∫£ng th·ªëng k√™ theo d·ª± √°n th·ª±c t·∫ø
            print("\nüìä TH·ªêNG K√ä CHI TI·∫æT THEO D·ª∞ √ÅN TH·ª∞C T·∫æ:")
            print(f"{'D·ª± √°n th·ª±c t·∫ø':<20}{'Nh√¢n vi√™n':<10}{'Issues':<8}{'C√≥ log':<8}{'%Log':<7}{'∆Ø·ªõc t√≠nh':<10}{'Th·ª±c t·∫ø':<10}{'Ti·∫øt ki·ªám':<10}{'%Ti·∫øt ki·ªám':<10}")
            print("-" * 90)
            
            for stats in actual_project_stats_data[:10]:  # Hi·ªÉn th·ªã top 10
                project = stats["actual_project"][:18] + ".." if len(stats["actual_project"]) > 20 else stats["actual_project"]
                employee_count = stats["employee_count"]
                total_issues = stats["total_issues"]
                issues_with_worklog = stats["issues_with_worklog"]
                worklog_percentage = stats["worklog_percentage"]
                original_estimate = stats["original_estimate_hours"]
                total_hours = stats["total_hours"]
                time_saved = stats["time_saved_hours"]
                saving_percentage = stats["saving_percentage"]
                
                # ƒê·ªãnh d·∫°ng ph·∫ßn trƒÉm
                worklog_percent_display = f"{worklog_percentage:.1f}%"
                
                # ƒê·ªãnh d·∫°ng th·ªùi gian ti·∫øt ki·ªám
                if time_saved > 0:
                    time_saved_display = f"{time_saved:.2f}h"
                    saving_percent_display = f"{saving_percentage:.1f}%"
                else:
                    time_saved_display = f"-{abs(time_saved):.2f}h"
                    saving_percent_display = f"-{abs(saving_percentage):.1f}%"
                
                print(f"{project:<20}{employee_count:<10}{total_issues:<8}{issues_with_worklog:<8}{worklog_percent_display:<7}{original_estimate:<10.2f}{total_hours:<10.2f}{time_saved_display:<10}{saving_percent_display:<10}")
            
            if len(actual_project_stats_data) > 10:
                print(f"... v√† {len(actual_project_stats_data) - 10} d·ª± √°n th·ª±c t·∫ø kh√°c (xem chi ti·∫øt trong file CSV)")
            
            # Hi·ªÉn th·ªã b·∫£ng th·ªëng k√™ theo component
            print("\nüìä TH·ªêNG K√ä CHI TI·∫æT THEO COMPONENT:")
            print(f"{'Component':<22}{'D·ª± √°n':<10}{'Issues':<8}{'C√≥ log':<8}{'%Log':<7}{'∆Ø·ªõc t√≠nh':<10}{'Th·ª±c t·∫ø':<10}{'Ti·∫øt ki·ªám':<10}{'%Ti·∫øt ki·ªám':<10}")
            print("-" * 95)
            
            for stats in component_stats_data[:10]:  # Hi·ªÉn th·ªã top 10
                component = stats["component"][:20] + ".." if len(stats["component"]) > 22 else stats["component"]
                project_count = stats["project_count"]
                total_issues = stats["total_issues"]
                issues_with_worklog = stats["issues_with_worklog"]
                worklog_percentage = stats["worklog_percentage"]
                original_estimate = stats["original_estimate_hours"]
                total_hours = stats["total_hours"]
                time_saved = stats["time_saved_hours"]
                saving_percentage = stats["saving_percentage"]
                
                # ƒê·ªãnh d·∫°ng ph·∫ßn trƒÉm
                worklog_percent_display = f"{worklog_percentage:.1f}%"
                
                # ƒê·ªãnh d·∫°ng th·ªùi gian ti·∫øt ki·ªám
                if time_saved > 0:
                    time_saved_display = f"{time_saved:.2f}h"
                    saving_percent_display = f"{saving_percentage:.1f}%"
                else:
                    time_saved_display = f"-{abs(time_saved):.2f}h"
                    saving_percent_display = f"-{abs(saving_percentage):.1f}%"
                
                print(f"{component:<22}{project_count:<10}{total_issues:<8}{issues_with_worklog:<8}{worklog_percent_display:<7}{original_estimate:<10.2f}{total_hours:<10.2f}{time_saved_display:<10}{saving_percent_display:<10}")
            
            if len(component_stats_data) > 10:
                print(f"... v√† {len(component_stats_data) - 10} component kh√°c (xem chi ti·∫øt trong file CSV)")
                
            # L∆∞u b√°o c√°o ph√¢n c·∫•p v√†o file text ƒë·ªÉ d·ªÖ ƒë·ªçc
            hierarchy_report_file = f"{result_dir}/lc_tasks_worklog{status_suffix}{project_suffix}{type_suffix}_hierarchy_{timestamp}.txt"
            with open(hierarchy_report_file, 'w', encoding='utf-8') as f:
                f.write("=== B√ÅO C√ÅO C√ÇY PH√ÇN C·∫§P TASK V√Ä SUB-TASK ===\n\n")
                f.write(f"Th·ªùi gian t·∫°o b√°o c√°o: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n")
                f.write(f"Kho·∫£ng th·ªùi gian: {start_date_str} - {end_date_str}\n\n")
                
                # T√≠nh t·ªïng th·ªùi gian ti·∫øt ki·ªám
                total_original_estimate = sum(task.get("original_estimate_hours", 0) for task in all_tasks)
                total_time_spent = sum(task.get("total_hours", 0) for task in all_tasks)
                total_time_saved = sum(task.get("time_saved_hours", 0) for task in all_tasks if task.get("is_completed", False))
                
                if total_original_estimate > 0:
                    saving_percentage = (total_time_saved / total_original_estimate) * 100
                    f.write(f"T·ªïng th·ªùi gian ∆∞·ªõc t√≠nh (kh√¥ng AI): {total_original_estimate:.2f}h\n")
                    f.write(f"T·ªïng th·ªùi gian log work (v·ªõi AI): {total_time_spent:.2f}h\n")
                    if total_time_saved > 0:
                        f.write(f"T·ªïng th·ªùi gian ti·∫øt ki·ªám: {total_time_saved:.2f}h ({saving_percentage:.1f}%)\n\n")
                    else:
                        f.write(f"T·ªïng th·ªùi gian ch√™nh l·ªách: -{abs(total_time_saved):.2f}h\n\n")
                
                f.write("PH√ÇN C·∫§P TASK V√Ä SUB-TASK:\n")
                f.write("="*100 + "\n")
                
                # Nh√≥m theo nh√¢n vi√™n
                employees = {}
                for task in standalone_tasks:
                    employee_name = task.get("employee_name", "Kh√¥ng x√°c ƒë·ªãnh")
                    if employee_name not in employees:
                        employees[employee_name] = []
                    employees[employee_name].append(task)
                
                # Vi·∫øt b√°o c√°o theo t·ª´ng nh√¢n vi√™n
                for employee_name, tasks in employees.items():
                    # T√≠nh t·ªïng th·ªùi gian cho nh√¢n vi√™n n√†y
                    employee_tasks = [t for t in all_tasks if t.get("employee_name") == employee_name]
                    employee_estimate = sum(t.get("original_estimate_hours", 0) for t in employee_tasks)
                    employee_time_spent = sum(t.get("total_hours", 0) for t in employee_tasks)
                    employee_time_saved = sum(t.get("time_saved_hours", 0) for t in employee_tasks)
                    
                    # f.write(f"\nüë§ NH√ÇN VI√äN: {employee_name}\n")
                    
                    if employee_estimate > 0:
                        saving_percentage = (employee_time_saved / employee_estimate) * 100 if employee_estimate > 0 else 0
                        if employee_time_saved > 0:
                            f.write(f"   Th·ªùi gian ∆∞·ªõc t√≠nh (kh√¥ng AI): {employee_estimate:.2f}h | Th·ªùi gian s·ª≠ d·ª•ng AI: {employee_time_spent:.2f}h | Ti·∫øt ki·ªám: {employee_time_saved:.2f}h ({saving_percentage:.1f}%)\n")
                        else:
                            f.write(f"   Th·ªùi gian ∆∞·ªõc t√≠nh (kh√¥ng AI): {employee_estimate:.2f}h | Th·ªùi gian s·ª≠ d·ª•ng AI: {employee_time_spent:.2f}h | Ch√™nh l·ªách: -{abs(employee_time_saved):.2f}h\n")
                        
                    f.write("-"*100 + "\n")
                    
                    for task in tasks:
                        task_key = task.get("key", "")
                        has_subtasks = task_key in task_hierarchy
                        
                        # L·∫•y th√¥ng tin ∆∞·ªõc t√≠nh v√† th·ªùi gian
                        original_estimate = task.get("original_estimate_hours", 0)
                        time_spent = task.get("total_hours", 0)
                        time_saved = task.get("time_saved_hours", 0)
                        
                        # Hi·ªÉn th·ªã th√¥ng tin th·ªùi gian
                        time_info = ""
                        if original_estimate > 0:
                            saving_percent = (time_saved / original_estimate) * 100 if original_estimate > 0 else 0
                            if time_saved > 0:
                                time_info = f" | ∆Ø·ªõc t√≠nh: {original_estimate:.2f}h, Th·ª±c t·∫ø: {time_spent:.2f}h, Ti·∫øt ki·ªám: {time_saved:.2f}h ({saving_percent:.1f}%)"
                            else:
                                time_info = f" | ∆Ø·ªõc t√≠nh: {original_estimate:.2f}h, Th·ª±c t·∫ø: {time_spent:.2f}h, Ch√™nh l·ªách: -{abs(time_saved):.2f}h"
                        elif time_spent > 0:
                            time_info = f" | Kh√¥ng c√≥ ∆∞·ªõc t√≠nh, Th·ª±c t·∫ø: {time_spent:.2f}h"
                        
                        task_icon = "üìÅ" if has_subtasks else "üìÑ"
                        f.write(f"{task_icon} {task_key}: {task.get('summary', '')} [{task.get('type', '')} - {task.get('status', '')}]{time_info}\n")
                        f.write(f"   üîñ Component: {task.get('component_str', 'Kh√¥ng c√≥ component')}\n")
                        f.write(f"   üìå D·ª± √°n th·ª±c t·∫ø: {task.get('actual_project', task.get('project', ''))}\n")
                        
                        # Hi·ªÉn th·ªã c√°c sub-task
                        if has_subtasks:
                            subtasks = task_hierarchy.get(task_key, [])
                            for i, subtask in enumerate(subtasks):
                                is_last = i == len(subtasks) - 1
                                prefix = "‚îî‚îÄ" if is_last else "‚îú‚îÄ"
                                
                                # L·∫•y th√¥ng tin ∆∞·ªõc t√≠nh v√† th·ªùi gian cho sub-task
                                st_original_estimate = subtask.get("original_estimate_hours", 0)
                                st_time_spent = subtask.get("total_hours", 0)
                                st_time_saved = subtask.get("time_saved_hours", 0)
                                
                                # Hi·ªÉn th·ªã th√¥ng tin th·ªùi gian cho sub-task
                                st_time_info = ""
                                if st_original_estimate > 0:
                                    st_saving_percent = (st_time_saved / st_original_estimate) * 100 if st_original_estimate > 0 else 0
                                    if st_time_saved > 0:
                                        st_time_info = f" | ∆Ø·ªõc t√≠nh: {st_original_estimate:.2f}h, Th·ª±c t·∫ø: {st_time_spent:.2f}h, Ti·∫øt ki·ªám: {st_time_saved:.2f}h ({st_saving_percent:.1f}%)"
                                    else:
                                        st_time_info = f" | ∆Ø·ªõc t√≠nh: {st_original_estimate:.2f}h, Th·ª±c t·∫ø: {st_time_spent:.2f}h, Ch√™nh l·ªách: -{abs(st_time_saved):.2f}h"
                                elif st_time_spent > 0:
                                    st_time_info = f" | Kh√¥ng c√≥ ∆∞·ªõc t√≠nh, Th·ª±c t·∫ø: {st_time_spent:.2f}h"
                                
                                f.write(f"    {prefix} {subtask.get('key', '')}: {subtask.get('summary', '')} [{subtask.get('type', '')} - {subtask.get('status', '')}]{st_time_info}\n")
                                f.write(f"        üîñ Component: {subtask.get('component_str', 'Kh√¥ng c√≥ component')}\n")
                                f.write(f"        üìå D·ª± √°n th·ª±c t·∫ø: {subtask.get('actual_project', subtask.get('project', ''))}\n")
                        
                        f.write("\n")
                    
                    # Hi·ªÉn th·ªã c√°c sub-task m·ªì c√¥i
                    if orphan_subtasks:
                        f.write("\n‚ö†Ô∏è SUB-TASKS C√ì TASK CHA KH√îNG THU·ªòC C√ôNG NH√ÇN VI√äN:\n")
                        f.write("-"*100 + "\n")
                        
                        # Nh√≥m theo nh√¢n vi√™n
                        orphan_by_employee = {}
                        for subtask in orphan_subtasks:
                            employee_name = subtask.get("employee_name", "Kh√¥ng x√°c ƒë·ªãnh")
                            if employee_name not in orphan_by_employee:
                                orphan_by_employee[employee_name] = []
                            orphan_by_employee[employee_name].append(subtask)
                        
                        for employee_name, subtasks in orphan_by_employee.items():
                            # f.write(f"\nüë§ NH√ÇN VI√äN: {employee_name}\n")
                            
                            for subtask in subtasks:
                                parent_key = subtask.get("parent_key", "")
                                parent_summary = subtask.get("parent_summary", "")
                                
                                # L·∫•y th√¥ng tin ∆∞·ªõc t√≠nh v√† th·ªùi gian
                                st_original_estimate = subtask.get("original_estimate_hours", 0)
                                st_time_spent = subtask.get("total_hours", 0)
                                st_time_saved = subtask.get("time_saved_hours", 0)
                                
                                # Hi·ªÉn th·ªã th√¥ng tin th·ªùi gian
                                st_time_info = ""
                                if st_original_estimate > 0:
                                    st_saving_percent = (st_time_saved / st_original_estimate) * 100 if st_original_estimate > 0 else 0
                                    if st_time_saved > 0:
                                        st_time_info = f" | ∆Ø·ªõc t√≠nh: {st_original_estimate:.2f}h, Th·ª±c t·∫ø: {st_time_spent:.2f}h, Ti·∫øt ki·ªám: {st_time_saved:.2f}h ({st_saving_percent:.1f}%)"
                                    else:
                                        st_time_info = f" | ∆Ø·ªõc t√≠nh: {st_original_estimate:.2f}h, Th·ª±c t·∫ø: {st_time_spent:.2f}h, Ch√™nh l·ªách: -{abs(st_time_saved):.2f}h"
                                elif st_time_spent > 0:
                                    st_time_info = f" | Kh√¥ng c√≥ ∆∞·ªõc t√≠nh, Th·ª±c t·∫ø: {st_time_spent:.2f}h"
                                
                                f.write(f"    ‚îî‚îÄ {subtask.get('key', '')}: {subtask.get('summary', '')} [{subtask.get('type', '')} - {subtask.get('status', '')}]{st_time_info}\n")
                                f.write(f"       ‚Üë Task cha: {parent_key} - {parent_summary}\n")
                                f.write(f"        üîñ Component: {subtask.get('component_str', 'Kh√¥ng c√≥ component')}\n")
                                f.write(f"        üìå D·ª± √°n th·ª±c t·∫ø: {subtask.get('actual_project', subtask.get('project', ''))}\n\n")
            
            # Ghi CSV file nh∆∞ b√¨nh th∆∞·ªùng
            all_tasks_df = pd.DataFrame(all_tasks_simplified)
            all_tasks_df.to_csv(summary_file, index=False, encoding='utf-8')
            print(f"\nüìä ƒê√£ t·∫°o file t·ªïng h·ª£p t·∫•t c·∫£ task: {summary_file}")
            print(f"üìä ƒê√£ t·∫°o b√°o c√°o ph√¢n c·∫•p task: {hierarchy_report_file}")
            
            # T·∫°o b√°o c√°o th·ªëng k√™
            with open(report_file, 'w', encoding='utf-8') as f:
                f.write("=== B√ÅO C√ÅO TH·ªêNG K√ä TASK V√Ä WORKLOG C·ª¶A NH√ÇN VI√äN LC ===\n\n")
                f.write(f"Th·ªùi gian t·∫°o b√°o c√°o: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n")
                f.write(f"Kho·∫£ng th·ªùi gian: {start_date_str} - {end_date_str}\n")
                f.write(f"Tr∆∞·ªùng th·ªùi gian s·ª≠ d·ª•ng: {time_field}\n")
                if include_reported:
                    f.write(f"T√¨m ki·∫øm c·∫£ task do nh√¢n vi√™n b√°o c√°o/t·∫°o\n")
                else:
                    f.write(f"Ch·ªâ t√¨m ki·∫øm task ƒë∆∞·ª£c g√°n cho nh√¢n vi√™n\n")
                if status_filter:
                    f.write(f"L·ªçc theo tr·∫°ng th√°i: {', '.join(status_filter)}\n")
                elif exclude_default:
                    f.write(f"Lo·∫°i b·ªè c√°c tr·∫°ng th√°i m·∫∑c ƒë·ªãnh: {', '.join(excluded_statuses)}\n")
                if project_filter:
                    f.write(f"L·ªçc theo d·ª± √°n: {', '.join(project_filter)}\n")
                if type_filter:
                    f.write(f"L·ªçc theo lo·∫°i issue: {', '.join(type_filter)}\n")
                if 'SKILL_GROUP' in df.columns:
                    excluded_skills = ['AMS', 'IT', 'EA', 'Databrick', 'AI', 'ISMS']
                    f.write(f"Lo·∫°i b·ªè nh√¢n vi√™n thu·ªôc SKILL_GROUP: {', '.join(excluded_skills)}\n")
                f.write("\n")
                
                # T√≠nh t·ªïng th·ªùi gian ti·∫øt ki·ªám
                total_original_estimate = sum(task.get("original_estimate_hours", 0) for task in all_tasks)
                total_time_spent = sum(task.get("total_hours", 0) for task in all_tasks)
                total_time_saved = sum(task.get("time_saved_hours", 0) for task in all_tasks if task.get("is_completed", False))
                
                if total_original_estimate > 0:
                    saving_percentage = (total_time_saved / total_original_estimate) * 100
                else:
                    saving_percentage = 0
                
                f.write("TH√îNG TIN T·ªîNG QUAN:\n")
                f.write(f"‚Ä¢ T·ªïng s·ªë nh√¢n vi√™n ƒë√£ x·ª≠ l√Ω: {len(df)}\n")
                f.write(f"‚Ä¢ T·ªïng s·ªë nh√¢n vi√™n c√≥ task: {len([count for count in employee_task_counts.values() if count > 0])}\n")
                f.write(f"‚Ä¢ T·ªïng s·ªë task: {len(all_tasks)}\n")
                f.write(f"‚Ä¢ T·ªïng th·ªùi gian ∆∞·ªõc t√≠nh (kh√¥ng AI): {total_original_estimate:.2f} gi·ªù\n")
                f.write(f"‚Ä¢ T·ªïng th·ªùi gian log work (s·ª≠ d·ª•ng AI): {total_time_spent:.2f} gi·ªù\n")
                
                if total_time_saved > 0:
                    f.write(f"‚Ä¢ T·ªïng th·ªùi gian ti·∫øt ki·ªám: {total_time_saved:.2f} gi·ªù ({saving_percentage:.1f}%)\n\n")
                else:
                    f.write(f"‚Ä¢ T·ªïng th·ªùi gian ch√™nh l·ªách: -{abs(total_time_saved):.2f} gi·ªù\n\n")
                
                f.write("DANH S√ÅCH NH√ÇN VI√äN ƒê√É X·ª¨ L√ù:\n")
                for idx, row in df.iterrows():
                    name = row.get('NAME', 'Kh√¥ng c√≥ t√™n')
                    email = row.get('EMAIL', '')
                    task_count = employee_task_counts.get(name, 0)
                    worklog_hours = employee_worklog_hours.get(name, 0)
                    f.write(f"‚Ä¢ {name} ({email}): {task_count} task, {worklog_hours:.2f} gi·ªù log work\n")
                f.write("\n")
                
                f.write("TH·ªêNG K√ä THEO NH√ÇN VI√äN:\n")
                f.write(f"{'STT':<5}{'T√™n nh√¢n vi√™n':<30}{'Email':<30}{'S·ªë task':<10}{'Task c√≥ worklog':<15}{'Gi·ªù log work':<15}{'∆Ø·ªõc t√≠nh kh√¥ng AI':<20}{'Ti·∫øt ki·ªám':<15}{'Ph·∫ßn trƒÉm':<10}\n")
                f.write("="*145 + "\n")
                
                # T√≠nh s·ªë task c√≥ worklog v√† ∆∞·ªõc t√≠nh cho m·ªói nh√¢n vi√™n
                employee_worklog_tasks = {}
                employee_estimates = {}
                employee_time_saved = {}
                
                for task in all_tasks:
                    name = task.get("employee_name", "")
                    has_worklog = task.get("has_worklog", False)
                    original_estimate = task.get("original_estimate_hours", 0)
                    time_saved = task.get("time_saved_hours", 0)
                    
                    if name not in employee_worklog_tasks:
                        employee_worklog_tasks[name] = 0
                        employee_estimates[name] = 0
                        employee_time_saved[name] = 0
                    
                    if has_worklog:
                        employee_worklog_tasks[name] += 1
                    
                    employee_estimates[name] += original_estimate
                    employee_time_saved[name] += time_saved
                
                # S·∫Øp x·∫øp theo th·ªùi gian ti·∫øt ki·ªám t·ª´ cao ƒë·∫øn th·∫•p
                sorted_employees = sorted(employee_time_saved.items(), key=lambda x: x[1], reverse=True)
                
                for idx, (name, time_saved) in enumerate(sorted_employees, 1):
                    if name not in employee_task_counts or employee_task_counts[name] == 0:
                        continue
                        
                    email = next((row.get('EMAIL', '') for idx, row in df.iterrows() if row.get('NAME', '') == name), '')
                    task_count = employee_task_counts.get(name, 0)
                    worklog_task_count = employee_worklog_tasks.get(name, 0)
                    worklog_hours = employee_worklog_hours.get(name, 0)
                    estimate_hours = employee_estimates.get(name, 0)
                    
                    if estimate_hours > 0:
                        saving_percent = (time_saved / estimate_hours) * 100
                        saving_percent_display = f"{saving_percent:.1f}%"
                    else:
                        saving_percent_display = "N/A"
                    
                    if time_saved > 0:
                        time_saved_display = f"{time_saved:.2f}h"
                    else:
                        time_saved_display = f"-{abs(time_saved):.2f}h"
                        
                    f.write(f"{idx:<5}{name[:28]:<30}{email[:28]:<30}{task_count:<10}{worklog_task_count:<15}{worklog_hours:<15.2f}{estimate_hours:<20.2f}{time_saved_display:<15}{saving_percent_display:<10}\n")
                
                f.write("\n")
                
                f.write("TH·ªêNG K√ä THEO D·ª∞ √ÅN:\n")
                f.write(f"{'STT':<5}{'M√£ d·ª± √°n':<15}{'S·ªë task':<10}{'∆Ø·ªõc t√≠nh kh√¥ng AI':<20}{'Th·ªùi gian s·ª≠ d·ª•ng AI':<25}{'Ti·∫øt ki·ªám':<15}{'Ph·∫ßn trƒÉm':<10}\n")
                f.write("-"*100 + "\n")
                
                # T√≠nh th·ªëng k√™ theo d·ª± √°n
                project_stats = {}
                for task in all_tasks:
                    project = task.get("project", "")
                    original_estimate = task.get("original_estimate_hours", 0)
                    time_spent = task.get("total_hours", 0)
                    time_saved = task.get("time_saved_hours", 0)
                    
                    if project not in project_stats:
                        project_stats[project] = {
                            "count": 0,
                            "estimate": 0,
                            "time_spent": 0,
                            "time_saved": 0
                        }
                    
                    project_stats[project]["count"] += 1
                    project_stats[project]["estimate"] += original_estimate
                    project_stats[project]["time_spent"] += time_spent
                    project_stats[project]["time_saved"] += time_saved
                
                # S·∫Øp x·∫øp theo th·ªùi gian ti·∫øt ki·ªám
                sorted_projects = sorted(project_stats.items(), key=lambda x: x[1]["time_saved"], reverse=True)
                
                for idx, (project, stats) in enumerate(sorted_projects, 1):
                    count = stats["count"]
                    estimate = stats["estimate"]
                    time_spent = stats["time_spent"]
                    time_saved = stats["time_saved"]
                    
                    if estimate > 0:
                        saving_percent = (time_saved / estimate) * 100
                        saving_percent_display = f"{saving_percent:.1f}%"
                    else:
                        saving_percent_display = "N/A"
                    
                    if time_saved > 0:
                        time_saved_display = f"{time_saved:.2f}h"
                    else:
                        time_saved_display = f"-{abs(time_saved):.2f}h"
                        
                    f.write(f"{idx:<5}{project:<15}{count:<10}{estimate:<20.2f}{time_spent:<25.2f}{time_saved_display:<15}{saving_percent_display:<10}\n")
                
                f.write("\n")
                
                # C√°c th·ªëng k√™ kh√°c gi·ªØ nguy√™n
                f.write("TH·ªêNG K√ä THEO TR·∫†NG TH√ÅI:\n")
                for status, count in sorted(status_task_counts.items(), key=lambda x: x[1], reverse=True):
                    f.write(f"‚Ä¢ {status}: {count} task ({count/len(all_tasks)*100:.1f}%)\n")
                f.write("\n")
                
                f.write("TH·ªêNG K√ä THEO T√äN D·ª∞ √ÅN:\n")
                for project_name, count in sorted(project_name_task_counts.items(), key=lambda x: x[1], reverse=True):
                    if project_name:  # Ch·ªâ hi·ªÉn th·ªã n·∫øu c√≥ t√™n d·ª± √°n
                        f.write(f"‚Ä¢ {project_name}: {count} task ({count/len(all_tasks)*100:.1f}%)\n")
                    
                    f.write("TH·ªêNG K√ä THEO NH√ìM K·ª∏ NƒÇNG:\n")
                    for skill, count in sorted(skill_group_task_counts.items(), key=lambda x: x[1], reverse=True):
                        if skill:  # Ch·ªâ hi·ªÉn th·ªã n·∫øu c√≥ nh√≥m k·ªπ nƒÉng
                            f.write(f"‚Ä¢ {skill}: {count} task ({count/len(all_tasks)*100:.1f}%)\n")
                        
                        f.write("TH·ªêNG K√ä THEO LO·∫†I ISSUE:\n")
                        for issue_type, count in sorted(type_task_counts.items(), key=lambda x: x[1], reverse=True):
                            f.write(f"‚Ä¢ {issue_type}: {count} task ({count/len(all_tasks)*100:.1f}%)\n")
                
                print(f"üìù ƒê√£ t·∫°o b√°o c√°o th·ªëng k√™: {report_file}")
                
                # Hi·ªÉn th·ªã th·ªëng k√™ t·ªïng quan
                print("\nüìä TH·ªêNG K√ä T·ªîNG QUAN:")
                print(f"‚Ä¢ T·ªïng s·ªë nh√¢n vi√™n ƒë√£ x·ª≠ l√Ω: {len(df)}")
                print(f"‚Ä¢ T·ªïng s·ªë nh√¢n vi√™n c√≥ task: {len([count for count in employee_task_counts.values() if count > 0])}")
                print(f"‚Ä¢ T·ªïng s·ªë task: {len(all_tasks)}")
                print(f"‚Ä¢ T·ªïng s·ªë task ƒë√£ ho√†n th√†nh: {len([task for task in all_tasks if task.get('is_completed', False)])}")
                print(f"‚Ä¢ T·ªïng th·ªùi gian ∆∞·ªõc t√≠nh (kh√¥ng AI): {total_original_estimate:.2f} gi·ªù")
                print(f"‚Ä¢ T·ªïng th·ªùi gian log work (s·ª≠ d·ª•ng AI): {total_time_spent:.2f} gi·ªù")
                print(f"‚Ä¢ T·ªïng th·ªùi gian ti·∫øt ki·ªám (ch·ªâ t√≠nh task ho√†n th√†nh): {total_time_saved:.2f} gi·ªù ({saving_percentage:.1f}%)")
                
                # Thu th·∫≠p s·ªë li·ªáu th·ªëng k√™ t·ªïng h·ª£p
                total_tasks = len(all_tasks)
                total_worklog_entries = sum(len(task.get('worklogs', [])) for task in all_tasks)
                tasks_with_worklog_count = sum(1 for task in all_tasks if task.get('worklogs', []))
                
                # T·ªïng h·ª£p th·ªëng k√™ to√†n d·ª± √°n
                print(f"\n\nüìä TH·ªêNG K√ä T·ªîNG H·ª¢P TO√ÄN D·ª∞ √ÅN:")
                print(f"  - T·ªïng s·ªë nh√¢n vi√™n: {len(df)}")
                print(f"  - T·ªïng s·ªë task: {total_tasks}")
                print(f"  - T·ªïng s·ªë task c√≥ worklog: {tasks_with_worklog_count} ({tasks_with_worklog_count/total_tasks*100:.1f}% n·∫øu c√≥ task)")
                print(f"  - T·ªïng s·ªë b·∫£n ghi worklog: {total_worklog_entries}")
                print(f"  - T·ªïng s·ªë gi·ªù worklog: {sum(employee_worklog_hours.values()):.2f} gi·ªù")

                # Th·ªëng k√™ chi ti·∫øt theo d·ª± √°n v·ªõi ƒë·ªãnh d·∫°ng b·∫£ng
                if all_tasks:
                    # print("\nüìä TH·ªêNG K√ä CHI TI·∫æT THEO D·ª∞ √ÅN:")
                    
                    # Thu th·∫≠p d·ªØ li·ªáu theo d·ª± √°n
                    project_stats = {}
                    for task in all_tasks:
                        project = task.get('project', 'Unknown')
                        employee = task.get('employee_name', 'Unknown')
                        has_worklog = bool(task.get('worklogs', []))
                        total_hours = task.get('total_hours', 0)
                        estimated_hours = task.get('original_estimate_hours', 0) or 0
                        
                        if project not in project_stats:
                            project_stats[project] = {
                                'employees': set(),
                                'issues': 0,
                                'issues_with_log': 0,
                                'estimated_hours': 0,
                                'actual_hours': 0,
                            }
                        
                        project_stats[project]['employees'].add(employee)
                        project_stats[project]['issues'] += 1
                        if has_worklog:
                            project_stats[project]['issues_with_log'] += 1
                        project_stats[project]['estimated_hours'] += estimated_hours
                        project_stats[project]['actual_hours'] += total_hours
                    
                    # T√≠nh to√°n c√°c gi√° tr·ªã ph√°i sinh
                    for project, stats in project_stats.items():
                        stats['log_percentage'] = (stats['issues_with_log'] / stats['issues'] * 100) if stats['issues'] > 0 else 0
                        stats['time_saved'] = stats['estimated_hours'] - stats['actual_hours'] if stats['estimated_hours'] > 0 else 0
                        stats['saving_percentage'] = (stats['time_saved'] / stats['estimated_hours'] * 100) if stats['estimated_hours'] > 0 else 0
                    
                    # In ti√™u ƒë·ªÅ b·∫£ng
                    header = "| {:<30} | {:>8} | {:>8} | {:>8} | {:>6} | {:>8} | {:>8} | {:>10} | {:>10} |".format(
                        "D·ª± √°n", "Nh√¢n vi√™n", "Issues", "C√≥ log", "%Log", "∆Ø·ªõc t√≠nh", "Th·ª±c t·∫ø", "Ti·∫øt ki·ªám", "%Ti·∫øt ki·ªám"
                    )
                    separator = "|-{:-<30}-|-{:->8}-|-{:->8}-|-{:->8}-|-{:->6}-|-{:->8}-|-{:->8}-|-{:->10}-|-{:->10}-|".format(
                        "", "", "", "", "", "", "", "", ""
                    )
                    
                    # print(separator)
                    # print(header)
                    # print(separator)
                    
                    # In d·ªØ li·ªáu t·ª´ng d·ª± √°n
                    sorted_projects = sorted(project_stats.items(), key=lambda x: len(x[1]['employees']), reverse=True)
                    for project, stats in sorted_projects:
                        row = "| {:<30} | {:>8} | {:>8} | {:>8} | {:>6.1f} | {:>8.1f} | {:>8.1f} | {:>10.1f} | {:>10.1f} |".format(
                            project[:30],
                            len(stats['employees']),
                            stats['issues'],
                            stats['issues_with_log'],
                            stats['log_percentage'],
                            stats['estimated_hours'],
                            stats['actual_hours'],
                            stats['time_saved'],
                            stats['saving_percentage']
                        )
                        # print(row)
                    
                    print(separator)
                    
                    # In t·ªïng c·ªông
                    total_employees = len(set().union(*[stats['employees'] for stats in project_stats.values()]))
                    total_issues = sum(stats['issues'] for stats in project_stats.values())
                    total_issues_with_log = sum(stats['issues_with_log'] for stats in project_stats.values())
                    total_log_percentage = (total_issues_with_log / total_issues * 100) if total_issues > 0 else 0
                    total_estimated = sum(stats['estimated_hours'] for stats in project_stats.values())
                    total_actual = sum(stats['actual_hours'] for stats in project_stats.values())
                    total_saved = total_estimated - total_actual
                    total_saving_percentage = (total_saved / total_estimated * 100) if total_estimated > 0 else 0
                    
                    total_row = "| {:<30} | {:>8} | {:>8} | {:>8} | {:>6.1f} | {:>8.1f} | {:>8.1f} | {:>10.1f} | {:>10.1f} |".format(
                        "T·ªîNG C·ªòNG",
                        total_employees,
                        total_issues,
                        total_issues_with_log,
                        total_log_percentage,
                        total_estimated,
                        total_actual,
                        total_saved,
                        total_saving_percentage
                    )
                    # print(total_row)
                    print(separator)
                    
                    # TH√äM TH·ªêNG K√ä T·ªîNG H·ª¢P THEO NH√ÇN VI√äN
                    # print("\n\nüìä TH·ªêNG K√ä T·ªîNG H·ª¢P THEO NH√ÇN VI√äN:")
                    
                    # Thu th·∫≠p d·ªØ li·ªáu th·ªëng k√™ nh√¢n vi√™n
                    employee_summary = {}
                    
                    for task in all_tasks:
                        employee = task.get('employee_name', 'Unknown')
                        email = task.get('employee_email', '')
                        has_worklog = bool(task.get('worklogs', []))
                        total_hours = task.get('total_hours', 0)
                        estimated_hours = task.get('original_estimate_hours', 0) or 0
                        
                        if employee not in employee_summary:
                            employee_summary[employee] = {
                                'email': email,
                                'issues': 0,
                                'issues_with_log': 0,
                                'estimated_hours': 0,
                                'actual_hours': 0,
                                'projects': set()
                            }
                        
                        employee_summary[employee]['issues'] += 1
                        if has_worklog:
                            employee_summary[employee]['issues_with_log'] += 1
                        employee_summary[employee]['estimated_hours'] += estimated_hours
                        employee_summary[employee]['actual_hours'] += total_hours
                        employee_summary[employee]['projects'].add(task.get('project', 'Unknown'))
                    
                    # T√≠nh to√°n c√°c gi√° tr·ªã ph√°i sinh
                    for employee, stats in employee_summary.items():
                        stats['log_percentage'] = (stats['issues_with_log'] / stats['issues'] * 100) if stats['issues'] > 0 else 0
                        stats['time_saved'] = stats['estimated_hours'] - stats['actual_hours'] if stats['estimated_hours'] > 0 else 0
                        stats['saving_percentage'] = (stats['time_saved'] / stats['estimated_hours'] * 100) if stats['estimated_hours'] > 0 else 0
                    
                    # In b·∫£ng th·ªëng k√™ t·ªïng h·ª£p nh√¢n vi√™n
                    # header = "| {:<25} | {:<30} | {:>6} | {:>8} | {:>6} | {:>8} | {:>8} | {:>10} | {:>10} | {:>6} |".format(
                    #     "Nh√¢n vi√™n", "Email", "D·ª± √°n", "Issues", "%Log", "∆Ø·ªõc t√≠nh", "Th·ª±c t·∫ø", "Ti·∫øt ki·ªám", "%Ti·∫øt ki·ªám", "Hi·ªáu su·∫•t"
                    # )
                    # separator = "|-{:-<25}-|-{:-<30}-|-{:->6}-|-{:->8}-|-{:->6}-|-{:->8}-|-{:->8}-|-{:->10}-|-{:->10}-|-{:->6}-|".format(
                    #     "", "", "", "", "", "", "", "", "", ""
                    # )
                    
                    # print(separator)
                    # print(header)
                    # print(separator)
                    
                    # S·∫Øp x·∫øp nh√¢n vi√™n theo s·ªë l∆∞·ª£ng issue t·ª´ cao ƒë·∫øn th·∫•p
                    sorted_employees = sorted(employee_summary.items(), key=lambda x: x[1]['issues'], reverse=True)
                    
                    for employee, stats in sorted_employees:
                        # T√≠nh ƒëi·ªÉm hi·ªáu su·∫•t: d·ª±a tr√™n t·ª∑ l·ªá ti·∫øt ki·ªám th·ªùi gian v√† t·ª∑ l·ªá task c√≥ log
                        performance = 0
                        if stats['estimated_hours'] > 0:
                            # ƒêi·ªÉm th∆∞·ªüng khi ti·∫øt ki·ªám ƒë∆∞·ª£c th·ªùi gian
                            saving_factor = stats['saving_percentage'] / 100 if stats['saving_percentage'] > 0 else 0
                            # ƒêi·ªÉm th∆∞·ªüng khi c√≥ t·ª∑ l·ªá log cao
                            log_factor = stats['log_percentage'] / 100
                            
                            # Hi·ªáu su·∫•t t·ª´ 0-100
                            performance = min(100, (saving_factor * 0.7 + log_factor * 0.3) * 100)
                        
                        # row = "| {:<25} | {:<30} | {:>6} | {:>8} | {:>6.1f} | {:>8.1f} | {:>8.1f} | {:>10.1f} | {:>10.1f} | {:>6.1f} |".format(
                        #     employee[:25],
                        #     stats['email'][:30],
                        #     len(stats['projects']),
                        #     stats['issues'],
                        #     stats['log_percentage'],
                        #     stats['estimated_hours'],
                        #     stats['actual_hours'],
                        #     stats['time_saved'],
                        #     stats['saving_percentage'],
                        #     performance
                        # )
                        # print(row)
                    
                    print(separator)
                    
                    # T√≠nh t·ªïng c·ªông
                    total_employees = len(employee_summary)
                    total_projects = len(set().union(*[stats['projects'] for stats in employee_summary.values()]))
                    total_issues = sum(stats['issues'] for stats in employee_summary.values())
                    total_issues_with_log = sum(stats['issues_with_log'] for stats in employee_summary.values())
                    total_log_percentage = (total_issues_with_log / total_issues * 100) if total_issues > 0 else 0
                    total_estimated = sum(stats['estimated_hours'] for stats in employee_summary.values())
                    total_actual = sum(stats['actual_hours'] for stats in employee_summary.values())
                    total_saved = total_estimated - total_actual
                    total_saving_percentage = (total_saved / total_estimated * 100) if total_estimated > 0 else 0
                    
                    # T√≠nh hi·ªáu su·∫•t trung b√¨nh
                    avg_performance = sum(
                        min(100, ((stats['saving_percentage'] / 100 if stats['saving_percentage'] > 0 else 0) * 0.7 + 
                        (stats['log_percentage'] / 100) * 0.3) * 100) 
                        for stats in employee_summary.values() if stats['estimated_hours'] > 0
                    ) / len([stats for stats in employee_summary.values() if stats['estimated_hours'] > 0]) if employee_summary else 0
                    
                    # total_row = "| {:<25} | {:<30} | {:>6} | {:>8} | {:>6.1f} | {:>8.1f} | {:>8.1f} | {:>10.1f} | {:>10.1f} | {:>6.1f} |".format(
                    #     f"T·ªîNG C·ªòNG ({total_employees})",
                    #     "",
                    #     total_projects,
                    #     total_issues,
                    #     total_log_percentage,
                    #     total_estimated,
                    #     total_actual,
                    #     total_saved,
                    #     total_saving_percentage,
                    #     avg_performance
                    # )
                    # print(total_row)
                    # print(separator)
                    
                    # Th·ªëng k√™ d·ª± √°n theo t·ª´ng nh√¢n vi√™n
                    # print("\n\nüìä TH·ªêNG K√ä D·ª∞ √ÅN THEO T·ª™NG NH√ÇN VI√äN:")
                    
                    # T·ªï ch·ª©c d·ªØ li·ªáu theo nh√¢n vi√™n v√† d·ª± √°n
                    employee_project_stats = {}
                    
                    for task in all_tasks:
                        employee = task.get('employee_name', 'Unknown')
                        email = task.get('employee_email', '')
                        project = task.get('project', 'Unknown')
                        has_worklog = bool(task.get('worklogs', []))
                        total_hours = task.get('total_hours', 0)
                        estimated_hours = task.get('original_estimate_hours', 0) or 0
                        
                        # T·∫°o key nh√¢n vi√™n n·∫øu ch∆∞a c√≥
                        if employee not in employee_project_stats:
                            employee_project_stats[employee] = {
                                'email': email,
                                'projects': {}
                            }
                        
                        # T·∫°o key d·ª± √°n cho nh√¢n vi√™n n·∫øu ch∆∞a c√≥
                        if project not in employee_project_stats[employee]['projects']:
                            employee_project_stats[employee]['projects'][project] = {
                                'issues': 0,
                                'issues_with_log': 0,
                                'estimated_hours': 0,
                                'actual_hours': 0,
                            }
                        
                        # C·∫≠p nh·∫≠t th·ªëng k√™
                        employee_project_stats[employee]['projects'][project]['issues'] += 1
                        if has_worklog:
                            employee_project_stats[employee]['projects'][project]['issues_with_log'] += 1
                        employee_project_stats[employee]['projects'][project]['estimated_hours'] += estimated_hours
                        employee_project_stats[employee]['projects'][project]['actual_hours'] += total_hours
                    
                    # T√≠nh to√°n c√°c gi√° tr·ªã ph√°i sinh cho t·ª´ng d·ª± √°n c·ªßa nh√¢n vi√™n
                    for employee, data in employee_project_stats.items():
                        for project, stats in data['projects'].items():
                            stats['log_percentage'] = (stats['issues_with_log'] / stats['issues'] * 100) if stats['issues'] > 0 else 0
                            stats['time_saved'] = stats['estimated_hours'] - stats['actual_hours'] if stats['estimated_hours'] > 0 else 0
                            stats['saving_percentage'] = (stats['time_saved'] / stats['estimated_hours'] * 100) if stats['estimated_hours'] > 0 else 0
                    
                    # In th·ªëng k√™ cho t·ª´ng nh√¢n vi√™n
                    sorted_employees = sorted(employee_project_stats.items(), key=lambda x: x[0])
                    
                    for employee, data in sorted_employees:
                        email = data['email']
                        # print(f"\nüë§ NH√ÇN VI√äN: {employee} ({email})")
                        
                        # In ti√™u ƒë·ªÅ b·∫£ng
                        # header = "| {:<30} | {:>8} | {:>8} | {:>6} | {:>8} | {:>8} | {:>10} | {:>10} |".format(
                        #     "D·ª± √°n", "Issues", "C√≥ log", "%Log", "∆Ø·ªõc t√≠nh", "Th·ª±c t·∫ø", "Ti·∫øt ki·ªám", "%Ti·∫øt ki·ªám"
                        # )
                        # separator = "|-{:-<30}-|-{:->8}-|-{:->8}-|-{:->6}-|-{:->8}-|-{:->8}-|-{:->10}-|-{:->10}-|".format(
                        #     "", "", "", "", "", "", "", ""
                        # )
                        
                        # print(separator)
                        # print(header)
                        # print(separator)
                        
                        # In d·ªØ li·ªáu t·ª´ng d·ª± √°n c·ªßa nh√¢n vi√™n
                        sorted_projects = sorted(data['projects'].items(), key=lambda x: x[1]['issues'], reverse=True)
                        
                        for project, stats in sorted_projects:
                            # row = "| {:<30} | {:>8} | {:>8} | {:>6.1f} | {:>8.1f} | {:>8.1f} | {:>10.1f} | {:>10.1f} |".format(
                            #     project[:30],
                            #     stats['issues'],
                            #     stats['issues_with_log'],
                            #     stats['log_percentage'],
                            #     stats['estimated_hours'],
                            #     stats['actual_hours'],
                            #     stats['time_saved'],
                            #     stats['saving_percentage']
                            # )
                            # print(row)
                            pass
                        
                        # print(separator)
                        
                        # In t·ªïng c·ªông cho nh√¢n vi√™n
                        total_issues = sum(stats['issues'] for stats in data['projects'].values())
                        total_issues_with_log = sum(stats['issues_with_log'] for stats in data['projects'].values())
                        total_log_percentage = (total_issues_with_log / total_issues * 100) if total_issues > 0 else 0
                        total_estimated = sum(stats['estimated_hours'] for stats in data['projects'].values())
                        total_actual = sum(stats['actual_hours'] for stats in data['projects'].values())
                        total_saved = total_estimated - total_actual
                        total_saving_percentage = (total_saved / total_estimated * 100) if total_estimated > 0 else 0
                        
                        # total_row = "| {:<30} | {:>8} | {:>8} | {:>6.1f} | {:>8.1f} | {:>8.1f} | {:>10.1f} | {:>10.1f} |".format(
                        #     "T·ªîNG C·ªòNG",
                        #     total_issues,
                        #     total_issues_with_log,
                        #     total_log_percentage,
                        #     total_estimated,
                        #     total_actual,
                        #     total_saved,
                        #     total_saving_percentage
                        # )
                        # print(total_row)
                        # print(separator)
                else:
                    print("\n‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y task n√†o trong kho·∫£ng th·ªùi gian n√†y")
        
        # Ghi log th·ªùi gian k·∫øt th√∫c
        with open(log_file, 'a', encoding='utf-8') as f:
            f.write(f"\n[{datetime.now().strftime('%d/%m/%Y %H:%M:%S')}] Ho√†n th√†nh to√†n b·ªô qu√° tr√¨nh\n")
            f.write(f"T·ªïng s·ªë nh√¢n vi√™n ƒë√£ x·ª≠ l√Ω: {len(df)}\n")
            f.write(f"T·ªïng s·ªë nh√¢n vi√™n c√≥ task: {len([count for count in employee_task_counts.values() if count > 0])}\n")
            f.write(f"T·ªïng s·ªë task: {len(all_tasks)}\n")
            f.write(f"T·ªïng s·ªë gi·ªù log work: {sum(employee_worklog_hours.values()):.2f} gi·ªù\n")
            
        print(f"\nüìã ƒê√£ ghi log qu√° tr√¨nh x·ª≠ l√Ω: {log_file}")
        print(f"\n‚úÖ Ho√†n th√†nh qu√° tr√¨nh x·ª≠ l√Ω!")
        
        # Th·ªëng k√™ top 5 nh√¢n vi√™n c√≥ nhi·ªÅu task nh∆∞ng kh√¥ng logwork
        # print("\n\nüìä TOP 10 NH√ÇN VI√äN C√ì NHI·ªÄU TASK KH√îNG LOGWORK:")
        
        # T√≠nh t·ª∑ l·ªá task kh√¥ng logwork
        for name, stats in employee_detailed_stats.items():
            if stats["total_tasks"] > 0:
                stats["no_logwork_ratio"] = stats["tasks_without_logwork"] / stats["total_tasks"] * 100
            else:
                stats["no_logwork_ratio"] = 0
        
        # S·∫Øp x·∫øp theo s·ªë l∆∞·ª£ng task kh√¥ng logwork
        sorted_by_no_logwork = sorted(
            [item for item in employee_detailed_stats.items() if item[1]["total_tasks"] >= 3],  # Ch·ªâ x√©t nh√¢n vi√™n c√≥ √≠t nh·∫•t 3 task
            key=lambda x: x[1]["tasks_without_logwork"], 
            reverse=True
        )
        
        # In ti√™u ƒë·ªÅ
        print(f"{'T√™n nh√¢n vi√™n':<30}{'T·ªïng task':<15}{'Kh√¥ng logwork':<15}{'T·ª∑ l·ªá kh√¥ng logwork':<20}")
        print("-" * 80)
        
        # In 10 nh√¢n vi√™n ƒë·∫ßu ti√™n
        for employee_name, stats in sorted_by_no_logwork[:10]:
            print(f"{employee_name[:28]:<30}{stats['total_tasks']:<15}{stats['tasks_without_logwork']:<15}{stats['no_logwork_ratio']:.1f}%")
        
        # S·∫Øp x·∫øp theo t·ª∑ l·ªá kh√¥ng logwork (cho nh√¢n vi√™n c√≥ √≠t nh·∫•t 3 task)
        # print("\n\nüìä TOP 10 NH√ÇN VI√äN C√ì T·ª∂ L·ªÜ TASK KH√îNG LOGWORK CAO NH·∫§T:")
        sorted_by_ratio = sorted(
            [item for item in employee_detailed_stats.items() if item[1]["total_tasks"] >= 3],  # Ch·ªâ x√©t nh√¢n vi√™n c√≥ √≠t nh·∫•t 3 task
            key=lambda x: x[1]["no_logwork_ratio"], 
            reverse=True
        )
        
        # In ti√™u ƒë·ªÅ
        print(f"{'T√™n nh√¢n vi√™n':<30}{'T·ªïng task':<15}{'Kh√¥ng logwork':<15}{'T·ª∑ l·ªá kh√¥ng logwork':<20}")
        print("-" * 80)
        
        # In 10 nh√¢n vi√™n ƒë·∫ßu ti√™n
        for employee_name, stats in sorted_by_ratio[:10]:
            print(f"{employee_name[:28]:<30}{stats['total_tasks']:<15}{stats['tasks_without_logwork']:<15}{stats['no_logwork_ratio']:.1f}%")
        
        # Th·ªëng k√™ theo component
        component_task_counts = {}
        
        for task in all_tasks:
            if task.get('components'):
                for component in task.get('components'):
                    if component in component_task_counts:
                        component_task_counts[component] += 1
                    else:
                        component_task_counts[component] = 1
            else:
                if "Kh√¥ng c√≥ component" in component_task_counts:
                    component_task_counts["Kh√¥ng c√≥ component"] += 1
                else:
                    component_task_counts["Kh√¥ng c√≥ component"] = 1
        
        # T·∫°o b√°o c√°o th·ªëng k√™
        with open(report_file, 'w', encoding='utf-8') as f:
            # ... existing code ...
            
            # Th·ªëng k√™ theo component
            f.write("TH·ªêNG K√ä THEO COMPONENT:\n")
            for component, count in sorted(component_task_counts.items(), key=lambda x: x[1], reverse=True):
                f.write(f"‚Ä¢ {component}: {count} task ({count/len(all_tasks)*100:.1f}%)\n")
            f.write("\n")
        
        # T·∫°o b√°o c√°o theo d·ª± √°n th·ª±c t·∫ø
        print("\n\nüìä T·∫†O B√ÅO C√ÅO THEO D·ª∞ √ÅN TH·ª∞C T·∫æ:")
        
        # L·∫•y danh s√°ch c√°c d·ª± √°n th·ª±c t·∫ø
        actual_projects = {}
        
        for task in all_tasks:
            actual_project = task.get('actual_project', task.get('project', 'Unknown'))
            if actual_project not in actual_projects:
                actual_projects[actual_project] = 0
            actual_projects[actual_project] += 1
        
        # In danh s√°ch d·ª± √°n th·ª±c t·∫ø v√† s·ªë l∆∞·ª£ng task
        print(f"\nüìä T√åM TH·∫§Y {len(actual_projects)} D·ª∞ √ÅN TH·ª∞C T·∫æ:")
        print("=" * 80)
        for project, count in sorted(actual_projects.items(), key=lambda x: x[1], reverse=True):
            print(f"üîπ {project}: {count} task ({count/len(all_tasks)*100:.1f}%)")
        print("=" * 80)
        
        # TH√äM DEBUG: Hi·ªÉn th·ªã task keys c·ªßa t·ª´ng project
        # print(f"\nüîç CHI TI·∫æT TASK KEYS THEO D·ª∞ √ÅN:")
        print("=" * 80)
        for project_name in sorted(actual_projects.keys()):
            project_tasks = [task for task in all_tasks if task.get('actual_project', task.get('project', 'Unknown')) == project_name]
            task_keys = [task.get('key', 'Unknown') for task in project_tasks[:5]]  # Ch·ªâ hi·ªÉn th·ªã 5 task ƒë·∫ßu
            remaining = len(project_tasks) - 5
            if remaining > 0:
                task_keys.append(f"... v√† {remaining} task kh√°c")
            print(f"üî∏ {project_name} ({len(project_tasks)} task):")
            print(f"   üìã Tasks: {', '.join(task_keys)}")
        print("=" * 80)
        
        # KI·ªÇM TRA: Debug t·∫°i sao PKT kh√¥ng ƒë∆∞·ª£c g·ªôp chung
        if "PKT" in actual_projects:
            # print(f"\nüîç DEBUG: PKT xu·∫•t hi·ªán v·ªõi {actual_projects['PKT']} task nh∆∞ d·ª± √°n ri√™ng bi·ªát!")
            print("‚ùå V·∫§N ƒê·ªÄ: PKT ph·∫£i ƒë∆∞·ª£c g·ªôp v√†o '[Project] Kho T·ªïng + PIM' ch·ª© kh√¥ng ph·∫£i t√°ch ri√™ng")
            print("üîß Ki·ªÉm tra logic get_actual_project() c√≥ ho·∫°t ƒë·ªông ƒë√∫ng kh√¥ng...")
            
            # T·∫°m th·ªùi lo·∫°i b·ªè PKT ƒë·ªÉ kh√¥ng t·∫°o b√°o c√°o sai
            del actual_projects["PKT"]
            print("‚ö†Ô∏è T·∫°m th·ªùi lo·∫°i b·ªè PKT kh·ªèi danh s√°ch, c·∫ßn s·ª≠a logic get_actual_project()")
            
        if "IMS" in actual_projects:
            # print(f"\nüîç DEBUG: IMS xu·∫•t hi·ªán v·ªõi {actual_projects['IMS']} task - ƒë√£ b·ªã lo·∫°i b·ªè logic t·∫°o ri√™ng")
            del actual_projects["IMS"]
            print("‚úÖ ƒê√£ lo·∫°i b·ªè IMS kh·ªèi danh s√°ch t·∫°o b√°o c√°o ri√™ng")
        
        # T·∫°o th∆∞ m·ª•c cho b√°o c√°o d·ª± √°n
        project_reports_dir = os.path.join(os.path.dirname(report_file), "project_reports")
        os.makedirs(project_reports_dir, exist_ok=True)
        
        # T·∫°o b√°o c√°o cho t·ª´ng d·ª± √°n
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        success_count = 0
        
        
        for project_name, count in actual_projects.items():
            # KI·ªÇM TRA CU·ªêI C√ôNG: Kh√¥ng t·∫°o b√°o c√°o ri√™ng cho IMS
            if project_name == "IMS":
                print(f"üö´ C·∫¢NH B√ÅO: Ph√°t hi·ªán IMS trong danh s√°ch t·∫°o b√°o c√°o - B·ªé QUA!")
                continue
                
            # B·ªè qua c√°c d·ª± √°n c√≥ √≠t h∆°n 2 task
            if count < 2:
                print(f"‚ö†Ô∏è B·ªè qua d·ª± √°n {project_name} v√¨ ch·ªâ c√≥ {count} task")
                continue
                
            # T·∫°o t√™n file b√°o c√°o
            safe_project_name = re.sub(r'[^a-zA-Z0-9_]', '_', project_name)
            project_report_file = os.path.join(project_reports_dir, f"{safe_project_name}_{timestamp}.txt")
            
            # T·∫°o b√°o c√°o d·ª± √°n
            if create_project_report(project_name, all_tasks, employee_detailed_stats, project_report_file):
                success_count += 1
        
        print(f"‚úÖ ƒê√£ t·∫°o {success_count}/{len(actual_projects)} b√°o c√°o d·ª± √°n trong th∆∞ m·ª•c: {project_reports_dir}")
            
        # T·∫°o b√°o c√°o t·ªïng h·ª£p cho t·∫•t c·∫£ c√°c d·ª± √°n
        summary_report_file = os.path.join(project_reports_dir, f"all_projects_summary_{timestamp}.txt")
        summary_csv_file = os.path.join(project_reports_dir, f"all_projects_summary_{timestamp}.csv")
        
        project_stats_for_comparison = create_projects_summary_report(all_tasks, summary_report_file, summary_csv_file)
        
        # Ki·ªÉm tra t√≠nh nh·∫•t qu√°n gi·ªØa b√°o c√°o t·ªïng h·ª£p v√† b√°o c√°o chi ti·∫øt d·ª± √°n
        if project_stats_for_comparison:
            # L·∫•y t·∫•t c·∫£ c√°c file trong th∆∞ m·ª•c, ngo·∫°i tr·ª´ file b√°o c√°o t·ªïng h·ª£p
            project_report_files = [os.path.join(project_reports_dir, f) for f in os.listdir(project_reports_dir) 
                                    if not f.startswith("all_projects_summary")]
            
            # Ki·ªÉm tra t√≠nh nh·∫•t qu√°n
            is_consistent = check_consistency(project_stats_for_comparison, project_report_files)
            
            if not is_consistent:
                print("\n‚ö†Ô∏è C·∫ßn ki·ªÉm tra l·∫°i b√°o c√°o chi ti·∫øt d·ª± √°n v√† t·ªïng h·ª£p!")
            else:
                print("\n‚úÖ T·∫•t c·∫£ b√°o c√°o ƒë·ªÅu nh·∫•t qu√°n!")
        
        # ƒê·ªìng b·ªô h√≥a b√°o c√°o t·ªïng h·ª£p v√† b√°o c√°o chi ti·∫øt d·ª± √°n
       #synchronize_reports(all_tasks, project_reports_dir, timestamp)
        
    except Exception as e:
        print(f"‚ùå L·ªói khi x·ª≠ l√Ω: {str(e)}")
        import traceback
        traceback.print_exc()

def get_update_reason(issue_key, jira_url, username, password, assignee_name=None, assignee_updates_only=False, status_updates_only=False):
    """
    L·∫•y l√Ω do c·∫≠p nh·∫≠t (changelog) cho issue v√† th√¥ng tin ng∆∞·ªùi c·∫≠p nh·∫≠t cu·ªëi c√πng
    
    Args:
        issue_key (str): M√£ issue c·∫ßn l·∫•y th√¥ng tin
        jira_url (str): URL c·ªßa Jira
        username (str): T√™n ƒëƒÉng nh·∫≠p Jira
        password (str): M·∫≠t kh·∫©u Jira
        assignee_name (str, optional): T√™n c·ªßa ng∆∞·ªùi ƒë∆∞·ª£c g√°n task
        assignee_updates_only (bool, optional): True n·∫øu ch·ªâ l·∫•y c·∫≠p nh·∫≠t t·ª´ ng∆∞·ªùi ƒë∆∞·ª£c g√°n
        status_updates_only (bool, optional): True n·∫øu ch·ªâ l·∫•y c·∫≠p nh·∫≠t thay ƒë·ªïi tr·∫°ng th√°i do ch√≠nh assignee th·ª±c hi·ªán
        
    Returns:
        dict: Th√¥ng tin l√Ω do c·∫≠p nh·∫≠t v√† ng∆∞·ªùi c·∫≠p nh·∫≠t cu·ªëi c√πng
    """
    # Kh·ªüi t·∫°o bi·∫øn k·∫øt qu·∫£ ngay t·ª´ ƒë·∫ßu
    reasons = []
    last_updater = None
    last_update_time = None
    last_update_time_formatted = ""
    main_update_reason = "Kh√¥ng x√°c ƒë·ªãnh"  # L√Ω do ch√≠nh
    update_category = "unknown"  # Lo·∫°i c·∫≠p nh·∫≠t
    
    # C√°c tr∆∞·ªùng c·∫≠p nh·∫≠t c·∫ßn b·ªè qua
    ignore_update_fields = ["fixVersions", "Fix Version", "Sprint", "RemoteIssueLink", "components", "Fix Version"]
    
    try:
        url = f"{jira_url}/rest/api/2/issue/{issue_key}?expand=changelog"
        response = requests.get(
            url,
            auth=HTTPBasicAuth(username, password),
            headers={"Accept": "application/json"},
            timeout=30
        )
        
        if response.status_code != 200:
            return {
                "reasons": [], 
                "last_updater": None, 
                "last_update_time": "",
                "main_update_reason": "L·ªói k·∫øt n·ªëi",
                "update_category": "error"
            }
        
        data = response.json()
        histories = data.get("changelog", {}).get("histories", [])
        
        if not histories:
            return {
                "reasons": ["Kh√¥ng c√≥ l·ªãch s·ª≠ c·∫≠p nh·∫≠t cho issue n√†y"], 
                "last_updater": None, 
                "last_update_time": "",
                "main_update_reason": "Kh√¥ng c√≥ l·ªãch s·ª≠ c·∫≠p nh·∫≠t",
                "update_category": "no_history"
            }
        
        # S·∫Øp x·∫øp l·ªãch s·ª≠ theo th·ªùi gian t·ª´ m·ªõi ƒë·∫øn c≈©
        sorted_histories = sorted(histories, key=lambda x: x.get("created", ""), reverse=True)
        
        index = 0
        found_significant_update = False
        
        # T√¨m c·∫≠p nh·∫≠t c√≥ √Ω nghƒ©a (kh√¥ng ph·∫£i ch·ªâ l√† thay ƒë·ªïi Fix Version ho·∫∑c Sprint)
        while index < len(sorted_histories) and not found_significant_update:
            history = sorted_histories[index]
            items = history.get("items", [])
            
            # N·∫øu ch·ªâ l·∫•y c·∫≠p nh·∫≠t c·ªßa ng∆∞·ªùi ƒë∆∞·ª£c g√°n task
            if assignee_updates_only and assignee_name:
                updater_name = history.get("author", {}).get("displayName", "")
                if updater_name != assignee_name:
                    index += 1
                    continue
            
            # N·∫øu ch·ªâ l·∫•y c·∫≠p nh·∫≠t thay ƒë·ªïi tr·∫°ng th√°i
            if status_updates_only:
                has_status_change = False
                for item in items:
                    if item.get("field", "").lower() == "status":
                        has_status_change = True
                        break
                
                # N·∫øu kh√¥ng c√≥ thay ƒë·ªïi status, b·ªè qua c·∫≠p nh·∫≠t n√†y
                if not has_status_change:
                    index += 1
                    continue
                
                # Ki·ªÉm tra xem ng∆∞·ªùi c·∫≠p nh·∫≠t status c√≥ ph·∫£i l√† assignee kh√¥ng
                updater_name = history.get("author", {}).get("displayName", "")
                if assignee_name and updater_name != assignee_name:
                    # Ng∆∞·ªùi c·∫≠p nh·∫≠t status kh√¥ng ph·∫£i assignee, b·ªè qua
                    index += 1
                    continue
                else:
                    found_significant_update = True
            else:
                # Ki·ªÉm tra xem l·ªãch s·ª≠ c·∫≠p nh·∫≠t n√†y c√≥ ch·ª©a c√°c tr∆∞·ªùng quan tr·ªçng kh√¥ng
                only_ignorable_fields = True
                for item in items:
                    if item.get("field") not in ignore_update_fields:
                        only_ignorable_fields = False
                        break
                
                # N·∫øu kh√¥ng ch·ªâ ch·ª©a c√°c tr∆∞·ªùng c·∫ßn b·ªè qua, ƒë√°nh d·∫•u l√† ƒë√£ t√¨m th·∫•y c·∫≠p nh·∫≠t c√≥ √Ω nghƒ©a
                if not only_ignorable_fields or len(items) == 0:
                    found_significant_update = True
                else:
                    index += 1  # Chuy·ªÉn sang c·∫≠p nh·∫≠t ti·∫øp theo
        
        # L·∫•y th√¥ng tin c·∫≠p nh·∫≠t quan tr·ªçng nh·∫•t
        if index < len(sorted_histories):
            significant_history = sorted_histories[index]
            last_update_time = significant_history.get("created", "")
            last_updater_info = significant_history.get("author", {})
            last_updater = {
                "name": last_updater_info.get("displayName", ""),
                "email": last_updater_info.get("emailAddress", ""),
                "key": last_updater_info.get("key", "")
            }
            
            # Format th·ªùi gian
            if last_update_time:
                try:
                    last_update_time_dt = datetime.fromisoformat(last_update_time.replace('Z', '+00:00'))
                    last_update_time_formatted = last_update_time_dt.strftime('%d/%m/%Y %H:%M')
                except ValueError as e:
                    print(f"‚ö†Ô∏è L·ªói ƒë·ªãnh d·∫°ng th·ªùi gian cho issue {issue_key}: {e}")
                    last_update_time_formatted = last_update_time
            else:
                last_update_time_formatted = ""
            
            # Ph√¢n t√≠ch v√† ph√¢n lo·∫°i lo·∫°i c·∫≠p nh·∫≠t ch√≠nh
            update_category, main_update_reason = _categorize_update(significant_history.get("items", []))
            
            # Th√™m th√¥ng tin t√≥m t·∫Øt v·ªÅ l√Ω do ch√≠nh
            reasons.append(f"üéØ L√Ω do ghi nh·∫≠n task: {main_update_reason}")
            reasons.append(f"üîÑ C·∫≠p nh·∫≠t quan tr·ªçng: {last_update_time_formatted} b·ªüi {last_updater['name']} ({last_updater['email']})")
            
            # Th√™m chi ti·∫øt nh·ªØng thay ƒë·ªïi trong l·∫ßn c·∫≠p nh·∫≠t n√†y
            for item in significant_history.get("items", []):
                field = item.get("field")
                from_str = item.get("fromString", "")
                to_str = item.get("toString", "")
                field_emoji = _get_field_emoji(field)
                reasons.append(f"{field_emoji} Thay ƒë·ªïi: {field} t·ª´ '{from_str}' sang '{to_str}'")
            
            # N·∫øu ƒë√£ b·ªè qua m·ªôt s·ªë c·∫≠p nh·∫≠t tr∆∞·ªõc ƒë√≥, th√¥ng b√°o cho ng∆∞·ªùi d√πng
            if index > 0:
                skipped_updates = sorted_histories[:index]
                reasons.append(f"‚ÑπÔ∏è ƒê√£ b·ªè qua {len(skipped_updates)} c·∫≠p nh·∫≠t ch·ªâ li√™n quan ƒë·∫øn Fix Version, Sprint, RemoteIssueLink ho·∫∑c Components")
                
                # Th√™m th√¥ng tin v·ªÅ c√°c c·∫≠p nh·∫≠t ƒë√£ b·ªè qua
                _add_skipped_updates_info(reasons, skipped_updates)
        
        # Th√™m l·ªãch s·ª≠ c√°c l·∫ßn c·∫≠p nh·∫≠t tr∆∞·ªõc ƒë√≥
        _add_previous_updates_info(reasons, sorted_histories[index+1:])
        
        return {
            "reasons": reasons,
            "last_updater": last_updater,
            "last_update_time": last_update_time_formatted,
            "main_update_reason": main_update_reason,
            "update_category": update_category
        }
        
    except requests.exceptions.RequestException as e:
        print(f"‚ö†Ô∏è L·ªói k·∫øt n·ªëi khi l·∫•y l√Ω do c·∫≠p nh·∫≠t cho issue {issue_key}: {e}")
        return {
            "reasons": [f"L·ªói k·∫øt n·ªëi: {str(e)}"], 
            "last_updater": None, 
            "last_update_time": "",
            "main_update_reason": "L·ªói k·∫øt n·ªëi",
            "update_category": "error"
        }
    except ValueError as e:
        print(f"‚ö†Ô∏è L·ªói x·ª≠ l√Ω d·ªØ li·ªáu JSON cho issue {issue_key}: {e}")
        return {
            "reasons": [f"L·ªói d·ªØ li·ªáu: {str(e)}"], 
            "last_updater": None, 
            "last_update_time": "",
            "main_update_reason": "L·ªói d·ªØ li·ªáu",
            "update_category": "error"
        }
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói kh√¥ng x√°c ƒë·ªãnh khi l·∫•y l√Ω do c·∫≠p nh·∫≠t cho issue {issue_key}: {e}")
        return {
            "reasons": [f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {str(e)}"], 
            "last_updater": None, 
            "last_update_time": "",
            "main_update_reason": "L·ªói kh√¥ng x√°c ƒë·ªãnh",
            "update_category": "error"
        }

def _categorize_update(items):
    """
    Ph√¢n lo·∫°i v√† x√°c ƒë·ªãnh l√Ω do ch√≠nh c·ªßa c·∫≠p nh·∫≠t
    
    Args:
        items (list): Danh s√°ch c√°c thay ƒë·ªïi trong l·∫ßn c·∫≠p nh·∫≠t
        
    Returns:
        tuple: (category, main_reason) - Lo·∫°i c·∫≠p nh·∫≠t v√† l√Ω do ch√≠nh
    """
    if not items:
        return "comment", "Th√™m comment ho·∫∑c c·∫≠p nh·∫≠t kh√°c"
    
    # ∆Øu ti√™n c√°c lo·∫°i thay ƒë·ªïi theo m·ª©c ƒë·ªô quan tr·ªçng
    priority_fields = {
        "status": ("status_change", "Thay ƒë·ªïi tr·∫°ng th√°i"),
        "assignee": ("assignee_change", "Thay ƒë·ªïi ng∆∞·ªùi ƒë∆∞·ª£c g√°n"),
        "resolution": ("resolution_change", "Thay ƒë·ªïi resolution"),
        "priority": ("priority_change", "Thay ƒë·ªïi m·ª©c ƒë·ªô ∆∞u ti√™n"),
        "summary": ("summary_change", "Thay ƒë·ªïi ti√™u ƒë·ªÅ"),
        "description": ("description_change", "C·∫≠p nh·∫≠t m√¥ t·∫£"),
        "comment": ("comment", "Th√™m comment"),
        "attachment": ("attachment", "Th√™m/x√≥a file ƒë√≠nh k√®m"),
        "link": ("link_change", "Thay ƒë·ªïi li√™n k·∫øt"),
        "labels": ("labels_change", "Thay ƒë·ªïi labels"),
        "timespent": ("time_logging", "Ghi nh·∫≠n th·ªùi gian l√†m vi·ªác"),
        "timeestimate": ("estimate_change", "Thay ƒë·ªïi ∆∞·ªõc t√≠nh th·ªùi gian"),
        "duedate": ("duedate_change", "Thay ƒë·ªïi deadline")
    }
    
    # T√¨m thay ƒë·ªïi quan tr·ªçng nh·∫•t
    for item in items:
        field = item.get("field", "").lower()
        from_str = item.get("fromString", "")
        to_str = item.get("toString", "")
        
        # Ki·ªÉm tra t·ª´ng lo·∫°i thay ƒë·ªïi theo th·ª© t·ª± ∆∞u ti√™n
        for priority_field, (category, base_reason) in priority_fields.items():
            if priority_field in field:
                # T√πy ch·ªânh l√Ω do d·ª±a tr√™n lo·∫°i thay ƒë·ªïi c·ª• th·ªÉ
                if priority_field == "status":
                    return category, f"Thay ƒë·ªïi tr·∫°ng th√°i t·ª´ '{from_str}' sang '{to_str}'"
                elif priority_field == "assignee":
                    if not from_str:
                        return category, f"G√°n task cho '{to_str}'"
                    elif not to_str:
                        return category, f"B·ªè g√°n task (tr∆∞·ªõc ƒë√≥: '{from_str}')"
                    else:
                        return category, f"Chuy·ªÉn g√°n t·ª´ '{from_str}' sang '{to_str}'"
                elif priority_field == "resolution":
                    if to_str:
                        return category, f"ƒê·∫∑t resolution: '{to_str}'"
                    else:
                        return category, f"X√≥a resolution (tr∆∞·ªõc ƒë√≥: '{from_str}')"
                elif priority_field == "timespent":
                    return category, f"Ghi nh·∫≠n th·ªùi gian l√†m vi·ªác: {to_str}"
                else:
                    return category, f"{base_reason}: '{from_str}' ‚Üí '{to_str}'"
    
    # N·∫øu kh√¥ng match v·ªõi c√°c tr∆∞·ªùng ∆∞u ti√™n, t·∫°o l√Ω do t·ª´ thay ƒë·ªïi ƒë·∫ßu ti√™n
    first_item = items[0]
    field = first_item.get("field", "")
    from_str = first_item.get("fromString", "")
    to_str = first_item.get("toString", "")
    
    return "other", f"Thay ƒë·ªïi {field}: '{from_str}' ‚Üí '{to_str}'"

def _get_field_emoji(field):
    """
    L·∫•y emoji ph√π h·ª£p cho t·ª´ng lo·∫°i tr∆∞·ªùng
    
    Args:
        field (str): T√™n tr∆∞·ªùng
        
    Returns:
        str: Emoji t∆∞∆°ng ·ª©ng
    """
    field_lower = field.lower()
    
    emoji_map = {
        "status": "üîÑ",
        "assignee": "üë§", 
        "resolution": "‚úÖ",
        "priority": "‚ö°",
        "summary": "üìù",
        "description": "üìã",
        "comment": "üí¨",
        "attachment": "üìé",
        "link": "üîó",
        "labels": "üè∑Ô∏è",
        "timespent": "‚è±Ô∏è",
        "timeestimate": "‚è∞",
        "duedate": "üìÖ",
        "components": "üß©",
        "fixversions": "üîñ",
        "sprint": "üèÉ"
    }
    
    for key, emoji in emoji_map.items():
        if key in field_lower:
            return emoji
    
    return "üìù"  # Default emoji

def _add_skipped_updates_info(reasons, skipped_updates):
    """
    Th√™m th√¥ng tin v·ªÅ c√°c c·∫≠p nh·∫≠t ƒë√£ b·ªè qua
    
    Args:
        reasons (list): Danh s√°ch l√Ω do ƒë·ªÉ th√™m v√†o
        skipped_updates (list): Danh s√°ch c√°c c·∫≠p nh·∫≠t ƒë√£ b·ªè qua
    """
    for history in skipped_updates:
        created = history.get("created", "")
        author = history.get("author", {}).get("displayName", "")
        
        created_date = ""
        if created:
            try:
                created_date = datetime.fromisoformat(created.replace('Z', '+00:00')).strftime('%d/%m/%Y %H:%M')
            except ValueError as e:
                print(f"‚ö†Ô∏è L·ªói ƒë·ªãnh d·∫°ng th·ªùi gian trong l·ªãch s·ª≠ c·∫≠p nh·∫≠t: {e}")
                created_date = created
        
        for item in history.get("items", []):
            field = item.get("field")
            from_str = item.get("fromString", "")
            to_str = item.get("toString", "")
            reasons.append(f"‚è≠Ô∏è {created_date}: {author} thay ƒë·ªïi {field} t·ª´ '{from_str}' sang '{to_str}'")

def _add_previous_updates_info(reasons, previous_histories):
    """
    Th√™m th√¥ng tin v·ªÅ c√°c c·∫≠p nh·∫≠t tr∆∞·ªõc ƒë√≥
    
    Args:
        reasons (list): Danh s√°ch l√Ω do ƒë·ªÉ th√™m v√†o
        previous_histories (list): Danh s√°ch c√°c c·∫≠p nh·∫≠t tr∆∞·ªõc ƒë√≥
    """
    for history in previous_histories:
        created = history.get("created", "")
        author = history.get("author", {}).get("displayName", "")
        
        created_date = ""
        if created:
            try:
                created_date = datetime.fromisoformat(created.replace('Z', '+00:00')).strftime('%d/%m/%Y %H:%M')
            except ValueError as e:
                print(f"‚ö†Ô∏è L·ªói ƒë·ªãnh d·∫°ng th·ªùi gian trong l·ªãch s·ª≠ c·∫≠p nh·∫≠t tr∆∞·ªõc ƒë√≥: {e}")
                created_date = created
        
        for item in history.get("items", []):
            field = item.get("field")
            from_str = item.get("fromString", "")
            to_str = item.get("toString", "")
            reasons.append(f"{created_date}: {author} thay ƒë·ªïi {field} t·ª´ '{from_str}' sang '{to_str}'")

def get_actual_project(jira_project, components):
    """
    X√°c ƒë·ªãnh d·ª± √°n th·ª±c t·∫ø d·ª±a v√†o project Jira v√† components
    
    Args:
        components (list): Danh s√°ch components c·ªßa task
    
    Returns:
        str: T√™n d·ª± √°n th·ª±c t·∫ø
    """
    # DEBUG: Theo d√µi t·∫•t c·∫£ c√°c l·ªùi g·ªçi ƒë·∫øn h√†m n√†y cho PKT v√† WAK
    # if jira_project in ["PKT", "WAK"]:
    #     print(f"üîç get_actual_project() ƒë∆∞·ª£c g·ªçi v·ªõi jira_project='{jira_project}', components={components}")
    
    # Chuy·ªÉn ƒë·ªïi components th√†nh chu·ªói ƒë·ªÉ d·ªÖ t√¨m ki·∫øm
    components_str = ", ".join(components) if components else ""
    
    # N·∫øu project Jira l√† FC, ph√¢n lo·∫°i theo component
    if jira_project == "FC":
        # RSA + RSA eCom + Shipment
        if any(comp in ["LC Offline Q1", "LC RSA Ecom", "B05. RSA/RSA ECOM", "LCD", "Tuning RSA Ecom"] for comp in components):
            return "RSA + RSA eCom + Shipment"
        
        # Payment FPT Pay - GI·ªÆ L·∫†I trong FC theo y√™u c·∫ßu
        if any(comp in ["PaymentTenacy"] for comp in components):
            return "Payment FPT Pay"
        
        # Web App KHLC - GI·ªÆ L·∫†I trong FC theo y√™u c·∫ßu  
        if any(comp.startswith("Ecom - ") for comp in components):
            return "Web App KHLC"
        
        # C√°c logic kh√°c ƒë√£ chuy·ªÉn sang projects ri√™ng:
        # - Noti + Loyalty + Core Cust ‚Üí FSS project  
        # - IMS ‚Üí ƒë√£ lo·∫°i b·ªè
        # - Kho T·ªïng + PIM ‚Üí PKT project
    elif jira_project == "PKT":
        # Kho t·ªïng + PIM - project m·ªõi PKT, kh√¥ng c·∫ßn l·ªçc theo component
        # LU√îN tr·∫£ v·ªÅ t√™n ƒë√£ chu·∫©n h√≥a cho t·∫•t c·∫£ task t·ª´ PKT
        return "[Project] Kho T·ªïng + PIM"
    elif jira_project == "WAK":
        # Web App KHLC - project m·ªõi WAK, kh√¥ng c·∫ßn l·ªçc theo component
        return "Web App KHLC"
    elif jira_project == "PPFP":
        # Payment FPT Pay - project m·ªõi PPFP, kh√¥ng c·∫ßn l·ªçc theo component
        return "Payment FPT Pay"
    elif jira_project == "FSS":
        return "Noti + Loyalty + Core Cust"
    
    # DEBUG: N·∫øu kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c d·ª± √°n c·ª• th·ªÉ
    if jira_project == "PKT":
        # print(f"üö® C·∫¢NH B√ÅO: PKT task v·ªõi components {components} kh√¥ng ƒë∆∞·ª£c x·ª≠ l√Ω ƒë√∫ng, tr·∫£ v·ªÅ m·∫∑c ƒë·ªãnh '[Project] Kho T·ªïng + PIM'")
        return "[Project] Kho T·ªïng + PIM"
    
    if jira_project == "WAK":
        # print(f"üö® C·∫¢NH B√ÅO: WAK task v·ªõi components {components} kh√¥ng ƒë∆∞·ª£c x·ª≠ l√Ω ƒë√∫ng, tr·∫£ v·ªÅ m·∫∑c ƒë·ªãnh 'Web App KHLC'")
        return "Web App KHLC"
    
    # N·∫øu kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c, tr·∫£ v·ªÅ project Jira
    return jira_project

def calculate_saved_time(estimated_hours, actual_hours):
    """
    Chu·∫©n h√≥a c√°ch t√≠nh th·ªùi gian ti·∫øt ki·ªám ƒë·ªÉ ƒë·∫£m b·∫£o s·ª± nh·∫•t qu√°n gi·ªØa c√°c b√°o c√°o
    
    Args:
        estimated_hours (float): T·ªïng th·ªùi gian ∆∞·ªõc t√≠nh (gi·ªù)
        actual_hours (float): T·ªïng th·ªùi gian th·ª±c t·∫ø (gi·ªù)
        
    Returns:
        tuple: (th·ªùi gian ti·∫øt ki·ªám, t·ª∑ l·ªá ti·∫øt ki·ªám %)
    """
    estimated_hours = float(estimated_hours or 0)
    actual_hours = float(actual_hours or 0)
    saved_hours = estimated_hours - actual_hours
    saving_ratio = (saved_hours / estimated_hours * 100) if estimated_hours > 0 else 0
    return saved_hours, saving_ratio

def create_employee_detailed_report(employee_name, employee_email, tasks, output_file):
    """
    T·∫°o b√°o c√°o chi ti·∫øt v·ªÅ task c·ªßa m·ªôt nh√¢n vi√™n v√† l∆∞u v√†o file txt
    
    Args:
        employee_name (str): T√™n nh√¢n vi√™n
        employee_email (str): Email ho·∫∑c t√†i kho·∫£n c·ªßa nh√¢n vi√™n
        tasks (list): Danh s√°ch c√°c task c·ªßa nh√¢n vi√™n
        output_file (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn file b√°o c√°o
    """
    try:
         # C·∫≠p nh·∫≠t tr·∫°ng th√°i logwork cho task cha tr∆∞·ªõc khi t·∫°o b√°o c√°o
        parent_to_children = {}
        for task in tasks:
            if task.get('is_subtask') and task.get('parent_key'):
                parent_key = task.get('parent_key')
                if parent_key not in parent_to_children:
                    parent_to_children[parent_key] = []
                parent_to_children[parent_key].append(task)
        
        # C·∫≠p nh·∫≠t tr·∫°ng th√°i task cha d·ª±a tr√™n task con
        for task in tasks:
            task_key = task.get('key')
            if task_key in parent_to_children:  # N·∫øu task n√†y l√† task cha c√≥ con
                children = parent_to_children[task_key]
                
                # N·∫øu task cha kh√¥ng c√≥ estimate nh∆∞ng c√°c task con c√≥ estimate
                if task.get('original_estimate_hours', 0) == 0:
                    total_child_estimate = sum(child.get('original_estimate_hours', 0) for child in children)
                    if total_child_estimate > 0:
                        # C·∫≠p nh·∫≠t estimate cho task cha t·ª´ t·ªïng estimate c·ªßa c√°c task con
                        task['original_estimate_hours'] = total_child_estimate
                        task['has_estimate'] = True
                        print(f"   ‚ÑπÔ∏è C·∫≠p nh·∫≠t estimate cho task cha {task_key} t·ª´ t·ªïng estimate c·ªßa c√°c task con: {total_child_estimate:.2f}h")
                
                # Ki·ªÉm tra v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i logwork
                if not task.get('has_worklog'):  # N·∫øu task cha ch∆∞a c√≥ log work
                    children_with_logwork = [child for child in children if child.get('has_worklog', False)]
                    if children_with_logwork:  # N·∫øu c√≥ √≠t nh·∫•t m·ªôt task con ƒë√£ log work
                        # ƒê√°nh d·∫•u task cha l√† ƒë√£ log work
                        task['has_worklog'] = True
                        task['has_child_with_logwork'] = True  # Th√™m tr∆∞·ªùng ƒë·ªÉ ƒë√°nh d·∫•u
                        
                        # Quan tr·ªçng: C·∫≠p nh·∫≠t time_saved_hours n·∫øu ƒëang l√† -1 (kh√¥ng c√≥ logwork)
                        if task.get('time_saved_hours', -1) == -1:
                            # T√≠nh t·ªïng th·ªùi gian t·ª´ c√°c task con
                            total_child_time = sum(child.get('total_hours', 0) for child in children_with_logwork)
                            
                            # C·∫≠p nh·∫≠t th·ªùi gian th·ª±c t·∫ø cho task cha t·ª´ t·ªïng th·ªùi gian c·ªßa c√°c task con
                            task['total_hours'] = total_child_time
                            
                            # N·∫øu task cha kh√¥ng c√≥ estimate nh∆∞ng c√°c task con c√≥ estimate
                            if task.get('original_estimate_hours', 0) == 0:
                                # T√≠nh t·ªïng estimate t·ª´ task con
                                total_child_estimate = sum(child.get('original_estimate_hours', 0) for child in children)
                                if total_child_estimate > 0:
                                    # C·∫≠p nh·∫≠t estimate cho task cha
                                    task['original_estimate_hours'] = total_child_estimate
                                    task['has_estimate'] = True
                                    print(f"   ‚ÑπÔ∏è C·∫≠p nh·∫≠t estimate cho task cha {task_key} t·ª´ t·ªïng estimate c·ªßa c√°c task con: {total_child_estimate:.2f}h")
                            
                            # Sau ƒë√≥ t√≠nh time_saved_hours
                            if task.get('original_estimate_hours', 0) > 0:
                                saved_hours, saving_ratio = calculate_saved_time(task.get('original_estimate_hours', 0), total_child_time)
                                task['time_saved_hours'] = saved_hours
                                task['time_saved_percent'] = saving_ratio
                                print(f"   ‚ÑπÔ∏è C·∫≠p nh·∫≠t time_saved_hours cho task cha {task_key} t·ª´ task con: {saved_hours:.2f}h ({saving_ratio:.1f}%)")
                            else:
                                # N·∫øu th·ª±c s·ª± kh√¥ng c√≥ estimate n√†o (c·∫£ cha v√† con ƒë·ªÅu kh√¥ng c√≥)
                                task['time_saved_hours'] = -2  # ƒê√°nh d·∫•u ƒë·∫∑c bi·ªát: c√≥ logwork nh∆∞ng kh√¥ng c√≥ estimate
                                print(f"   ‚ÑπÔ∏è Task cha {task_key} ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u c√≥ logwork (t·ª´ task con) nh∆∞ng kh√¥ng c√≥ estimate")



        # Ph√¢n lo·∫°i task theo ti√™u ch√≠ m·ªõi
        tasks_with_logwork = [task for task in tasks if task.get('has_worklog', False)]
        tasks_without_logwork = [task for task in tasks if not task.get('has_worklog', False)]
        
        # Ph√¢n lo·∫°i chi ti·∫øt theo th·ªùi gian ti·∫øt ki·ªám
        tasks_no_logwork = [task for task in tasks if task.get('time_saved_hours', -1) == -1]  # Kh√¥ng c√≥ logwork
        tasks_no_saving = [task for task in tasks if task.get('time_saved_hours', -1) == 0]    # C√≥ logwork nh∆∞ng kh√¥ng ti·∫øt ki·ªám
        tasks_with_saving = [task for task in tasks if task.get('time_saved_hours', -1) > 0]   # C√≥ logwork v√† ti·∫øt ki·ªám
        tasks_exceed_time = [task for task in tasks if task.get('time_saved_hours', -1) < 0 and task.get('time_saved_hours', -1) != -1]  # V∆∞·ª£t th·ªùi gian
        tasks_no_estimate = [task for task in tasks if task.get('time_saved_hours', -1) == -2]  # C√≥ logwork nh∆∞ng kh√¥ng c√≥ estimate
        
        # Ph√¢n lo·∫°i theo d·ª± √°n
        projects = {}
        for task in tasks:
            project_key = task.get('actual_project', task.get('project', 'Unknown'))
            if project_key not in projects:
                projects[project_key] = {
                    'name': task.get('project_name', ''),
                    'total_tasks': 0,
                    'tasks_with_logwork': 0,
                    'tasks_without_logwork': 0,
                    'tasks_no_saving': 0,
                    'tasks_with_saving': 0,
                    'tasks_exceed_time': 0,
                    'total_estimate_hours': 0,
                    'total_actual_hours': 0,
                    'total_saved_hours': 0,
                }
            
            # C·∫≠p nh·∫≠t th·ªëng k√™ d·ª± √°n
            project_data = projects[project_key]
            project_data['total_tasks'] += 1
            project_data['total_estimate_hours'] += task.get('original_estimate_hours', 0)
            project_data['total_actual_hours'] += task.get('total_hours', 0)
            
            # C·∫≠p nh·∫≠t ph√¢n lo·∫°i task
            if task.get('time_saved_hours', -1) == -1:
                project_data['tasks_without_logwork'] += 1
            elif task.get('time_saved_hours', -1) == 0:
                project_data['tasks_with_logwork'] += 1
                project_data['tasks_no_saving'] += 1
            elif task.get('time_saved_hours', -1) > 0:
                project_data['tasks_with_logwork'] += 1
                project_data['tasks_with_saving'] += 1
                project_data['total_saved_hours'] += task.get('time_saved_hours', 0)
            else:
                project_data['tasks_with_logwork'] += 1
                project_data['tasks_exceed_time'] += 1

        # Ph√¢n lo·∫°i theo component
        components = {}
        for task in tasks:
            for component in task.get('components', []):
                if not component:
                    continue
                    
                if component not in components:
                    components[component] = {
                        'total_tasks': 0,
                        'tasks_with_logwork': 0,
                        'tasks_without_logwork': 0,
                        'tasks_no_saving': 0,
                        'tasks_with_saving': 0,
                        'tasks_exceed_time': 0,
                        'total_estimate_hours': 0,
                        'total_actual_hours': 0,
                        'total_saved_hours': 0,
                    }
                
                # C·∫≠p nh·∫≠t th·ªëng k√™ component
                component_data = components[component]
                component_data['total_tasks'] += 1
                component_data['total_estimate_hours'] += task.get('original_estimate_hours', 0)
                component_data['total_actual_hours'] += task.get('total_hours', 0)
                
                # C·∫≠p nh·∫≠t ph√¢n lo·∫°i task
                if task.get('time_saved_hours', -1) == -1:
                    component_data['tasks_without_logwork'] += 1
                elif task.get('time_saved_hours', -1) == 0:
                    component_data['tasks_with_logwork'] += 1
                    component_data['tasks_no_saving'] += 1
                elif task.get('time_saved_hours', -1) > 0:
                    component_data['tasks_with_logwork'] += 1
                    component_data['tasks_with_saving'] += 1
                    component_data['total_saved_hours'] += task.get('time_saved_hours', 0)
                else:
                    component_data['tasks_with_logwork'] += 1
                    component_data['tasks_exceed_time'] += 1

        # X·ª≠ l√Ω task kh√¥ng c√≥ component
        no_component_tasks = [task for task in tasks if not task.get('components')]
        if no_component_tasks:
            components['Kh√¥ng c√≥ component'] = {
                'total_tasks': len(no_component_tasks),
                'tasks_with_logwork': len([t for t in no_component_tasks if t.get('has_worklog', False)]),
                'tasks_without_logwork': len([t for t in no_component_tasks if not t.get('has_worklog', False)]),
                'tasks_no_saving': len([t for t in no_component_tasks if t.get('time_saved_hours', -1) == 0]),
                'tasks_with_saving': len([t for t in no_component_tasks if t.get('time_saved_hours', -1) > 0]),
                'tasks_exceed_time': len([t for t in no_component_tasks if t.get('time_saved_hours', -1) < 0 and t.get('time_saved_hours', -1) != -1]),
                'total_estimate_hours': sum(t.get('original_estimate_hours', 0) for t in no_component_tasks),
                'total_actual_hours': sum(t.get('total_hours', 0) for t in no_component_tasks),
                'total_saved_hours': sum(max(0, t.get('time_saved_hours', 0)) for t in no_component_tasks if t.get('time_saved_hours', 0) > 0),
            }

        # Ph√¢n lo·∫°i theo d·ª± √°n th·ª±c t·∫ø
        actual_projects = {}
        for task in tasks:
            actual_project = task.get('actual_project', task.get('project', 'Unknown'))
            
            if actual_project not in actual_projects:
                actual_projects[actual_project] = {
                    'total_tasks': 0,
                    'tasks_with_logwork': 0,
                    'tasks_without_logwork': 0,
                    'tasks_no_saving': 0,
                    'tasks_with_saving': 0,
                    'tasks_exceed_time': 0,
                    'total_estimate_hours': 0,
                    'total_actual_hours': 0,
                    'total_saved_hours': 0,
                }
            
            # C·∫≠p nh·∫≠t th·ªëng k√™ d·ª± √°n th·ª±c t·∫ø
            project_data = actual_projects[actual_project]
            project_data['total_tasks'] += 1
            project_data['total_estimate_hours'] += task.get('original_estimate_hours', 0)
            project_data['total_actual_hours'] += task.get('total_hours', 0)
            
            # C·∫≠p nh·∫≠t ph√¢n lo·∫°i task
            if task.get('time_saved_hours', -1) == -1:
                project_data['tasks_without_logwork'] += 1
            elif task.get('time_saved_hours', -1) == 0:
                project_data['tasks_with_logwork'] += 1
                project_data['tasks_no_saving'] += 1
            elif task.get('time_saved_hours', -1) > 0:
                project_data['tasks_with_logwork'] += 1
                project_data['tasks_with_saving'] += 1
                project_data['total_saved_hours'] += task.get('time_saved_hours', 0)
            else:
                project_data['tasks_with_logwork'] += 1
                project_data['tasks_exceed_time'] += 1

        # T√≠nh to√°n th·ªëng k√™ t·ªïng th·ªÉ
        total_estimate_hours = sum(task.get('original_estimate_hours', 0) for task in tasks)
        total_actual_hours = sum(task.get('total_hours', 0) for task in tasks)
        total_saved_hours = sum(max(0, task.get('time_saved_hours', 0)) for task in tasks if task.get('time_saved_hours', 0) > 0)
        saved_percentage = (total_saved_hours / total_estimate_hours * 100) if total_estimate_hours > 0 else 0
        
        # T·∫°o b√°o c√°o
        with open(output_file, 'w', encoding='utf-8') as f:
            # Header trang tr√≠
            f.write("=" * 80 + "\n")
            f.write(f"{'B√ÅO C√ÅO CHI TI·∫æT C√îNG VI·ªÜC NH√ÇN VI√äN':^80}\n")
            f.write("=" * 80 + "\n\n")
            f.write(f"üìÖ Th·ªùi gian t·∫°o: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n\n")
            
            # Th√¥ng tin nh√¢n vi√™n
            f.write("üìã TH√îNG TIN NH√ÇN VI√äN\n")
            f.write("-" * 80 + "\n")
            f.write(f"üë§ H·ªç v√† t√™n: {employee_name}\n")
            f.write(f"üìß Mail/Account: {employee_email}\n\n")
            
            # Th·ªëng k√™ t·ªïng quan
            f.write("üìä TH·ªêNG K√ä T·ªîNG QUAN\n")
            f.write("-" * 80 + "\n")
            f.write(f"üìà T·ªïng task: {len(tasks)}\n")
            f.write(f"‚úÖ Task c√≥ logwork: {len(tasks_with_logwork)}\n")
            f.write(f"‚è≥ Task kh√¥ng c√≥ logwork: {len(tasks_no_logwork)}\n")
            f.write(f"‚öñÔ∏è Task c√≥ logwork nh∆∞ng kh√¥ng ti·∫øt ki·ªám: {len(tasks_no_saving)}\n")
            f.write(f"‚ö° Task c√≥ logwork nh∆∞ng kh√¥ng c√≥ estimate: {len(tasks_no_estimate)}\n")
            f.write(f"üí∞ Task ti·∫øt ki·ªám th·ªùi gian: {len(tasks_with_saving)}\n")
            f.write(f"‚ö†Ô∏è Task v∆∞·ª£t th·ªùi gian d·ª± ki·∫øn: {len(tasks_exceed_time)}\n\n")
            
            # Th√¥ng tin th·ªùi gian
            f.write("‚è±Ô∏è T·ªîNG H·ª¢P TH·ªúI GIAN\n")
            f.write("-" * 80 + "\n")
            f.write(f"üîç T·ªïng th·ªùi gian d·ª± ki·∫øn (kh√¥ng AI): {total_estimate_hours:.2f} gi·ªù\n")
            f.write(f"‚öôÔ∏è T·ªïng th·ªùi gian d√πng AI: {total_actual_hours:.2f} gi·ªù\n")
            if total_saved_hours > 0:
                f.write(f"üíé Th·ªùi gian ti·∫øt ki·ªám ƒë∆∞·ª£c: {total_saved_hours:.2f} gi·ªù ({saved_percentage:.1f}%)\n")
                efficiency = (total_saved_hours / total_estimate_hours) * 100 if total_estimate_hours > 0 else 0
                f.write(f"üìà Hi·ªáu su·∫•t l√†m vi·ªác: {efficiency:.1f}%\n\n")
            else:
                f.write(f"‚ö†Ô∏è Kh√¥ng ti·∫øt ki·ªám ƒë∆∞·ª£c th·ªùi gian\n\n")
            
            # Th·ªëng k√™ theo component
            f.write("\nüìä TH·ªêNG K√ä THEO COMPONENT\n")
            f.write("-" * 80 + "\n")
            
            if components:
                for component_name, component_data in sorted(components.items(), key=lambda x: x[1]['total_tasks'], reverse=True):
                    component_saved_percentage = (component_data['total_saved_hours'] / component_data['total_estimate_hours'] * 100) if component_data['total_estimate_hours'] > 0 else 0
                    f.write(f"üîπ {component_name}\n")
                    f.write(f"   üìå T·ªïng task: {component_data['total_tasks']}\n")
                    f.write(f"   ‚úÖ Task c√≥ logwork: {component_data['tasks_with_logwork']}\n")
                    f.write(f"   ‚è≥ Task kh√¥ng c√≥ logwork: {component_data['tasks_without_logwork']}\n")
                    f.write(f"   ‚öñÔ∏è Task kh√¥ng ti·∫øt ki·ªám: {component_data['tasks_no_saving']}\n")
                    f.write(f"   üí∞ Task ti·∫øt ki·ªám: {component_data['tasks_with_saving']}\n")
                    f.write(f"   ‚ö†Ô∏è Task v∆∞·ª£t th·ªùi gian: {component_data['tasks_exceed_time']}\n")
                    f.write(f"   ‚è±Ô∏è Th·ªùi gian d·ª± ki·∫øn: {component_data['total_estimate_hours']:.2f}h, Th·ª±c t·∫ø: {component_data['total_actual_hours']:.2f}h\n")
                    if component_data['total_saved_hours'] > 0:
                        f.write(f"   üíé Ti·∫øt ki·ªám: {component_data['total_saved_hours']:.2f}h ({component_saved_percentage:.1f}%)\n")
                    f.write("\n")
            else:
                f.write("   Kh√¥ng c√≥ d·ªØ li·ªáu component.\n\n")
            
            # Th·ªëng k√™ theo d·ª± √°n th·ª±c t·∫ø
            f.write("\nüìä TH·ªêNG K√ä THEO D·ª∞ √ÅN\n")
            f.write("-" * 80 + "\n")
            
            if actual_projects:
                for project_name, project_data in sorted(actual_projects.items(), key=lambda x: x[1]['total_tasks'], reverse=True):
                    project_saved_percentage = (project_data['total_saved_hours'] / project_data['total_estimate_hours'] * 100) if project_data['total_estimate_hours'] > 0 else 0
                    f.write(f"üîπ {project_name}\n")
                    f.write(f"   üìå T·ªïng task: {project_data['total_tasks']}\n")
                    f.write(f"   ‚úÖ Task c√≥ logwork: {project_data['tasks_with_logwork']}\n")
                    f.write(f"   ‚è≥ Task kh√¥ng c√≥ logwork: {project_data['tasks_without_logwork']}\n")
                    f.write(f"   ‚öñÔ∏è Task kh√¥ng ti·∫øt ki·ªám: {project_data['tasks_no_saving']}\n")
                    f.write(f"   üí∞ Task ti·∫øt ki·ªám: {project_data['tasks_with_saving']}\n")
                    f.write(f"   ‚ö†Ô∏è Task v∆∞·ª£t th·ªùi gian: {project_data['tasks_exceed_time']}\n")
                    f.write(f"   ‚è±Ô∏è Th·ªùi gian d·ª± ki·∫øn: {project_data['total_estimate_hours']:.2f}h, Th·ª±c t·∫ø: {project_data['total_actual_hours']:.2f}h\n")
                    if project_data['total_saved_hours'] > 0:
                        f.write(f"   üíé Ti·∫øt ki·ªám: {project_data['total_saved_hours']:.2f}h ({project_saved_percentage:.1f}%)\n")
                    f.write("\n")
            else:
                f.write("   Kh√¥ng c√≥ d·ªØ li·ªáu d·ª± √°n.\n\n")
            
            # Chi ti·∫øt c√°c task c√≥ logwork v√† ti·∫øt ki·ªám th·ªùi gian
            f.write("\n" + "=" * 80 + "\n")
            f.write(f"{'üíé DANH S√ÅCH TASK TI·∫æT KI·ªÜM TH·ªúI GIAN':^80}\n")
            f.write("=" * 80 + "\n")
            if tasks_with_saving:
                for idx, task in enumerate(sorted(tasks_with_saving, key=lambda x: x.get('time_saved_hours', 0), reverse=True), 1):
                    time_saved = task.get('time_saved_hours', 0)
                    f.write(f"{idx}. [{task.get('key', '')}] {task.get('summary', '')}\n")
                    f.write(f"   üè∑Ô∏è Tr·∫°ng th√°i: {task.get('status', '')}, Lo·∫°i: {task.get('type', '')}\n")
                    f.write(f"   üìÇ D·ª± √°n: {task.get('project', '')} - {task.get('project_name', '')}\n")
                    f.write(f"   üîñ Component: {task.get('component_str', 'Kh√¥ng c√≥ component')}\n")
                    f.write(f"   üìå D·ª± √°n th·ª±c t·∫ø: {task.get('actual_project', task.get('project', ''))}\n")
                    f.write(f"   ‚è±Ô∏è D·ª± ki·∫øn: {task.get('original_estimate_hours', 0):.2f}h, Th·ª±c t·∫ø: {task.get('total_hours', 0):.2f}h\n")
                    f.write(f"   üí∞ Ti·∫øt ki·ªám: {time_saved:.2f}h ({task.get('time_saved_percent', 0):.1f}%)\n")
                    f.write(f"   üîó Link: {task.get('link', '')}\n\n")
            else:
                f.write("   Kh√¥ng c√≥ task n√†o ti·∫øt ki·ªám th·ªùi gian.\n\n")
            
            # NgƒÉn c√°ch
            f.write("\n" + "-" * 80 + "\n\n")
            
            # Chi ti·∫øt c√°c task kh√¥ng c√≥ logwork
            f.write("‚è≥ DANH S√ÅCH TASK CH∆ØA C√ì LOGWORK\n")
            f.write("=" * 80 + "\n")
            if tasks_no_logwork:
                for idx, task in enumerate(sorted(tasks_no_logwork, key=lambda x: x.get('original_estimate_hours', 0), reverse=True), 1):
                    f.write(f"{idx}. [{task.get('key', '')}] {task.get('summary', '')}\n")
                    f.write(f"   üè∑Ô∏è Tr·∫°ng th√°i: {task.get('status', '')}, Lo·∫°i: {task.get('type', '')}\n")
                    f.write(f"   üìÇ D·ª± √°n: {task.get('project', '')} - {task.get('project_name', '')}\n")
                    f.write(f"   üîñ Component: {task.get('component_str', 'Kh√¥ng c√≥ component')}\n")
                    f.write(f"   üìå D·ª± √°n th·ª±c t·∫ø: {task.get('actual_project', task.get('project', ''))}\n")
                    if task.get('original_estimate_hours', 0) > 0:
                        f.write(f"   ‚è±Ô∏è Th·ªùi gian ∆∞·ªõc t√≠nh: {task.get('original_estimate_hours', 0):.2f}h\n")
                    else:
                        f.write(f"   ‚ö†Ô∏è Ch∆∞a c√≥ ∆∞·ªõc t√≠nh th·ªùi gian\n")
                    f.write(f"   üîó Link: {task.get('link', '')}\n\n")
            else:
                f.write("   Kh√¥ng c√≥ task n√†o ch∆∞a c√≥ logwork.\n\n")
            
            # NgƒÉn c√°ch
            f.write("\n" + "-" * 80 + "\n\n")
            
            # Chi ti·∫øt c√°c task c√≥ logwork nh∆∞ng kh√¥ng ti·∫øt ki·ªám
            f.write("‚öñÔ∏è DANH S√ÅCH TASK C√ì LOGWORK NH∆ØNG KH√îNG TI·∫æT KI·ªÜM\n")
            f.write("=" * 80 + "\n")
            if tasks_no_saving:
                for idx, task in enumerate(sorted(tasks_no_saving, key=lambda x: x.get('original_estimate_hours', 0), reverse=True), 1):
                    f.write(f"{idx}. [{task.get('key', '')}] {task.get('summary', '')}\n")
                    f.write(f"   üè∑Ô∏è Tr·∫°ng th√°i: {task.get('status', '')}, Lo·∫°i: {task.get('type', '')}\n")
                    f.write(f"   üìÇ D·ª± √°n: {task.get('project', '')} - {task.get('project_name', '')}\n")
                    f.write(f"   üîñ Component: {task.get('component_str', 'Kh√¥ng c√≥ component')}\n")
                    f.write(f"   üìå D·ª± √°n th·ª±c t·∫ø: {task.get('actual_project', task.get('project', ''))}\n")
                    f.write(f"   ‚è±Ô∏è D·ª± ki·∫øn: {task.get('original_estimate_hours', 0):.2f}h, Th·ª±c t·∫ø: {task.get('total_hours', 0):.2f}h\n")
                    f.write(f"   ‚ÑπÔ∏è S·ª≠ d·ª•ng ƒë√∫ng th·ªùi gian ∆∞·ªõc t√≠nh\n")
                    f.write(f"   üîó Link: {task.get('link', '')}\n\n")
            else:
                f.write("   Kh√¥ng c√≥ task n√†o c√≥ logwork v√† estimate nh∆∞ng kh√¥ng ti·∫øt ki·ªám.\n\n")
                
            # NgƒÉn c√°ch
            f.write("\n" + "-" * 80 + "\n\n")
            
            # Chi ti·∫øt c√°c task c√≥ logwork nh∆∞ng kh√¥ng c√≥ estimate
            f.write("‚ö° DANH S√ÅCH TASK C√ì LOGWORK NH∆ØNG KH√îNG C√ì ESTIMATE\n")
            f.write("=" * 80 + "\n")
            if tasks_no_estimate:
                for idx, task in enumerate(sorted(tasks_no_estimate, key=lambda x: x.get('total_hours', 0), reverse=True), 1):
                    f.write(f"{idx}. [{task.get('key', '')}] {task.get('summary', '')}\n")
                    f.write(f"   üè∑Ô∏è Tr·∫°ng th√°i: {task.get('status', '')}, Lo·∫°i: {task.get('type', '')}\n")
                    f.write(f"   üìÇ D·ª± √°n: {task.get('project', '')} - {task.get('project_name', '')}\n")
                    f.write(f"   üîñ Component: {task.get('component_str', 'Kh√¥ng c√≥ component')}\n")
                    f.write(f"   üìå D·ª± √°n th·ª±c t·∫ø: {task.get('actual_project', task.get('project', ''))}\n")
                    f.write(f"   ‚è±Ô∏è Th·ªùi gian log: {task.get('total_hours', 0):.2f}h (kh√¥ng c√≥ estimate)\n")
                    f.write(f"   ‚ö†Ô∏è Task n√†y kh√¥ng c√≥ estimate n√™n kh√¥ng th·ªÉ t√≠nh ti·∫øt ki·ªám\n")
                    f.write(f"   üîó Link: {task.get('link', '')}\n\n")
            else:
                f.write("   Kh√¥ng c√≥ task n√†o c√≥ logwork nh∆∞ng thi·∫øu estimate.\n\n")
            
            # NgƒÉn c√°ch
            f.write("\n" + "-" * 80 + "\n\n")
            
            # Chi ti·∫øt c√°c task v∆∞·ª£t th·ªùi gian
            f.write("‚ö†Ô∏è DANH S√ÅCH TASK V∆Ø·ª¢T TH·ªúI GIAN D·ª∞ KI·∫æN\n")
            f.write("=" * 80 + "\n")
            if tasks_exceed_time:
                for idx, task in enumerate(sorted(tasks_exceed_time, key=lambda x: x.get('time_saved_hours', 0)), 1):
                    time_exceed = abs(task.get('time_saved_hours', 0))
                    f.write(f"{idx}. [{task.get('key', '')}] {task.get('summary', '')}\n")
                    f.write(f"   üè∑Ô∏è Tr·∫°ng th√°i: {task.get('status', '')}, Lo·∫°i: {task.get('type', '')}\n")
                    f.write(f"   üìÇ D·ª± √°n: {task.get('project', '')} - {task.get('project_name', '')}\n")
                    f.write(f"   üîñ Component: {task.get('component_str', 'Kh√¥ng c√≥ component')}\n")
                    f.write(f"   üìå D·ª± √°n th·ª±c t·∫ø: {task.get('actual_project', task.get('project', ''))}\n")
                    f.write(f"   ‚è±Ô∏è D·ª± ki·∫øn: {task.get('original_estimate_hours', 0):.2f}h, Th·ª±c t·∫ø: {task.get('total_hours', 0):.2f}h\n")
                    f.write(f"   ‚ö†Ô∏è V∆∞·ª£t: {time_exceed:.2f}h ({abs(task.get('time_saved_percent', 0)):.1f}%)\n")
                    f.write(f"   üîó Link: {task.get('link', '')}\n\n")
            else:
                f.write("   Kh√¥ng c√≥ task n√†o v∆∞·ª£t th·ªùi gian d·ª± ki·∫øn.\n\n")
            
            # Footer
            f.write("\n" + "=" * 80 + "\n")
            f.write(f"{'K·∫æT TH√öC B√ÅO C√ÅO':^80}\n")
            f.write("=" * 80 + "\n")
            
            # Th√™m ph·∫ßn hi·ªÉn th·ªã danh s√°ch task n·∫øu c·∫ßn
            f.write("\nüìù DANH S√ÅCH TASK CHI TI·∫æT\n")
            f.write("-" * 80 + "\n")
            
            for idx, task in enumerate(sorted(tasks, key=lambda x: x.get('key', '')), 1):
                key = task.get('key', '')
                summary = task.get('summary', '')
                status = task.get('status', '')
                updated = task.get('updated', '')
                has_worklog = "‚úì" if task.get('has_worklog', False) else "‚úó"
                
                f.write(f"{idx}. [{key}] {summary}\n")
                f.write(f"   Tr·∫°ng th√°i: {status}, C·∫≠p nh·∫≠t: {updated}, Logwork: {has_worklog}\n")
                f.write(f"   Link: {task.get('link', '')}\n")
                
                # Hi·ªÉn th·ªã chi ti·∫øt c√°c log work
                worklogs = task.get('worklogs', [])
                if worklogs:
                    f.write(f"   Log work: {len(worklogs)} l·∫ßn | T·ªïng: {task.get('total_hours', 0):.2f}h\n")
                    for log_idx, log in enumerate(sorted(worklogs, key=lambda x: x.get('started', '')), 1):
                        author = log.get('author', 'Unknown')
                        time_spent = log.get('time_spent', '')
                        hours = log.get('hours_spent', 0)
                        started = log.get('started', '')
                        comment = log.get('comment', 'Kh√¥ng c√≥ comment')
                        
                        # R√∫t g·ªçn comment n·∫øu qu√° d√†i
                        if len(comment) > 100:
                            comment = comment[:100] + "..."
                            
                        f.write(f"     {log_idx}. {author} - {started} - {hours:.2f}h\n")
                        if comment:
                            f.write(f"        {comment}\n")
                else:
                    f.write("   ‚ö†Ô∏è Ch∆∞a c√≥ log work n√†o!\n")
                
                # Chi ti·∫øt estimate v√† ti·∫øt ki·ªám
                est_hours = task.get('original_estimate_hours', 0)
                actual_hours = task.get('total_hours', 0)
                time_saved = task.get('time_saved_hours', -1)
                
                if est_hours > 0:
                    f.write(f"   Estimate: {est_hours:.2f}h | Actual: {actual_hours:.2f}h")
                    if time_saved > 0:
                        saved_percent = task.get('time_saved_percent', 0)
                        f.write(f" | Saved: {time_saved:.2f}h ({saved_percent:.1f}%)")
                    elif time_saved == 0:
                        f.write(" | No time saved")
                    elif time_saved < 0 and time_saved != -1 and time_saved != -2:
                        f.write(f" | ‚ö†Ô∏è Exceeded: {abs(time_saved):.2f}h")
                    f.write("\n")
                elif time_saved == -2:
                    f.write(f"   ‚ÑπÔ∏è ƒê√£ log work {actual_hours:.2f}h nh∆∞ng kh√¥ng c√≥ estimate\n")
                
                # Th√™m d√≤ng tr·ªëng gi·ªØa c√°c task
                f.write("\n")
            
            print(f"‚úÖ ƒê√£ t·∫°o b√°o c√°o chi ti·∫øt cho {employee_name}: {output_file}")
            return True
    except Exception as e:
        print(f"   ‚ùå L·ªói khi t·∫°o b√°o c√°o chi ti·∫øt: {str(e)}")
        return False

def create_project_report(project_name, tasks, employee_detailed_stats, output_file):
    """
    T·∫°o b√°o c√°o chi ti·∫øt v·ªÅ m·ªôt d·ª± √°n v√† l∆∞u v√†o file txt
    
    Args:
        project_name (str): T√™n d·ª± √°n
        tasks (list): Danh s√°ch c√°c task c·ªßa d·ª± √°n
        employee_detailed_stats (dict): Th·ªëng k√™ chi ti·∫øt c·ªßa c√°c nh√¢n vi√™n
        output_file (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn file b√°o c√°o
    """
    try:
         # C·∫≠p nh·∫≠t tr·∫°ng th√°i logwork cho task cha tr∆∞·ªõc khi t·∫°o b√°o c√°o
        parent_to_children = {}
        for task in tasks:
            if task.get('is_subtask') and task.get('parent_key'):
                parent_key = task.get('parent_key')
                if parent_key not in parent_to_children:
                    parent_to_children[parent_key] = []
                parent_to_children[parent_key].append(task)
        
        # C·∫≠p nh·∫≠t tr·∫°ng th√°i task cha d·ª±a tr√™n task con
        for task in tasks:
            task_key = task.get('key')
            if task_key in parent_to_children:  # N·∫øu task n√†y l√† task cha c√≥ con
                children = parent_to_children[task_key]
                
                # N·∫øu task cha kh√¥ng c√≥ estimate nh∆∞ng c√°c task con c√≥ estimate
                if task.get('original_estimate_hours', 0) == 0:
                    total_child_estimate = sum(child.get('original_estimate_hours', 0) for child in children)
                    if total_child_estimate > 0:
                        # C·∫≠p nh·∫≠t estimate cho task cha t·ª´ t·ªïng estimate c·ªßa c√°c task con
                        task['original_estimate_hours'] = total_child_estimate
                        task['has_estimate'] = True
                        print(f"   ‚ÑπÔ∏è C·∫≠p nh·∫≠t estimate cho task cha {task_key} t·ª´ t·ªïng estimate c·ªßa c√°c task con: {total_child_estimate:.2f}h")
                
                # Ki·ªÉm tra v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i logwork
                if not task.get('has_worklog'):  # N·∫øu task cha ch∆∞a c√≥ log work
                    children_with_logwork = [child for child in children if child.get('has_worklog', False)]
                    if children_with_logwork:  # N·∫øu c√≥ √≠t nh·∫•t m·ªôt task con ƒë√£ log work
                        # ƒê√°nh d·∫•u task cha l√† ƒë√£ log work
                        task['has_worklog'] = True
                        task['has_child_with_logwork'] = True  # Th√™m tr∆∞·ªùng ƒë·ªÉ ƒë√°nh d·∫•u
                        
                        # Quan tr·ªçng: C·∫≠p nh·∫≠t time_saved_hours n·∫øu ƒëang l√† -1 (kh√¥ng c√≥ logwork)
                        if task.get('time_saved_hours', -1) == -1:
                            # T√≠nh t·ªïng th·ªùi gian t·ª´ c√°c task con
                            total_child_time = sum(child.get('total_hours', 0) for child in children_with_logwork)
                            
                            # C·∫≠p nh·∫≠t th·ªùi gian th·ª±c t·∫ø cho task cha t·ª´ t·ªïng th·ªùi gian c·ªßa c√°c task con
                            task['total_hours'] = total_child_time
                            
                            # N·∫øu task cha kh√¥ng c√≥ estimate nh∆∞ng c√°c task con c√≥ estimate
                            if task.get('original_estimate_hours', 0) == 0:
                                # T√≠nh t·ªïng estimate t·ª´ task con
                                total_child_estimate = sum(child.get('original_estimate_hours', 0) for child in children)
                                if total_child_estimate > 0:
                                    # C·∫≠p nh·∫≠t estimate cho task cha
                                    task['original_estimate_hours'] = total_child_estimate
                                    task['has_estimate'] = True
                                    print(f"   ‚ÑπÔ∏è C·∫≠p nh·∫≠t estimate cho task cha {task_key} t·ª´ t·ªïng estimate c·ªßa c√°c task con: {total_child_estimate:.2f}h")
                            
                            # Sau ƒë√≥ t√≠nh time_saved_hours
                            if task.get('original_estimate_hours', 0) > 0:
                                saved_hours, saving_ratio = calculate_saved_time(task.get('original_estimate_hours', 0), total_child_time)
                                task['time_saved_hours'] = saved_hours
                                task['time_saved_percent'] = saving_ratio
                                print(f"   ‚ÑπÔ∏è C·∫≠p nh·∫≠t time_saved_hours cho task cha {task_key} t·ª´ task con: {saved_hours:.2f}h ({saving_ratio:.1f}%)")
                            else:
                                # N·∫øu th·ª±c s·ª± kh√¥ng c√≥ estimate n√†o (c·∫£ cha v√† con ƒë·ªÅu kh√¥ng c√≥)
                                task['time_saved_hours'] = -2  # ƒê√°nh d·∫•u ƒë·∫∑c bi·ªát: c√≥ logwork nh∆∞ng kh√¥ng c√≥ estimate
                                print(f"   ‚ÑπÔ∏è Task cha {task_key} ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u c√≥ logwork (t·ª´ task con) nh∆∞ng kh√¥ng c√≥ estimate")
        # B·ªè qua d·ª± √°n FC
        if project_name == "FC":
            print(f"üö´ B·ªè qua t·∫°o b√°o c√°o cho d·ª± √°n FC")
            return True
            
        # L·ªçc task thu·ªôc d·ª± √°n
        project_tasks = [task for task in tasks if task.get('actual_project', '') == project_name]
        
        if not project_tasks:
            print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y task n√†o thu·ªôc d·ª± √°n {project_name}")
            return False
            
        # T·∫°o t·ª´ ƒëi·ªÉn ƒë·ªÉ l∆∞u th√¥ng tin c·ªßa t·ª´ng nh√¢n vi√™n
        employees = {}
        
        # T·∫°o t·ª´ ƒëi·ªÉn √°nh x·∫° t·ª´ task cha ƒë·∫øn danh s√°ch c√°c task con
        parent_to_children = {}
        
        # X√°c ƒë·ªãnh m·ªëi quan h·ªá cha-con gi·ªØa c√°c task
        for task in project_tasks:
            # N·∫øu l√† task con, th√™m v√†o danh s√°ch con c·ªßa task cha
            if task.get('is_subtask') and task.get('parent_key'):
                parent_key = task.get('parent_key')
                if parent_key not in parent_to_children:
                    parent_to_children[parent_key] = []
                parent_to_children[parent_key].append(task)
        
        # C·∫≠p nh·∫≠t tr·∫°ng th√°i log work c·ªßa task cha d·ª±a tr√™n con
        for task in project_tasks:
            # N·∫øu task l√† task cha (kh√¥ng ph·∫£i l√† subtask) v√† c√≥ c√°c task con
            task_key = task.get('key')
            if not task.get('is_subtask') and task_key in parent_to_children:
                # Ki·ªÉm tra xem c√≥ task con n√†o ƒë√£ log work kh√¥ng
                if not task.get('has_worklog'):  # N·∫øu task cha ch∆∞a c√≥ log work
                    children_with_logwork = [child for child in parent_to_children[task_key] if child.get('has_worklog', False)]
                    if children_with_logwork:  # N·∫øu c√≥ √≠t nh·∫•t m·ªôt task con ƒë√£ log work
                        # ƒê√°nh d·∫•u task cha l√† ƒë√£ log work
                        task['has_worklog'] = True
                        task['has_child_with_logwork'] = True  # Th√™m tr∆∞·ªùng ƒë·ªÉ ƒë√°nh d·∫•u
                        
                        # Quan tr·ªçng: C·∫≠p nh·∫≠t time_saved_hours n·∫øu ƒëang l√† -1 (kh√¥ng c√≥ logwork)
                        if task.get('time_saved_hours', -1) == -1:
                            # T√≠nh t·ªïng th·ªùi gian th·ª±c t·∫ø t·ª´ c√°c task con
                            children_total_hours = sum(child.get('total_hours', 0) for child in children_with_logwork)
                            
                            # C·∫≠p nh·∫≠t th·ªùi gian th·ª±c t·∫ø cho task cha
                            if task.get('total_hours', 0) == 0:  # Ch·ªâ c·∫≠p nh·∫≠t n·∫øu task cha ch∆∞a c√≥ gi√° tr·ªã
                                task['total_hours'] = children_total_hours
                            
                            # N·∫øu task cha c√≥ estimate, t√≠nh time_saved_hours
                            if task.get('original_estimate_hours', 0) > 0:
                                task['time_saved_hours'] = task.get('original_estimate_hours', 0) - task.get('total_hours', 0)
                            else:
                                # N·∫øu kh√¥ng c√≥ estimate, ƒë·∫∑t th√†nh 0 (kh√¥ng ti·∫øt ki·ªám)
                                task['time_saved_hours'] = 0
        
        # X·ª≠ l√Ω t·ª´ng nh√¢n vi√™n
        for task in project_tasks:
            employee_name = task.get('employee_name', 'Unknown')
            employee_email = task.get('employee_email', '')
            
            if employee_name not in employees:
                employees[employee_name] = {
                    'email': employee_email,
                    'total_tasks': 0,
                    'tasks_with_logwork': 0,
                    'tasks_without_logwork': 0,
                    'estimated_hours': 0,
                    'actual_hours': 0,
                    'saved_hours': 0
                }
                
            # C·∫≠p nh·∫≠t th·ªëng k√™ nh√¢n vi√™n
            employees[employee_name]['total_tasks'] += 1
            employees[employee_name]['estimated_hours'] += task.get('original_estimate_hours', 0) or 0
            employees[employee_name]['actual_hours'] += task.get('total_hours', 0) or 0
            
            if task.get('has_worklog', False):
                employees[employee_name]['tasks_with_logwork'] += 1
            else:
                employees[employee_name]['tasks_without_logwork'] += 1
            
            # T√≠nh th·ªùi gian ti·∫øt ki·ªám
            time_saved = task.get('time_saved_hours', 0)
            if time_saved > 0:
                employees[employee_name]['saved_hours'] += time_saved
        
        # T√≠nh t·ª∑ l·ªá kh√¥ng logwork v√† t·ª∑ l·ªá ti·∫øt ki·ªám
        for name, stats in employees.items():
            if stats['total_tasks'] > 0:
                stats['no_logwork_ratio'] = stats['tasks_without_logwork'] / stats['total_tasks'] * 100
            else:
                stats['no_logwork_ratio'] = 0
                
            # T√≠nh l·∫°i th·ªùi gian ti·∫øt ki·ªám: t·ªïng ∆∞·ªõc t√≠nh - t·ªïng th·ª±c t·∫ø
            #stats['saved_hours'] = stats['estimated_hours'] - stats['actual_hours']
                
            if stats['estimated_hours'] > 0:
                stats['saving_ratio'] = stats['saved_hours'] / stats['estimated_hours'] * 100
            else:
                stats['saving_ratio'] = 0
                
        # T√≠nh c√°c ch·ªâ s·ªë t·ªïng h·ª£p c·ªßa d·ª± √°n
        project_stats = {
            'total_tasks': len(project_tasks),
            'total_employees': len(employees),
            'total_estimated_hours': sum(task.get('original_estimate_hours', 0) or 0 for task in project_tasks),
            'total_actual_hours': sum(task.get('total_hours', 0) or 0 for task in project_tasks),
            'tasks_with_logwork': len([task for task in project_tasks if task.get('has_worklog', False)]),
            'tasks_without_logwork': len([task for task in project_tasks if not task.get('has_worklog', False)]),
        }
        
        project_stats['logwork_ratio'] = (project_stats['tasks_with_logwork'] / project_stats['total_tasks'] * 100) if project_stats['total_tasks'] > 0 else 0
        project_stats['saved_hours'] = project_stats['total_estimated_hours'] - project_stats['total_actual_hours']
        project_stats['saving_ratio'] = (project_stats['saved_hours'] / project_stats['total_estimated_hours'] * 100) if project_stats['total_estimated_hours'] > 0 else 0
        
        # Top 10 nh√¢n vi√™n kh√¥ng logwork
        top_no_logwork = sorted(
            [item for item in employees.items() if item[1]['tasks_without_logwork'] > 0],
            key=lambda x: x[1]['tasks_without_logwork'],
            reverse=True
        )[:10]
        
        # Top 10 nh√¢n vi√™n logwork nhi·ªÅu nh·∫•t
        top_logwork = sorted(
            employees.items(),
            key=lambda x: x[1]['actual_hours'],
            reverse=True
        )[:10]
        
        # Top 10 nh√¢n vi√™n ti·∫øt ki·ªám th·ªùi gian nhi·ªÅu nh·∫•t
        top_saving = sorted(
            [item for item in employees.items() if item[1]['estimated_hours'] > 0],
            key=lambda x: x[1]['saving_ratio'],
            reverse=True
        )[:10]
        
        # Top 10 nh√¢n vi√™n c√≥ t·ª∑ l·ªá kh√¥ng logwork cao nh·∫•t
        top_no_logwork_ratio = sorted(
            [item for item in employees.items() if item[1]['tasks_without_logwork'] > 0],
            key=lambda x: x[1]['no_logwork_ratio'],
            reverse=True
        )[:10]
        
        # T·∫°o b√°o c√°o
        with open(output_file, 'w', encoding='utf-8') as f:
            # Ti√™u ƒë·ªÅ
            f.write(f"=== B√ÅO C√ÅO D·ª∞ √ÅN: {project_name} ===\n\n")
            
            # Th·ªëng k√™ t·ªïng quan
            f.write("üìä TH·ªêNG K√ä T·ªîNG QUAN:\n")
            f.write(f"- T·ªïng s·ªë task: {project_stats['total_tasks']}\n")
            f.write(f"- S·ªë nh√¢n vi√™n: {project_stats['total_employees']}\n")
            f.write(f"- S·ªë task c√≥ logwork: {project_stats['tasks_with_logwork']} ({project_stats['logwork_ratio']:.1f}%)\n")
            f.write(f"- T·ªïng th·ªùi gian ∆∞·ªõc t√≠nh: {project_stats['total_estimated_hours']:.1f} gi·ªù\n")
            f.write(f"- T·ªïng th·ªùi gian th·ª±c t·∫ø: {project_stats['total_actual_hours']:.1f} gi·ªù\n")
            f.write(f"- Th·ªùi gian ti·∫øt ki·ªám: {project_stats['saved_hours']:.1f} gi·ªù ({project_stats['saving_ratio']:.1f}%)\n\n")
            
            # Danh s√°ch nh√¢n vi√™n
            f.write("üë• DANH S√ÅCH NH√ÇN VI√äN TRONG D·ª∞ √ÅN:\n")
            for idx, (name, stats) in enumerate(sorted(employees.items(), key=lambda x: x[0]), 1):
                f.write(f"{idx}. {name} ({stats['email']}) - {stats['total_tasks']} task\n")
            f.write("\n")
            
            # Top 10 nh√¢n vi√™n kh√¥ng logwork
            f.write("‚ö†Ô∏è TOP ")
            f.write(f"{len(top_no_logwork)}" if top_no_logwork else "0")
            f.write(" NH√ÇN VI√äN C√ì NHI·ªÄU TASK KH√îNG LOGWORK:\n")
            if top_no_logwork:
                header = f"{'STT':<5}{'T√™n nh√¢n vi√™n':<30}{'T·ªïng task':<15}{'Kh√¥ng logwork':<15}{'T·ª∑ l·ªá':<10}\n"
                f.write(header)
                f.write("-" * 75 + "\n")
                
                for idx, (name, stats) in enumerate(top_no_logwork, 1):
                    row = f"{idx:<5}{name[:28]:<30}{stats['total_tasks']:<15}{stats['tasks_without_logwork']:<15}{stats['no_logwork_ratio']:.1f}%\n"
                    f.write(row)
            else:
                f.write("Kh√¥ng c√≥ nh√¢n vi√™n n√†o c√≥ task kh√¥ng logwork\n")
            f.write("\n")
            
            # Top 10 nh√¢n vi√™n c√≥ t·ª∑ l·ªá kh√¥ng logwork cao nh·∫•t
            f.write("üö´ TOP ")
            f.write(f"{len(top_no_logwork_ratio)}" if top_no_logwork_ratio else "0")
            f.write(" NH√ÇN VI√äN C√ì T·ª∂ L·ªÜ KH√îNG LOGWORK CAO NH·∫§T:\n")
            if top_no_logwork_ratio:
                header = f"{'STT':<5}{'T√™n nh√¢n vi√™n':<30}{'T·ªïng task':<15}{'Kh√¥ng logwork':<15}{'T·ª∑ l·ªá':<10}\n"
                f.write(header)
                f.write("-" * 75 + "\n")
                
                for idx, (name, stats) in enumerate(top_no_logwork_ratio, 1):
                    row = f"{idx:<5}{name[:28]:<30}{stats['total_tasks']:<15}{stats['tasks_without_logwork']:<15}{stats['no_logwork_ratio']:.1f}%\n"
                    f.write(row)
            else:
                f.write("Kh√¥ng c√≥ nh√¢n vi√™n n√†o c√≥ task kh√¥ng logwork\n")
            f.write("\n")
            
            # Top 10 nh√¢n vi√™n logwork nhi·ªÅu nh·∫•t
            f.write("üîù TOP 10 NH√ÇN VI√äN LOGWORK NHI·ªÄU NH·∫§T:\n")
            if top_logwork:
                header = f"{'STT':<5}{'T√™n nh√¢n vi√™n':<30}{'T·ªïng task':<15}{'S·ªë gi·ªù logwork':<20}\n"
                f.write(header)
                f.write("-" * 70 + "\n")
                
                for idx, (name, stats) in enumerate(top_logwork, 1):
                    row = f"{idx:<5}{name[:28]:<30}{stats['total_tasks']:<15}{stats['actual_hours']:.1f} gi·ªù\n"
                    f.write(row)
            else:
                f.write("Kh√¥ng c√≥ d·ªØ li·ªáu\n")
            f.write("\n")
            
            # Top 10 nh√¢n vi√™n ti·∫øt ki·ªám th·ªùi gian
            f.write("üí∞ TOP 10 NH√ÇN VI√äN TI·∫æT KI·ªÜM TH·ªúI GIAN NH·∫§T:\n")
            if top_saving:
                header = f"{'STT':<5}{'T√™n nh√¢n vi√™n':<30}{'∆Ø·ªõc t√≠nh':<15}{'Th·ª±c t·∫ø':<15}{'Ti·∫øt ki·ªám':<15}{'T·ª∑ l·ªá':<10}\n"
                f.write(header)
                f.write("-" * 90 + "\n")
                
                for idx, (name, stats) in enumerate(top_saving, 1):
                    row = f"{idx:<5}{name[:28]:<30}{stats['estimated_hours']:.1f}h{' ':<10}{stats['actual_hours']:.1f}h{' ':<10}{stats['saved_hours']:.1f}h{' ':<10}{stats['saving_ratio']:.1f}%\n"
                    f.write(row)
            else:
                f.write("Kh√¥ng c√≥ d·ªØ li·ªáu\n")
            f.write("\n")
            
            # Chi ti·∫øt t·ª´ng nh√¢n vi√™n
            f.write("üìù CHI TI·∫æT T·ª™NG NH√ÇN VI√äN:\n\n")
            
            for employee_name, stats in sorted(employees.items(), key=lambda x: x[0]):
                f.write(f"üë§ {employee_name} ({stats['email']}):\n")
                f.write(f"- T·ªïng s·ªë task: {stats['total_tasks']}\n")
                f.write(f"- S·ªë task c√≥ logwork: {stats['tasks_with_logwork']} ({(stats['tasks_with_logwork']/stats['total_tasks']*100) if stats['total_tasks'] > 0 else 0:.1f}%)\n")
                f.write(f"- S·ªë task kh√¥ng logwork: {stats['tasks_without_logwork']}\n")
                f.write(f"- Th·ªùi gian ∆∞·ªõc t√≠nh: {stats['estimated_hours']:.1f} gi·ªù\n")
                f.write(f"- Th·ªùi gian th·ª±c t·∫ø: {stats['actual_hours']:.1f} gi·ªù\n")
                f.write(f"- Th·ªùi gian ti·∫øt ki·ªám: {stats['saved_hours']:.1f} gi·ªù ({stats['saving_ratio']:.1f}%)\n")
                
                # Chi ti·∫øt c√°c task c·ªßa nh√¢n vi√™n
                employee_tasks = [task for task in project_tasks if task.get('employee_name', '') == employee_name]
                
                if employee_tasks:
                    f.write("\n   DANH S√ÅCH TASK:\n")
                    
                    for idx, task in enumerate(sorted(employee_tasks, key=lambda x: x.get('key', '')), 1):
                        key = task.get('key', '')
                        summary = task.get('summary', '')[:50] + ('...' if len(task.get('summary', '')) > 50 else '')
                        status = task.get('status', '')
                        est_hours = task.get('original_estimate_hours', 0) or 0
                        actual_hours = task.get('total_hours', 0) or 0
                        has_logwork = "‚úì" if task.get('has_worklog', False) else "‚úó"
                        
                        f.write(f"   {idx}. [{key}] {summary} - Tr·∫°ng th√°i: {status}\n")
                        
                        # Hi·ªÉn th·ªã th√¥ng tin n·∫øu task cha c√≥ log work th√¥ng qua task con
                        if task.get('has_child_with_logwork', False):
                            f.write(f"      Logwork: {has_logwork} (‚úì qua task con), ∆Ø·ªõc t√≠nh: {est_hours:.1f}h, Th·ª±c t·∫ø: {actual_hours:.1f}h\n")
                            # Hi·ªÉn th·ªã danh s√°ch task con c√≥ log work
                            if key in parent_to_children:
                                children_with_logwork = [child for child in parent_to_children[key] if child.get('has_worklog', False)]
                                f.write(f"      üëâ C√≥ {len(children_with_logwork)}/{len(parent_to_children[key])} task con ƒë√£ log work:\n")
                                for idx_child, child in enumerate(children_with_logwork, 1):
                                    child_key = child.get('key', '')
                                    child_summary = child.get('summary', '')[:40] + ('...' if len(child.get('summary', '')) > 40 else '')
                                    child_hours = child.get('total_hours', 0) or 0
                                    f.write(f"        {idx_child}. [{child_key}] {child_summary} - {child_hours:.1f}h\n")
                        else:
                            f.write(f"      Logwork: {has_logwork}, ∆Ø·ªõc t√≠nh: {est_hours:.1f}h, Th·ª±c t·∫ø: {actual_hours:.1f}h\n")
                        
                        # Hi·ªÉn th·ªã chi ti·∫øt t·ª´ng l·∫ßn logwork n·∫øu c√≥
                        worklogs = task.get('worklogs', [])
                        if worklogs:
                            f.write(f"      Chi ti·∫øt logwork ({len(worklogs)} l·∫ßn):\n")
                            for log_idx, log in enumerate(sorted(worklogs, key=lambda x: x.get('started', '')), 1):
                                author = log.get('author', 'Unknown')
                                started = log.get('started', 'Unknown')
                                hours = log.get('hours_spent', 0)
                                comment = log.get('comment', 'Kh√¥ng c√≥ comment')
                                comment_display = comment[:100] + '...' if len(comment) > 100 else comment
                                
                                f.write(f"        {log_idx}. {author} - {started} - {hours:.1f}h\n")
                                f.write(f"           Comment: {comment_display}\n")
                
                f.write("\n" + "-" * 80 + "\n\n")
        
        print(f"‚úÖ ƒê√£ t·∫°o b√°o c√°o d·ª± √°n {project_name}: {output_file}")
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói khi t·∫°o b√°o c√°o d·ª± √°n {project_name}: {str(e)}")
        return False

def create_projects_summary_report(all_tasks, output_file, csv_output_file):
    """
    T·∫°o b√°o c√°o t·ªïng h·ª£p cho t·∫•t c·∫£ c√°c d·ª± √°n th·ª±c t·∫ø
    
    Args:
        all_tasks (list): Danh s√°ch t·∫•t c·∫£ c√°c task
        output_file (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn file b√°o c√°o t·ªïng h·ª£p d·∫°ng txt
        csv_output_file (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn file b√°o c√°o t·ªïng h·ª£p d·∫°ng csv
        
    Returns:
        bool: True n·∫øu th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
    """
    try:
        # T·∫°o t·ª´ ƒëi·ªÉn ƒë·ªÉ l∆∞u th√¥ng tin c·ªßa t·ª´ng d·ª± √°n
        projects = {}
        
        # T·∫°o t·ª´ ƒëi·ªÉn ƒë·ªÉ l∆∞u th√¥ng tin nh√¢n vi√™n theo d·ª± √°n
        project_employees = {}
        
        # T·∫°o t·ª´ ƒëi·ªÉn ƒë·ªÉ l∆∞u th√¥ng tin nh√¢n vi√™n t·ªïng h·ª£p
        all_employees = {}
        
        # T·∫°o t·ª´ ƒëi·ªÉn √°nh x·∫° t·ª´ task cha ƒë·∫øn danh s√°ch c√°c task con
        parent_to_children = {}
        
        # X√°c ƒë·ªãnh m·ªëi quan h·ªá cha-con gi·ªØa c√°c task
        for task in all_tasks:
            # N·∫øu l√† task con, th√™m v√†o danh s√°ch con c·ªßa task cha
            if task.get('is_subtask') and task.get('parent_key'):
                parent_key = task.get('parent_key')
                if parent_key not in parent_to_children:
                    parent_to_children[parent_key] = []
                parent_to_children[parent_key].append(task)
        
        # C·∫≠p nh·∫≠t tr·∫°ng th√°i log work c·ªßa task cha d·ª±a tr√™n con
        for task in all_tasks:
            # N·∫øu task l√† task cha (kh√¥ng ph·∫£i l√† subtask) v√† c√≥ c√°c task con
            task_key = task.get('key')
            if not task.get('is_subtask') and task_key in parent_to_children:
                # Ki·ªÉm tra xem c√≥ task con n√†o ƒë√£ log work kh√¥ng
                if not task.get('has_worklog'):  # N·∫øu task cha ch∆∞a c√≥ log work
                    children_with_logwork = [child for child in parent_to_children[task_key] if child.get('has_worklog', False)]
                    if children_with_logwork:  # N·∫øu c√≥ √≠t nh·∫•t m·ªôt task con ƒë√£ log work
                        # ƒê√°nh d·∫•u task cha l√† ƒë√£ log work
                        task['has_worklog'] = True
                        task['has_child_with_logwork'] = True  # Th√™m tr∆∞·ªùng ƒë·ªÉ ƒë√°nh d·∫•u
                        
                        # Quan tr·ªçng: C·∫≠p nh·∫≠t time_saved_hours n·∫øu ƒëang l√† -1 (kh√¥ng c√≥ logwork)
                        if task.get('time_saved_hours', -1) == -1:
                            # T√≠nh t·ªïng th·ªùi gian th·ª±c t·∫ø t·ª´ c√°c task con
                            children_total_hours = sum(child.get('total_hours', 0) for child in children_with_logwork)
                            
                            # C·∫≠p nh·∫≠t th·ªùi gian th·ª±c t·∫ø cho task cha
                            if task.get('total_hours', 0) == 0:  # Ch·ªâ c·∫≠p nh·∫≠t n·∫øu task cha ch∆∞a c√≥ gi√° tr·ªã
                                task['total_hours'] = children_total_hours
                            
                            # N·∫øu task cha kh√¥ng c√≥ estimate nh∆∞ng c√°c task con c√≥ estimate
                            if task.get('original_estimate_hours', 0) == 0:
                                # T√≠nh t·ªïng estimate t·ª´ task con
                                total_child_estimate = sum(child.get('original_estimate_hours', 0) for child in parent_to_children[task_key])
                                if total_child_estimate > 0:
                                    # C·∫≠p nh·∫≠t estimate cho task cha
                                    task['original_estimate_hours'] = total_child_estimate
                                    task['has_estimate'] = True

                            # Sau ƒë√≥ t√≠nh time_saved_hours
                            if task.get('original_estimate_hours', 0) > 0:
                                task['time_saved_hours'] = task.get('original_estimate_hours', 0) - task.get('total_hours', 0)
                            else:
                                # N·∫øu th·ª±c s·ª± kh√¥ng c√≥ estimate n√†o (c·∫£ cha v√† con ƒë·ªÅu kh√¥ng c√≥)
                                task['time_saved_hours'] = -2  # ƒê√°nh d·∫•u ƒë·∫∑c bi·ªát: c√≥ logwork nh∆∞ng kh√¥ng c√≥ estimate
        
        # X·ª≠ l√Ω t·ª´ng task ƒë·ªÉ thu th·∫≠p th√¥ng tin
        for task in all_tasks:
            project_name = task.get('actual_project', task.get('project', 'Unknown'))
            
            # B·ªè qua c√°c d·ª± √°n kh√¥ng mong mu·ªën trong b√°o c√°o t·ªïng h·ª£p
            if project_name in ["FC", "IMS"]:
                continue
                
            # DEBUG: Ki·ªÉm tra PKT v√† WAK c√≥ ƒë∆∞·ª£c g√°n ƒë√∫ng actual_project kh√¥ng
            # if task.get('project') == 'PKT' and project_name != '[Project] Kho T·ªïng + PIM':
            #     print(f"üîç DEBUG: Task {task.get('key')} t·ª´ PKT c√≥ actual_project = '{project_name}' thay v√¨ '[Project] Kho T·ªïng + PIM'!")
            
            # if task.get('project') == 'WAK' and project_name != 'Web App KHLC':
            #     print(f"üîç DEBUG: Task {task.get('key')} t·ª´ WAK c√≥ actual_project = '{project_name}' thay v√¨ 'Web App KHLC'!")
                
            # DEBUG: C·∫£nh b√°o n·∫øu PKT ho·∫∑c WAK v·∫´n xu·∫•t hi·ªán nh∆∞ t√™n d·ª± √°n
            # if project_name in ['PKT', 'WAK']:
            #     print(f"üö® C·∫¢NH B√ÅO: Task {task.get('key')} c√≥ actual_project = '{project_name}' - logic get_actual_project() KH√îNG ho·∫°t ƒë·ªông!")
                
            employee_name = task.get('employee_name', 'Unknown')
            employee_email = task.get('employee_email', '')
            has_worklog = task.get('has_worklog', False)
            estimated_hours = task.get('original_estimate_hours', 0) or 0
            actual_hours = task.get('total_hours', 0) or 0
            time_saved = task.get('time_saved_hours', 0)
            
            # C·∫≠p nh·∫≠t th√¥ng tin d·ª± √°n
            if project_name not in projects:
                projects[project_name] = {
                    'total_tasks': 0,
                    'tasks_with_worklog': 0,
                    'tasks_without_worklog': 0,
                    'estimated_hours': 0,
                    'actual_hours': 0,
                    'saved_hours': 0,
                    'employee_set': set(),
                    'employees_with_worklog': set(),
                    'employees_without_worklog': set(),
                    'employee_task_status': {}  # Th√™m t·ª´ ƒëi·ªÉn ƒë·ªÉ theo d√µi tr·∫°ng th√°i log work c·ªßa nh√¢n vi√™n
                }
            
            projects[project_name]['total_tasks'] += 1
            projects[project_name]['employee_set'].add(employee_name)
            
            # Kh·ªüi t·∫°o tr·∫°ng th√°i log work c·ªßa nh√¢n vi√™n n·∫øu ch∆∞a c√≥
            if employee_name not in projects[project_name]['employee_task_status']:
                projects[project_name]['employee_task_status'][employee_name] = {'has_log': False, 'no_log': False}
            
            if has_worklog:
                projects[project_name]['tasks_with_worklog'] += 1
                projects[project_name]['estimated_hours'] += estimated_hours
                projects[project_name]['actual_hours'] += actual_hours
                
                # C·∫≠p nh·∫≠t tr·∫°ng th√°i log work c·ªßa nh√¢n vi√™n
                projects[project_name]['employee_task_status'][employee_name]['has_log'] = True
                
                # T√≠nh to√°n th·ªùi gian ti·∫øt ki·ªám cho nh·ªØng task c√≥ log work v√† c√≥ estimate
                if estimated_hours > 0 and time_saved != -1 and time_saved != -2:
                    # time_saved == -1 nghƒ©a l√† kh√¥ng c√≥ log work
                    # time_saved == -2 nghƒ©a l√† c√≥ log work nh∆∞ng kh√¥ng c√≥ estimate
                    if time_saved > 0:
                        projects[project_name]['saved_hours'] += time_saved
            else:
                projects[project_name]['tasks_without_worklog'] += 1
                # C·∫≠p nh·∫≠t tr·∫°ng th√°i log work c·ªßa nh√¢n vi√™n
                projects[project_name]['employee_task_status'][employee_name]['no_log'] = True
            
            # C·∫≠p nh·∫≠t th√¥ng tin nh√¢n vi√™n trong d·ª± √°n
            if project_name not in project_employees:
                project_employees[project_name] = {}
            
            if employee_name not in project_employees[project_name]:
                project_employees[project_name][employee_name] = {
                    'email': employee_email,
                    'total_tasks': 0,
                    'tasks_with_worklog': 0,
                    'tasks_without_worklog': 0,
                    'estimated_hours': 0,
                    'actual_hours': 0,
                    'saved_hours': 0
                }
            
            project_employees[project_name][employee_name]['total_tasks'] += 1
            
            if has_worklog:
                project_employees[project_name][employee_name]['tasks_with_worklog'] += 1
                project_employees[project_name][employee_name]['estimated_hours'] += estimated_hours
                project_employees[project_name][employee_name]['actual_hours'] += actual_hours
                
                # T√≠nh to√°n th·ªùi gian ti·∫øt ki·ªám
                if estimated_hours > 0 and time_saved != -1 and time_saved != -2:
                    if time_saved > 0:
                        project_employees[project_name][employee_name]['saved_hours'] += time_saved
            else:
                project_employees[project_name][employee_name]['tasks_without_worklog'] += 1
            
            # C·∫≠p nh·∫≠t th√¥ng tin nh√¢n vi√™n t·ªïng h·ª£p
            if employee_name not in all_employees:
                all_employees[employee_name] = {
                    'email': employee_email,
                    'total_tasks': 0,
                    'tasks_with_worklog': 0,
                    'tasks_without_worklog': 0,
                    'estimated_hours': 0,
                    'actual_hours': 0,
                    'saved_hours': 0,
                    'projects': set()
                }
            
            all_employees[employee_name]['total_tasks'] += 1
            all_employees[employee_name]['projects'].add(project_name)
            
            if has_worklog:
                all_employees[employee_name]['tasks_with_worklog'] += 1
                all_employees[employee_name]['estimated_hours'] += estimated_hours
                all_employees[employee_name]['actual_hours'] += actual_hours
                
                # T√≠nh to√°n th·ªùi gian ti·∫øt ki·ªám
                if estimated_hours > 0 and time_saved != -1 and time_saved != -2:
                    if time_saved > 0:
                        all_employees[employee_name]['saved_hours'] += time_saved
            else:
                all_employees[employee_name]['tasks_without_worklog'] += 1
        
        # T√≠nh to√°n c√°c ch·ªâ s·ªë ph√°i sinh cho d·ª± √°n
        for project_name, stats in projects.items():
            if stats['total_tasks'] > 0:
                stats['logwork_ratio'] = (stats['tasks_with_worklog'] / stats['total_tasks']) * 100
            else:
                stats['logwork_ratio'] = 0
                
            # T√≠nh l·∫°i th·ªùi gian ti·∫øt ki·ªám: t·ªïng ∆∞·ªõc t√≠nh - t·ªïng th·ª±c t·∫ø
            #stats['saved_hours'] = stats['estimated_hours'] - stats['actual_hours']
                
            if stats['estimated_hours'] > 0:
                stats['saving_ratio'] = (stats['saved_hours'] / stats['estimated_hours']) * 100
            else:
                stats['saving_ratio'] = 0
                
            # C·∫≠p nh·∫≠t danh s√°ch nh√¢n vi√™n d·ª±a tr√™n tr·∫°ng th√°i log work
            stats['employees_with_worklog'] = set()
            stats['employees_without_worklog'] = set()
            
            for emp_name, emp_status in stats['employee_task_status'].items():
                if emp_status['has_log']:
                    stats['employees_with_worklog'].add(emp_name)
                if emp_status['no_log'] and not emp_status['has_log']:
                    stats['employees_without_worklog'].add(emp_name)
            
            stats['total_employees'] = len(stats['employee_set'])
            stats['employees_with_worklog_count'] = len(stats['employees_with_worklog'])
            stats['employees_without_worklog_count'] = len(stats['employees_without_worklog'])
        
        # T√≠nh to√°n c√°c ch·ªâ s·ªë ph√°i sinh cho nh√¢n vi√™n trong t·ª´ng d·ª± √°n
        for project_name, employees in project_employees.items():
            for employee_name, stats in employees.items():
                if stats['total_tasks'] > 0:
                    stats['logwork_ratio'] = (stats['tasks_with_worklog'] / stats['total_tasks']) * 100
                    stats['no_logwork_ratio'] = (stats['tasks_without_worklog'] / stats['total_tasks']) * 100
                else:
                    stats['logwork_ratio'] = 0
                    stats['no_logwork_ratio'] = 0
                    
                if stats['estimated_hours'] > 0:
                    stats['saving_ratio'] = (stats['saved_hours'] / stats['estimated_hours']) * 100
                else:
                    stats['saving_ratio'] = 0
        
        # T√≠nh to√°n c√°c ch·ªâ s·ªë ph√°i sinh cho nh√¢n vi√™n t·ªïng h·ª£p
        for employee_name, stats in all_employees.items():
            if stats['total_tasks'] > 0:
                stats['logwork_ratio'] = (stats['tasks_with_worklog'] / stats['total_tasks']) * 100
                stats['no_logwork_ratio'] = (stats['tasks_without_worklog'] / stats['total_tasks']) * 100
            else:
                stats['logwork_ratio'] = 0
                stats['no_logwork_ratio'] = 0
                
            if stats['estimated_hours'] > 0:
                stats['saving_ratio'] = (stats['saved_hours'] / stats['estimated_hours']) * 100
            else:
                stats['saving_ratio'] = 0
            
            stats['project_count'] = len(stats['projects'])
        
        # T·∫°o danh s√°ch top 10
        # Top 10 nh√¢n vi√™n c√≥ t·ª∑ l·ªá log work cao nh·∫•t
        top_logwork_ratio = sorted(
            [item for item in all_employees.items()],
            key=lambda x: x[1]['logwork_ratio'],
            reverse=True
        )[:10]
        
        # Th√™m ki·ªÉm tra t√≠nh nh·∫•t qu√°n gi·ªØa b√°o c√°o d·ª± √°n v√† b√°o c√°o t·ªïng h·ª£p
        # L∆∞u th√¥ng tin ƒë·ªÉ so s√°nh sau khi t·∫°o b√°o c√°o chi ti·∫øt
        project_stats_for_comparison = {}
        for project_name, stats in projects.items():
            project_stats_for_comparison[project_name] = {
                'estimated_hours': stats['estimated_hours'],
                'actual_hours': stats['actual_hours'],
                'saved_hours': stats['saved_hours']
            }
        
        # Top 10 nh√¢n vi√™n c√≥ th·ªùi gian ti·∫øt ki·ªám l·ªõn nh·∫•t
        top_time_saving = sorted(
            all_employees.items(),
            key=lambda x: x[1]['saved_hours'],
            reverse=True
        )[:10]
        
        # Top 10 nh√¢n vi√™n kh√¥ng log work
        top_no_logwork = sorted(
            [item for item in all_employees.items() if item[1]['tasks_without_worklog'] > 0],
            key=lambda x: (x[1]['tasks_without_worklog'], -x[1]['total_tasks']),
            reverse=True
        )[:10]
        
        # Top 10 nh√¢n vi√™n c√≥ t·ª∑ l·ªá kh√¥ng log work cao nh·∫•t
        top_no_logwork_ratio = sorted(
            [item for item in all_employees.items() if item[1].get('tasks_without_logwork', 0) > 0],
            key=lambda x: x[1].get('no_logwork_ratio', 0),
            reverse=True
        )[:10]
        
        # T·∫°o b√°o c√°o t·ªïng h·ª£p
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write("=== B√ÅO C√ÅO T·ªîNG H·ª¢P C√ÅC D·ª∞ √ÅN ===\n\n")
            
            # Th·ªëng k√™ t·ªïng quan
            # Lo·∫°i b·ªè d·ª± √°n FC kh·ªèi t·ªïng s·ªë (d·ª± ph√≤ng)
            filtered_projects = {name: stats for name, stats in projects.items() if name != "FC"}
            total_projects = len(filtered_projects)
            total_tasks = sum(stats['total_tasks'] for stats in filtered_projects.values())
            total_employees = len(all_employees)
            total_estimated_hours = sum(stats['estimated_hours'] for stats in filtered_projects.values())
            total_actual_hours = sum(stats['actual_hours'] for stats in filtered_projects.values())
            total_saved_hours = sum(stats['saved_hours'] for stats in filtered_projects.values())
            
            f.write("üìä TH·ªêNG K√ä T·ªîNG QUAN:\n")
            f.write(f"- T·ªïng s·ªë d·ª± √°n: {total_projects}\n")
            f.write(f"- T·ªïng s·ªë task: {total_tasks}\n")
            f.write(f"- T·ªïng s·ªë nh√¢n vi√™n: {total_employees}\n")
            f.write(f"- T·ªïng th·ªùi gian ∆∞·ªõc t√≠nh: {total_estimated_hours:.1f} gi·ªù\n")
            f.write(f"- T·ªïng th·ªùi gian th·ª±c t·∫ø: {total_actual_hours:.1f} gi·ªù\n")
            f.write(f"- T·ªïng th·ªùi gian ti·∫øt ki·ªám: {total_saved_hours:.1f} gi·ªù ({(total_saved_hours/total_estimated_hours*100) if total_estimated_hours > 0 else 0:.1f}%)\n\n")
            
            # B·∫£ng th·ªëng k√™ c√°c d·ª± √°n
            f.write("üìã TH·ªêNG K√ä THEO D·ª∞ √ÅN:\n")
            header = "| {:<30} | {:>5} | {:>5} | {:>6} | {:>8} | {:>8} | {:>8} | {:>6} | {:>8} | {:>8} | {:>8} |\n".format(
                "D·ª± √°n", "Tasks", "Log", "%Log", "Est(h)", "Actual(h)", "Saved(h)", "%Save", "NV", "Log NV", "No Log"
            )
            separator = "|-{:-<30}-|-{:->5}-|-{:->5}-|-{:->6}-|-{:->8}-|-{:->8}-|-{:->8}-|-{:->6}-|-{:->8}-|-{:->8}-|-{:->8}-|\n".format(
                "", "", "", "", "", "", "", "", "", "", ""
            )
            
            f.write(separator)
            f.write(header)
            f.write(separator)
            
            # In d·ªØ li·ªáu t·ª´ng d·ª± √°n
            for project_name, stats in sorted(projects.items(), key=lambda x: x[1]['total_tasks'], reverse=True):
                # B·ªè qua d·ª± √°n FC trong b·∫£ng th·ªëng k√™
                if project_name == "FC":
                    continue
                    
                row = "| {:<30} | {:>5} | {:>5} | {:>6.1f} | {:>8.1f} | {:>8.1f} | {:>8.1f} | {:>6.1f} | {:>8} | {:>8} | {:>8} |\n".format(
                    project_name[:30],
                    stats['total_tasks'],
                    stats['tasks_with_worklog'],
                    stats['logwork_ratio'],
                stats['estimated_hours'], 
                    stats['actual_hours'],
                    stats['saved_hours'],
                    stats['saving_ratio'],
                    stats['total_employees'],
                    stats['employees_with_worklog_count'],
                    stats['employees_without_worklog_count']
                )
                f.write(row)
            
            f.write(separator)
            
            # T·ªïng c·ªông
            total_row = "| {:<30} | {:>5} | {:>5} | {:>6.1f} | {:>8.1f} | {:>8.1f} | {:>8.1f} | {:>6.1f} | {:>8} | {:>8} | {:>8} |\n".format(
                "T·ªîNG C·ªòNG",
                total_tasks,
                sum(stats['tasks_with_worklog'] for stats in filtered_projects.values()),
                (sum(stats['tasks_with_worklog'] for stats in filtered_projects.values()) / total_tasks * 100) if total_tasks > 0 else 0,
                total_estimated_hours,
                total_actual_hours,
                total_saved_hours,
                (total_saved_hours / total_estimated_hours * 100) if total_estimated_hours > 0 else 0,
                total_employees,
                len([e for e in all_employees.values() if e['tasks_with_worklog'] > 0]),
                len([e for e in all_employees.values() if e['tasks_with_worklog'] == 0])
            )
            f.write(total_row)
            f.write(separator)
            f.write("\n\n")
            
            # Top 10 nh√¢n vi√™n c√≥ t·ª∑ l·ªá log work cao nh·∫•t
            f.write("üîù TOP 10 NH√ÇN VI√äN C√ì T·ª∂ L·ªÜ LOG WORK CAO NH·∫§T:\n")
            if top_logwork_ratio:
                header = f"{'STT':<5}{'T√™n nh√¢n vi√™n':<30}{'S·ªë d·ª± √°n':<10}{'T·ªïng task':<10}{'C√≥ log':<10}{'T·ª∑ l·ªá log':<10}{'Th·ªùi gian':<10}\n"
                f.write(header)
                f.write("-" * 85 + "\n")
                
                for idx, (name, stats) in enumerate(top_logwork_ratio, 1):
                    row = f"{idx:<5}{name[:28]:<30}{stats['project_count']:<10}{stats['total_tasks']:<10}{stats['tasks_with_worklog']:<10}{stats['logwork_ratio']:.1f}%{' ':<5}{stats['actual_hours']:.1f}h\n"
                    f.write(row)
            else:
                f.write("Kh√¥ng c√≥ d·ªØ li·ªáu\n")
            f.write("\n")
            
            # Top 10 nh√¢n vi√™n c√≥ th·ªùi gian ti·∫øt ki·ªám l·ªõn nh·∫•t
            f.write("üí∞ TOP 10 NH√ÇN VI√äN TI·∫æT KI·ªÜM TH·ªúI GIAN NHI·ªÄU NH·∫§T:\n")
            if top_time_saving:
                header = f"{'STT':<5}{'T√™n nh√¢n vi√™n':<30}{'T·ªïng task':<10}{'∆Ø·ªõc t√≠nh':<10}{'Th·ª±c t·∫ø':<10}{'Ti·∫øt ki·ªám':<10}{'T·ª∑ l·ªá':<10}\n"
                f.write(header)
                f.write("-" * 85 + "\n")
                
                for idx, (name, stats) in enumerate(top_time_saving, 1):
                    row = f"{idx:<5}{name[:28]:<30}{stats['total_tasks']:<10}{stats['estimated_hours']:.1f}h{' ':<5}{stats['actual_hours']:.1f}h{' ':<5}{stats['saved_hours']:.1f}h{' ':<5}{stats['saving_ratio']:.1f}%\n"
                    f.write(row)
            else:
                f.write("Kh√¥ng c√≥ d·ªØ li·ªáu\n")
            f.write("\n")
            
            # Top 10 nh√¢n vi√™n kh√¥ng log work
            f.write("‚ö†Ô∏è TOP 10 NH√ÇN VI√äN C√ì NHI·ªÄU TASK KH√îNG LOG WORK:\n")
            if top_no_logwork:
                header = f"{'STT':<5}{'T√™n nh√¢n vi√™n':<30}{'S·ªë d·ª± √°n':<10}{'T·ªïng task':<10}{'Kh√¥ng log':<10}{'T·ª∑ l·ªá':<10}\n"
                f.write(header)
                f.write("-" * 75 + "\n")
                
                for idx, (name, stats) in enumerate(top_no_logwork, 1):
                    row = f"{idx:<5}{name[:28]:<30}{stats['project_count']:<10}{stats['total_tasks']:<10}{stats['tasks_without_worklog']:<10}{stats['no_logwork_ratio']:.1f}%\n"
                    f.write(row)
            else:
                f.write("Kh√¥ng c√≥ d·ªØ li·ªáu\n")
            f.write("\n")
            
            # Top 10 nh√¢n vi√™n c√≥ t·ª∑ l·ªá kh√¥ng log work cao nh·∫•t
            f.write("üö´ TOP 10 NH√ÇN VI√äN C√ì T·ª∂ L·ªÜ KH√îNG LOG WORK CAO NH·∫§T:\n")
            if top_no_logwork_ratio:
                header = f"{'STT':<5}{'T√™n nh√¢n vi√™n':<30}{'S·ªë d·ª± √°n':<10}{'T·ªïng task':<10}{'Kh√¥ng log':<10}{'T·ª∑ l·ªá':<10}\n"
                f.write(header)
                f.write("-" * 75 + "\n")
                
                for idx, (name, stats) in enumerate(top_no_logwork_ratio, 1):
                    row = f"{idx:<5}{name[:28]:<30}{stats['project_count']:<10}{stats['total_tasks']:<10}{stats['tasks_without_worklog']:<10}{stats['no_logwork_ratio']:.1f}%\n"
                    f.write(row)
            else:
                f.write("Kh√¥ng c√≥ d·ªØ li·ªáu\n")
        
        # T·∫°o b√°o c√°o CSV
        with open(csv_output_file, 'w', encoding='utf-8', newline='') as f:
            # Header
            f.write("Project,Tasks,TasksWithLog,LogRatio,EstimatedHours,ActualHours,SavedHours,SavingRatio,Employees,EmployeesWithLog,EmployeesWithoutLog\n")
            
            # D·ªØ li·ªáu t·ª´ng d·ª± √°n
            for project_name, stats in sorted(projects.items(), key=lambda x: x[1]['total_tasks'], reverse=True):
                # B·ªè qua d·ª± √°n FC trong b√°o c√°o CSV
                if project_name == "FC":
                    continue
                    
                row = f"{project_name.replace(',', ';')},{stats['total_tasks']},{stats['tasks_with_worklog']},{stats['logwork_ratio']:.1f},{stats['estimated_hours']:.1f},{stats['actual_hours']:.1f},{stats['saved_hours']:.1f},{stats['saving_ratio']:.1f},{stats['total_employees']},{stats['employees_with_worklog_count']},{stats['employees_without_worklog_count']}\n"
                f.write(row)
                
            # T·ªïng c·ªông
            total_row = f"T·ªîNG C·ªòNG,{total_tasks},{sum(stats['tasks_with_worklog'] for stats in filtered_projects.values())},{(sum(stats['tasks_with_worklog'] for stats in filtered_projects.values()) / total_tasks * 100) if total_tasks > 0 else 0:.1f},{total_estimated_hours:.1f},{total_actual_hours:.1f},{total_saved_hours:.1f},{(total_saved_hours / total_estimated_hours * 100) if total_estimated_hours > 0 else 0:.1f},{total_employees},{len([e for e in all_employees.values() if e['tasks_with_worklog'] > 0])},{len([e for e in all_employees.values() if e['tasks_with_worklog'] == 0])}\n"
            f.write(total_row)
        
        print(f"‚úÖ ƒê√£ t·∫°o b√°o c√°o t·ªïng h·ª£p: {output_file}")
        print(f"‚úÖ ƒê√£ t·∫°o b√°o c√°o CSV: {csv_output_file}")
        
        return project_stats_for_comparison    
    except Exception as e:
        print(f"‚ùå L·ªói khi t·∫°o b√°o c√°o t·ªïng h·ª£p: {str(e)}")
        import traceback
        traceback.print_exc()
        return None

def check_consistency(project_summary_stats, project_report_files):
    """
    Ki·ªÉm tra t√≠nh nh·∫•t qu√°n gi·ªØa b√°o c√°o t·ªïng h·ª£p v√† b√°o c√°o chi ti·∫øt d·ª± √°n
    
    Args:
        project_summary_stats (dict): Th√¥ng tin th·ªùi gian ti·∫øt ki·ªám t·ª´ b√°o c√°o t·ªïng h·ª£p
        project_report_files (list): Danh s√°ch file b√°o c√°o d·ª± √°n
        
    Returns:
        bool: True n·∫øu nh·∫•t qu√°n, False n·∫øu c√≥ s·ª± kh√°c bi·ªát
    """
            # print("\nüîç KI·ªÇM TRA T√çNH NH·∫§T QU√ÅN GI·ªÆA B√ÅO C√ÅO T·ªîNG H·ª¢P V√Ä B√ÅO C√ÅO D·ª∞ √ÅN:")
    
    inconsistencies = []
    
    for report_file in project_report_files:
        # L·∫•y t√™n d·ª± √°n t·ª´ t√™n file b√°o c√°o
        file_name = os.path.basename(report_file)
        
        # B·ªè qua file b√°o c√°o t·ªïng h·ª£p
        if file_name.startswith("all_projects_summary"):
            continue
            
        # Tr√≠ch xu·∫•t th√¥ng tin th·ªùi gian ti·∫øt ki·ªám t·ª´ file b√°o c√°o d·ª± √°n
        try:
            with open(report_file, 'r', encoding='utf-8') as f:
                content = f.read()
                
                # T√¨m t√™n d·ª± √°n
                match = re.search(r"=== B√ÅO C√ÅO D·ª∞ √ÅN: (.*?) ===", content)
                if not match:
                    continue
                    
                project_name = match.group(1)
                
                # B·ªè qua n·∫øu d·ª± √°n kh√¥ng c√≥ trong b√°o c√°o t·ªïng h·ª£p
                if project_name not in project_summary_stats:
                    continue
                
                # T√¨m th√¥ng tin th·ªùi gian t·ª´ b√°o c√°o d·ª± √°n
                est_match = re.search(r"- T·ªïng th·ªùi gian ∆∞·ªõc t√≠nh: ([\d\.]+) gi·ªù", content)
                act_match = re.search(r"- T·ªïng th·ªùi gian th·ª±c t·∫ø: ([\d\.]+) gi·ªù", content)
                save_match = re.search(r"- Th·ªùi gian ti·∫øt ki·ªám: ([\d\.]+) gi·ªù", content)
                
                if est_match and act_match and save_match:
                    report_est = float(est_match.group(1))
                    report_act = float(act_match.group(1))
                    report_save = float(save_match.group(1))
                    
                    # So s√°nh v·ªõi th√¥ng tin t·ª´ b√°o c√°o t·ªïng h·ª£p
                    summary_est = project_summary_stats[project_name]['estimated_hours']
                    summary_act = project_summary_stats[project_name]['actual_hours']
                    summary_save = project_summary_stats[project_name]['saved_hours']
                    
                    # Ki·ªÉm tra s·ª± ch√™nh l·ªách (cho ph√©p sai s·ªë nh·ªè do l√†m tr√≤n)
                    est_diff = abs(report_est - summary_est)
                    act_diff = abs(report_act - summary_act)
                    save_diff = abs(report_save - summary_save)
                    
                    tolerance = 1.0  # TƒÉng dung sai l√™n 1 gi·ªù
                    
                    if est_diff > tolerance or act_diff > tolerance or save_diff > tolerance:
                        inconsistencies.append({
                            'project': project_name,
                            'report_file': file_name,
                            'report_est': report_est,
                            'summary_est': summary_est,
                            'est_diff': est_diff,
                            'report_act': report_act,
                            'summary_act': summary_act,
                            'act_diff': act_diff,
                            'report_save': report_save,
                            'summary_save': summary_save,
                            'save_diff': save_diff
                        })
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói khi ki·ªÉm tra file {file_name}: {str(e)}")
    
    # Hi·ªÉn th·ªã k·∫øt qu·∫£
    if inconsistencies:
        print("\n‚ö†Ô∏è Ph√°t hi·ªán s·ª± kh√¥ng nh·∫•t qu√°n gi·ªØa b√°o c√°o t·ªïng h·ª£p v√† b√°o c√°o d·ª± √°n:")
        
        # Nh√≥m c√°c v·∫•n ƒë·ªÅ theo d·ª± √°n
        grouped_issues = {}
        for item in inconsistencies:
            project = item['project']
            if project not in grouped_issues:
                grouped_issues[project] = []
            grouped_issues[project].append(item)
        
        # In ra theo t·ª´ng d·ª± √°n
        for project, issues in grouped_issues.items():
            print(f"\n{'-'*80}")
            # print(f"üîç D·ª∞ √ÅN: {project}")
            print(f"{'-'*80}")
            
            # Ch·ªâ hi·ªÉn th·ªã file v·ªõi ch√™nh l·ªách l·ªõn nh·∫•t cho m·ªói d·ª± √°n
            max_diff_issue = max(issues, key=lambda x: max(x['est_diff'], x['act_diff'], x['save_diff']))
            
            print(f"  File: {max_diff_issue['report_file']}")
            print(f"  ∆Ø·ªõc t√≠nh:   B√°o c√°o d·ª± √°n: {max_diff_issue['report_est']:.1f}h    T·ªïng h·ª£p: {max_diff_issue['summary_est']:.1f}h    Ch√™nh l·ªách: {max_diff_issue['est_diff']:.1f}h")
            print(f"  Th·ª±c t·∫ø:    B√°o c√°o d·ª± √°n: {max_diff_issue['report_act']:.1f}h    T·ªïng h·ª£p: {max_diff_issue['summary_act']:.1f}h    Ch√™nh l·ªách: {max_diff_issue['act_diff']:.1f}h")
            print(f"  Ti·∫øt ki·ªám:  B√°o c√°o d·ª± √°n: {max_diff_issue['report_save']:.1f}h    T·ªïng h·ª£p: {max_diff_issue['summary_save']:.1f}h    Ch√™nh l·ªách: {max_diff_issue['save_diff']:.1f}h")
            
            if len(issues) > 1:
                print(f"  (C√≤n {len(issues)-1} file kh√°c c√≥ ch√™nh l·ªách t∆∞∆°ng t·ª±)")
        
        return False
    else:
        print("‚úÖ T·∫•t c·∫£ b√°o c√°o ƒë·ªÅu nh·∫•t qu√°n!")
        return True

def synchronize_reports(all_tasks, output_dir, timestamp):
    """
    ƒê·ªìng b·ªô h√≥a b√°o c√°o t·ªïng h·ª£p v√† b√°o c√°o chi ti·∫øt d·ª± √°n
    
    Args:
        all_tasks (list): Danh s√°ch t·∫•t c·∫£ c√°c task
        output_dir (str): Th∆∞ m·ª•c ch·ª©a b√°o c√°o
        timestamp (str): D·∫•u th·ªùi gian ƒë·ªÉ x√°c ƒë·ªãnh b√°o c√°o c√πng ƒë·ª£t
        
    Returns:
        bool: True n·∫øu th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
    """
    try:
        # L·∫•y danh s√°ch t·∫•t c·∫£ file b√°o c√°o
        report_files = [os.path.join(output_dir, f) for f in os.listdir(output_dir) 
                         if f.endswith(f"{timestamp}.txt")]
        
        # ƒê·ªçc b√°o c√°o t·ªïng h·ª£p
        summary_file = os.path.join(output_dir, f"all_projects_summary_{timestamp}.txt")
        if not os.path.exists(summary_file):
            print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y b√°o c√°o t·ªïng h·ª£p: {summary_file}")
            return False
            
        # T·∫°o dictionary ƒë·ªÉ l∆∞u th√¥ng tin d·ª± √°n
        projects_tasks = {}
        for task in all_tasks:
            project_name = task.get('actual_project', task.get('project', 'Unknown'))
            if project_name in ["FC", "IMS"]:  # B·ªè qua c√°c d·ª± √°n kh√¥ng mong mu·ªën
                continue
                
            if project_name not in projects_tasks:
                projects_tasks[project_name] = []
            projects_tasks[project_name].append(task)
        
        # T√≠nh to√°n l·∫°i th·ªùi gian ti·∫øt ki·ªám cho t·ª´ng d·ª± √°n
        project_stats = {}
        for project_name, tasks in projects_tasks.items():
            total_estimated_hours = sum(task.get('original_estimate_hours', 0) or 0 for task in tasks)
            total_actual_hours = sum(task.get('total_hours', 0) or 0 for task in tasks)
            saved_hours = total_estimated_hours - total_actual_hours
            saving_ratio = (saved_hours / total_estimated_hours * 100) if total_estimated_hours > 0 else 0
            
            project_stats[project_name] = {
                'total_tasks': len(tasks),
                'tasks_with_logwork': len([task for task in tasks if task.get('has_worklog', False)]),
                'total_estimated_hours': total_estimated_hours,
                'total_actual_hours': total_actual_hours,
                'saved_hours': saved_hours,
                'saving_ratio': saving_ratio
            }
        
        # C·∫≠p nh·∫≠t b√°o c√°o t·ªïng h·ª£p
        with open(summary_file, 'r', encoding='utf-8') as f:
            content = f.read()
            
        # C·∫≠p nh·∫≠t t·ª´ng d·ª± √°n trong b√°o c√°o t·ªïng h·ª£p
        for project_name, stats in project_stats.items():
            # T√¨m d√≤ng th√¥ng tin d·ª± √°n trong b√°o c√°o
            pattern = r"\|\s+" + re.escape(project_name) + r"\s+\|\s+(\d+)\s+\|\s+(\d+)\s+\|\s+([\d\.]+)\s+\|\s+([\d\.]+)\s+\|\s+([\d\.]+)\s+\|\s+([\d\.]+)\s+\|\s+([\d\.]+)\s+\|\s+(\d+)\s+\|\s+(\d+)\s+\|\s+(\d+)\s+\|"
            replacement = f"| {project_name:<30} | {stats['total_tasks']:>5} | {stats['tasks_with_logwork']:>5} | {(stats['tasks_with_logwork']/stats['total_tasks']*100) if stats['total_tasks'] > 0 else 0:>6.1f} | {stats['total_estimated_hours']:>8.1f} | {stats['total_actual_hours']:>8.1f} | {stats['saved_hours']:>8.1f} | {stats['saving_ratio']:>6.1f} | {0:>8} | {0:>8} | {0:>8} |"
            content = re.sub(pattern, replacement, content)
            
        with open(summary_file, 'w', encoding='utf-8') as f:
            f.write(content)
            
        # C·∫≠p nh·∫≠t t·ª´ng b√°o c√°o d·ª± √°n
        for project_name, stats in project_stats.items():
            # T√¨m file b√°o c√°o d·ª± √°n
            project_file = None
            for file in report_files:
                if project_name in os.path.basename(file) and "all_projects_summary" not in os.path.basename(file):
                    project_file = file
                    break
                    
            if not project_file:
                continue
                
            # ƒê·ªçc n·ªôi dung file
            with open(project_file, 'r', encoding='utf-8') as f:
                content = f.read()
                
            # C·∫≠p nh·∫≠t th·ªùi gian ti·∫øt ki·ªám
            est_pattern = r"- T·ªïng th·ªùi gian ∆∞·ªõc t√≠nh: ([\d\.]+) gi·ªù"
            act_pattern = r"- T·ªïng th·ªùi gian th·ª±c t·∫ø: ([\d\.]+) gi·ªù"
            save_pattern = r"- Th·ªùi gian ti·∫øt ki·ªám: ([\d\.]+) gi·ªù \(([\d\.]+)%\)"
            
            # ƒê·∫£m b·∫£o s·ªë li·ªáu ∆∞·ªõc t√≠nh v√† th·ª±c t·∫ø kh·ªõp v·ªõi ƒë√£ t√≠nh to√°n
            content = re.sub(est_pattern, f"- T·ªïng th·ªùi gian ∆∞·ªõc t√≠nh: {stats['total_estimated_hours']:.1f} gi·ªù", content)
            content = re.sub(act_pattern, f"- T·ªïng th·ªùi gian th·ª±c t·∫ø: {stats['total_actual_hours']:.1f} gi·ªù", content)
            content = re.sub(save_pattern, f"- Th·ªùi gian ti·∫øt ki·ªám: {stats['saved_hours']:.1f} gi·ªù ({stats['saving_ratio']:.1f}%)", content)
            
            # Ghi n·ªôi dung m·ªõi
            with open(project_file, 'w', encoding='utf-8') as f:
                f.write(content)
                
        print(f"‚úÖ ƒê√£ ƒë·ªìng b·ªô h√≥a t·∫•t c·∫£ c√°c b√°o c√°o th√†nh c√¥ng!")
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói khi ƒë·ªìng b·ªô h√≥a b√°o c√°o: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    main() 
